
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:32 GMT 2016 ///

/// interface java.sql.Blob ///

public protocol Blob: JavaProtocol {

    /// public abstract long java.sql.Blob.length() throws java.sql.SQLException

    func length() throws /* java.sql.SQLException */ -> Int64

    /// public abstract byte[] java.sql.Blob.getBytes(long,int) throws java.sql.SQLException

    func getBytes( arg0: Int64, arg1: Int ) throws /* java.sql.SQLException */ -> [Int8]!
    func getBytes( _ _arg0: Int64, _ _arg1: Int ) throws /* java.sql.SQLException */ -> [Int8]!

    /// public abstract long java.sql.Blob.position(byte[],long) throws java.sql.SQLException

    func position( arg0: [Int8]?, arg1: Int64 ) throws /* java.sql.SQLException */ -> Int64
    func position( _ _arg0: [Int8]?, _ _arg1: Int64 ) throws /* java.sql.SQLException */ -> Int64

    /// public abstract long java.sql.Blob.position(java.sql.Blob,long) throws java.sql.SQLException

    func position( arg0: Blob?, arg1: Int64 ) throws /* java.sql.SQLException */ -> Int64
    func position( _ _arg0: Blob?, _ _arg1: Int64 ) throws /* java.sql.SQLException */ -> Int64

    /// public abstract void java.sql.Blob.truncate(long) throws java.sql.SQLException

    func truncate( arg0: Int64 ) throws /* java.sql.SQLException */
    func truncate( _ _arg0: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.Blob.free() throws java.sql.SQLException

    func free() throws /* java.sql.SQLException */

    /// public abstract java.io.InputStream java.sql.Blob.getBinaryStream(long,long) throws java.sql.SQLException

    /// public abstract java.io.InputStream java.sql.Blob.getBinaryStream() throws java.sql.SQLException

    /// public abstract int java.sql.Blob.setBytes(long,byte[],int,int) throws java.sql.SQLException

    func setBytes( arg0: Int64, arg1: [Int8]?, arg2: Int, arg3: Int ) throws /* java.sql.SQLException */ -> Int
    func setBytes( _ _arg0: Int64, _ _arg1: [Int8]?, _ _arg2: Int, _ _arg3: Int ) throws /* java.sql.SQLException */ -> Int

    /// public abstract int java.sql.Blob.setBytes(long,byte[]) throws java.sql.SQLException

    func setBytes( arg0: Int64, arg1: [Int8]? ) throws /* java.sql.SQLException */ -> Int
    func setBytes( _ _arg0: Int64, _ _arg1: [Int8]? ) throws /* java.sql.SQLException */ -> Int

    /// public abstract java.io.OutputStream java.sql.Blob.setBinaryStream(long) throws java.sql.SQLException

}

open class BlobForward: JNIObjectForward, Blob {

    private static var BlobJNIClass: jclass?

    /// public abstract long java.sql.Blob.length() throws java.sql.SQLException

    private static var length_MethodID_9: jmethodID?

    open func length() throws /* java.sql.SQLException */ -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "length", methodSig: "()J", methodCache: &BlobForward.length_MethodID_9, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int64(), from: __return )
    }


    /// public abstract byte[] java.sql.Blob.getBytes(long,int) throws java.sql.SQLException

    private static var getBytes_MethodID_10: jmethodID?

    open func getBytes( arg0: Int64, arg1: Int ) throws /* java.sql.SQLException */ -> [Int8]! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBytes", methodSig: "(JI)[B", methodCache: &BlobForward.getBytes_MethodID_10, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: [Int8](), from: __return )
    }

    open func getBytes( _ _arg0: Int64, _ _arg1: Int ) throws /* java.sql.SQLException */ -> [Int8]! {
        return try getBytes( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract long java.sql.Blob.position(byte[],long) throws java.sql.SQLException

    private static var position_MethodID_11: jmethodID?

    open func position( arg0: [Int8]?, arg1: Int64 ) throws /* java.sql.SQLException */ -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "position", methodSig: "([BJ)J", methodCache: &BlobForward.position_MethodID_11, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func position( _ _arg0: [Int8]?, _ _arg1: Int64 ) throws /* java.sql.SQLException */ -> Int64 {
        return try position( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract long java.sql.Blob.position(java.sql.Blob,long) throws java.sql.SQLException

    private static var position_MethodID_12: jmethodID?

    open func position( arg0: Blob?, arg1: Int64 ) throws /* java.sql.SQLException */ -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "position", methodSig: "(Ljava/sql/Blob;J)J", methodCache: &BlobForward.position_MethodID_12, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func position( _ _arg0: Blob?, _ _arg1: Int64 ) throws /* java.sql.SQLException */ -> Int64 {
        return try position( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.Blob.truncate(long) throws java.sql.SQLException

    private static var truncate_MethodID_13: jmethodID?

    open func truncate( arg0: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "truncate", methodSig: "(J)V", methodCache: &BlobForward.truncate_MethodID_13, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func truncate( _ _arg0: Int64 ) throws /* java.sql.SQLException */ {
        try truncate( arg0: _arg0 )
    }

    /// public abstract void java.sql.Blob.free() throws java.sql.SQLException

    private static var free_MethodID_14: jmethodID?

    open func free() throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "free", methodSig: "()V", methodCache: &BlobForward.free_MethodID_14, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }


    /// public abstract java.io.InputStream java.sql.Blob.getBinaryStream(long,long) throws java.sql.SQLException

    /// public abstract java.io.InputStream java.sql.Blob.getBinaryStream() throws java.sql.SQLException

    /// public abstract int java.sql.Blob.setBytes(long,byte[],int,int) throws java.sql.SQLException

    private static var setBytes_MethodID_15: jmethodID?

    open func setBytes( arg0: Int64, arg1: [Int8]?, arg2: Int, arg3: Int ) throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "setBytes", methodSig: "(J[BII)I", methodCache: &BlobForward.setBytes_MethodID_15, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }

    open func setBytes( _ _arg0: Int64, _ _arg1: [Int8]?, _ _arg2: Int, _ _arg3: Int ) throws /* java.sql.SQLException */ -> Int {
        return try setBytes( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract int java.sql.Blob.setBytes(long,byte[]) throws java.sql.SQLException

    private static var setBytes_MethodID_16: jmethodID?

    open func setBytes( arg0: Int64, arg1: [Int8]? ) throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "setBytes", methodSig: "(J[B)I", methodCache: &BlobForward.setBytes_MethodID_16, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }

    open func setBytes( _ _arg0: Int64, _ _arg1: [Int8]? ) throws /* java.sql.SQLException */ -> Int {
        return try setBytes( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.io.OutputStream java.sql.Blob.setBinaryStream(long) throws java.sql.SQLException

}


