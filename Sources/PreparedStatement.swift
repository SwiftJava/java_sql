
import java_swift
import java_util
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:32 GMT 2016 ///

/// interface java.sql.PreparedStatement ///

public protocol PreparedStatement: Statement {

    /// public abstract void java.sql.PreparedStatement.setBoolean(int,boolean) throws java.sql.SQLException

    func setBoolean( arg0: Int, arg1: Bool ) throws /* java.sql.SQLException */
    func setBoolean( _ _arg0: Int, _ _arg1: Bool ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setByte(int,byte) throws java.sql.SQLException

    func setByte( arg0: Int, arg1: Int8 ) throws /* java.sql.SQLException */
    func setByte( _ _arg0: Int, _ _arg1: Int8 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setShort(int,short) throws java.sql.SQLException

    func setShort( arg0: Int, arg1: Int16 ) throws /* java.sql.SQLException */
    func setShort( _ _arg0: Int, _ _arg1: Int16 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setInt(int,int) throws java.sql.SQLException

    func setInt( arg0: Int, arg1: Int ) throws /* java.sql.SQLException */
    func setInt( _ _arg0: Int, _ _arg1: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setLong(int,long) throws java.sql.SQLException

    func setLong( arg0: Int, arg1: Int64 ) throws /* java.sql.SQLException */
    func setLong( _ _arg0: Int, _ _arg1: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setFloat(int,float) throws java.sql.SQLException

    func setFloat( arg0: Int, arg1: Float ) throws /* java.sql.SQLException */
    func setFloat( _ _arg0: Int, _ _arg1: Float ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setDouble(int,double) throws java.sql.SQLException

    func setDouble( arg0: Int, arg1: Double ) throws /* java.sql.SQLException */
    func setDouble( _ _arg0: Int, _ _arg1: Double ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp) throws java.sql.SQLException

    func setTimestamp( arg0: Int, arg1: Timestamp? ) throws /* java.sql.SQLException */
    func setTimestamp( _ _arg0: Int, _ _arg1: Timestamp? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp,java.util.Calendar) throws java.sql.SQLException

    func setTimestamp( arg0: Int, arg1: Timestamp?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */
    func setTimestamp( _ _arg0: Int, _ _arg1: Timestamp?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setURL(int,java.net.URL) throws java.sql.SQLException

    func setURL( arg0: Int, arg1: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setURL( _ _arg0: Int, _ _arg1: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setTime(int,java.sql.Time,java.util.Calendar) throws java.sql.SQLException

    func setTime( arg0: Int, arg1: Time?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */
    func setTime( _ _arg0: Int, _ _arg1: Time?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setTime(int,java.sql.Time) throws java.sql.SQLException

    func setTime( arg0: Int, arg1: Time? ) throws /* java.sql.SQLException */
    func setTime( _ _arg0: Int, _ _arg1: Time? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setDate(int,java.sql.Date) throws java.sql.SQLException

    func setDate( arg0: Int, arg1: Date? ) throws /* java.sql.SQLException */
    func setDate( _ _arg0: Int, _ _arg1: Date? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setDate(int,java.sql.Date,java.util.Calendar) throws java.sql.SQLException

    func setDate( arg0: Int, arg1: Date?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */
    func setDate( _ _arg0: Int, _ _arg1: Date?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */

    /// public abstract boolean java.sql.PreparedStatement.execute() throws java.sql.SQLException

    func execute() throws /* java.sql.SQLException */ -> Bool

    /// public abstract java.sql.ResultSetMetaData java.sql.PreparedStatement.getMetaData() throws java.sql.SQLException

    func getMetaData() throws /* java.sql.SQLException */ -> ResultSetMetaData!

    /// public abstract void java.sql.PreparedStatement.setBytes(int,byte[]) throws java.sql.SQLException

    func setBytes( arg0: Int, arg1: [Int8]? ) throws /* java.sql.SQLException */
    func setBytes( _ _arg0: Int, _ _arg1: [Int8]? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream) throws java.sql.SQLException

    func setBinaryStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setBinaryStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream,int) throws java.sql.SQLException

    func setBinaryStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */
    func setBinaryStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream,long) throws java.sql.SQLException

    func setBinaryStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */
    func setBinaryStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setNull(int,int,java.lang.String) throws java.sql.SQLException

    func setNull( arg0: Int, arg1: Int, arg2: String? ) throws /* java.sql.SQLException */
    func setNull( _ _arg0: Int, _ _arg1: Int, _ _arg2: String? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setNull(int,int) throws java.sql.SQLException

    func setNull( arg0: Int, arg1: Int ) throws /* java.sql.SQLException */
    func setNull( _ _arg0: Int, _ _arg1: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setBigDecimal(int,java.math.BigDecimal) throws java.sql.SQLException

    func setBigDecimal( arg0: Int, arg1: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setBigDecimal( _ _arg0: Int, _ _arg1: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setString(int,java.lang.String) throws java.sql.SQLException

    func setString( arg0: Int, arg1: String? ) throws /* java.sql.SQLException */
    func setString( _ _arg0: Int, _ _arg1: String? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream,int) throws java.sql.SQLException

    func setAsciiStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */
    func setAsciiStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream,long) throws java.sql.SQLException

    func setAsciiStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */
    func setAsciiStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream) throws java.sql.SQLException

    func setAsciiStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setAsciiStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object) throws java.sql.SQLException

    func setObject( arg0: Int, arg1: java_lang.JavaObject? ) throws /* java.sql.SQLException */
    func setObject( _ _arg0: Int, _ _arg1: java_lang.JavaObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object,int) throws java.sql.SQLException

    func setObject( arg0: Int, arg1: java_lang.JavaObject?, arg2: Int ) throws /* java.sql.SQLException */
    func setObject( _ _arg0: Int, _ _arg1: java_lang.JavaObject?, _ _arg2: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object,int,int) throws java.sql.SQLException

    func setObject( arg0: Int, arg1: java_lang.JavaObject?, arg2: Int, arg3: Int ) throws /* java.sql.SQLException */
    func setObject( _ _arg0: Int, _ _arg1: java_lang.JavaObject?, _ _arg2: Int, _ _arg3: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader,int) throws java.sql.SQLException

    func setCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */
    func setCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader,long) throws java.sql.SQLException

    func setCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */
    func setCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader) throws java.sql.SQLException

    func setCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setRowId(int,java.sql.RowId) throws java.sql.SQLException

    func setRowId( arg0: Int, arg1: RowId? ) throws /* java.sql.SQLException */
    func setRowId( _ _arg0: Int, _ _arg1: RowId? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setNString(int,java.lang.String) throws java.sql.SQLException

    func setNString( arg0: Int, arg1: String? ) throws /* java.sql.SQLException */
    func setNString( _ _arg0: Int, _ _arg1: String? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setNCharacterStream(int,java.io.Reader,long) throws java.sql.SQLException

    func setNCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */
    func setNCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setNCharacterStream(int,java.io.Reader) throws java.sql.SQLException

    func setNCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setNCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setNClob(int,java.sql.NClob) throws java.sql.SQLException

    func setNClob( arg0: Int, arg1: NClob? ) throws /* java.sql.SQLException */
    func setNClob( _ _arg0: Int, _ _arg1: NClob? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setNClob(int,java.io.Reader,long) throws java.sql.SQLException

    func setNClob( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */
    func setNClob( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setNClob(int,java.io.Reader) throws java.sql.SQLException

    func setNClob( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setNClob( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setClob(int,java.sql.Clob) throws java.sql.SQLException

    func setClob( arg0: Int, arg1: Clob? ) throws /* java.sql.SQLException */
    func setClob( _ _arg0: Int, _ _arg1: Clob? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setClob(int,java.io.Reader,long) throws java.sql.SQLException

    func setClob( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */
    func setClob( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setClob(int,java.io.Reader) throws java.sql.SQLException

    func setClob( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setClob( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setBlob(int,java.sql.Blob) throws java.sql.SQLException

    func setBlob( arg0: Int, arg1: Blob? ) throws /* java.sql.SQLException */
    func setBlob( _ _arg0: Int, _ _arg1: Blob? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setBlob(int,java.io.InputStream,long) throws java.sql.SQLException

    func setBlob( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */
    func setBlob( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setBlob(int,java.io.InputStream) throws java.sql.SQLException

    func setBlob( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setBlob( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setSQLXML(int,java.sql.SQLXML) throws java.sql.SQLException

    func setSQLXML( arg0: Int, arg1: SQLXML? ) throws /* java.sql.SQLException */
    func setSQLXML( _ _arg0: Int, _ _arg1: SQLXML? ) throws /* java.sql.SQLException */

    /// public abstract java.sql.ResultSet java.sql.PreparedStatement.executeQuery() throws java.sql.SQLException

    func executeQuery() throws /* java.sql.SQLException */ -> ResultSet!

    /// public abstract int java.sql.PreparedStatement.executeUpdate() throws java.sql.SQLException

    func executeUpdate() throws /* java.sql.SQLException */ -> Int

    /// public abstract void java.sql.PreparedStatement.setUnicodeStream(int,java.io.InputStream,int) throws java.sql.SQLException

    func setUnicodeStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */
    func setUnicodeStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.clearParameters() throws java.sql.SQLException

    func clearParameters() throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.addBatch() throws java.sql.SQLException

    func addBatch() throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setRef(int,java.sql.Ref) throws java.sql.SQLException

    func setRef( arg0: Int, arg1: Ref? ) throws /* java.sql.SQLException */
    func setRef( _ _arg0: Int, _ _arg1: Ref? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.PreparedStatement.setArray(int,java.sql.Array) throws java.sql.SQLException

    func setArray( arg0: Int, arg1: Array? ) throws /* java.sql.SQLException */
    func setArray( _ _arg0: Int, _ _arg1: Array? ) throws /* java.sql.SQLException */

    /// public abstract java.sql.ParameterMetaData java.sql.PreparedStatement.getParameterMetaData() throws java.sql.SQLException

    func getParameterMetaData() throws /* java.sql.SQLException */ -> ParameterMetaData!

}

open class PreparedStatementForward: StatementForward, PreparedStatement {

    private static var PreparedStatementJNIClass: jclass?

    /// public abstract void java.sql.PreparedStatement.setBoolean(int,boolean) throws java.sql.SQLException

    private static var setBoolean_MethodID_56: jmethodID?

    open func setBoolean( arg0: Int, arg1: Bool ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBoolean", methodSig: "(IZ)V", methodCache: &PreparedStatementForward.setBoolean_MethodID_56, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBoolean( _ _arg0: Int, _ _arg1: Bool ) throws /* java.sql.SQLException */ {
        try setBoolean( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setByte(int,byte) throws java.sql.SQLException

    private static var setByte_MethodID_57: jmethodID?

    open func setByte( arg0: Int, arg1: Int8 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setByte", methodSig: "(IB)V", methodCache: &PreparedStatementForward.setByte_MethodID_57, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setByte( _ _arg0: Int, _ _arg1: Int8 ) throws /* java.sql.SQLException */ {
        try setByte( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setShort(int,short) throws java.sql.SQLException

    private static var setShort_MethodID_58: jmethodID?

    open func setShort( arg0: Int, arg1: Int16 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setShort", methodSig: "(IS)V", methodCache: &PreparedStatementForward.setShort_MethodID_58, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setShort( _ _arg0: Int, _ _arg1: Int16 ) throws /* java.sql.SQLException */ {
        try setShort( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setInt(int,int) throws java.sql.SQLException

    private static var setInt_MethodID_59: jmethodID?

    open func setInt( arg0: Int, arg1: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setInt", methodSig: "(II)V", methodCache: &PreparedStatementForward.setInt_MethodID_59, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setInt( _ _arg0: Int, _ _arg1: Int ) throws /* java.sql.SQLException */ {
        try setInt( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setLong(int,long) throws java.sql.SQLException

    private static var setLong_MethodID_60: jmethodID?

    open func setLong( arg0: Int, arg1: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLong", methodSig: "(IJ)V", methodCache: &PreparedStatementForward.setLong_MethodID_60, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setLong( _ _arg0: Int, _ _arg1: Int64 ) throws /* java.sql.SQLException */ {
        try setLong( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setFloat(int,float) throws java.sql.SQLException

    private static var setFloat_MethodID_61: jmethodID?

    open func setFloat( arg0: Int, arg1: Float ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFloat", methodSig: "(IF)V", methodCache: &PreparedStatementForward.setFloat_MethodID_61, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setFloat( _ _arg0: Int, _ _arg1: Float ) throws /* java.sql.SQLException */ {
        try setFloat( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setDouble(int,double) throws java.sql.SQLException

    private static var setDouble_MethodID_62: jmethodID?

    open func setDouble( arg0: Int, arg1: Double ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDouble", methodSig: "(ID)V", methodCache: &PreparedStatementForward.setDouble_MethodID_62, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setDouble( _ _arg0: Int, _ _arg1: Double ) throws /* java.sql.SQLException */ {
        try setDouble( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp) throws java.sql.SQLException

    private static var setTimestamp_MethodID_63: jmethodID?

    open func setTimestamp( arg0: Int, arg1: Timestamp? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTimestamp", methodSig: "(ILjava/sql/Timestamp;)V", methodCache: &PreparedStatementForward.setTimestamp_MethodID_63, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setTimestamp( _ _arg0: Int, _ _arg1: Timestamp? ) throws /* java.sql.SQLException */ {
        try setTimestamp( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp,java.util.Calendar) throws java.sql.SQLException

    private static var setTimestamp_MethodID_64: jmethodID?

    open func setTimestamp( arg0: Int, arg1: Timestamp?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTimestamp", methodSig: "(ILjava/sql/Timestamp;Ljava/util/Calendar;)V", methodCache: &PreparedStatementForward.setTimestamp_MethodID_64, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setTimestamp( _ _arg0: Int, _ _arg1: Timestamp?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        try setTimestamp( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setURL(int,java.net.URL) throws java.sql.SQLException

    private static var setURL_MethodID_65: jmethodID?

    open func setURL( arg0: Int, arg1: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setURL", methodSig: "(ILjava/net/URL;)V", methodCache: &PreparedStatementForward.setURL_MethodID_65, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setURL( _ _arg0: Int, _ _arg1: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setURL( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setTime(int,java.sql.Time,java.util.Calendar) throws java.sql.SQLException

    private static var setTime_MethodID_66: jmethodID?

    open func setTime( arg0: Int, arg1: Time?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTime", methodSig: "(ILjava/sql/Time;Ljava/util/Calendar;)V", methodCache: &PreparedStatementForward.setTime_MethodID_66, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setTime( _ _arg0: Int, _ _arg1: Time?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        try setTime( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setTime(int,java.sql.Time) throws java.sql.SQLException

    private static var setTime_MethodID_67: jmethodID?

    open func setTime( arg0: Int, arg1: Time? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTime", methodSig: "(ILjava/sql/Time;)V", methodCache: &PreparedStatementForward.setTime_MethodID_67, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setTime( _ _arg0: Int, _ _arg1: Time? ) throws /* java.sql.SQLException */ {
        try setTime( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setDate(int,java.sql.Date) throws java.sql.SQLException

    private static var setDate_MethodID_68: jmethodID?

    open func setDate( arg0: Int, arg1: Date? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDate", methodSig: "(ILjava/sql/Date;)V", methodCache: &PreparedStatementForward.setDate_MethodID_68, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setDate( _ _arg0: Int, _ _arg1: Date? ) throws /* java.sql.SQLException */ {
        try setDate( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setDate(int,java.sql.Date,java.util.Calendar) throws java.sql.SQLException

    private static var setDate_MethodID_69: jmethodID?

    open func setDate( arg0: Int, arg1: Date?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDate", methodSig: "(ILjava/sql/Date;Ljava/util/Calendar;)V", methodCache: &PreparedStatementForward.setDate_MethodID_69, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setDate( _ _arg0: Int, _ _arg1: Date?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        try setDate( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract boolean java.sql.PreparedStatement.execute() throws java.sql.SQLException

    private static var execute_MethodID_70: jmethodID?

    open func execute() throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "execute", methodSig: "()Z", methodCache: &PreparedStatementForward.execute_MethodID_70, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract java.sql.ResultSetMetaData java.sql.PreparedStatement.getMetaData() throws java.sql.SQLException

    private static var getMetaData_MethodID_71: jmethodID?

    open func getMetaData() throws /* java.sql.SQLException */ -> ResultSetMetaData! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMetaData", methodSig: "()Ljava/sql/ResultSetMetaData;", methodCache: &PreparedStatementForward.getMetaData_MethodID_71, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ResultSetMetaDataForward( javaObject: __return ) : nil
    }


    /// public abstract void java.sql.PreparedStatement.setBytes(int,byte[]) throws java.sql.SQLException

    private static var setBytes_MethodID_72: jmethodID?

    open func setBytes( arg0: Int, arg1: [Int8]? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBytes", methodSig: "(I[B)V", methodCache: &PreparedStatementForward.setBytes_MethodID_72, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBytes( _ _arg0: Int, _ _arg1: [Int8]? ) throws /* java.sql.SQLException */ {
        try setBytes( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream) throws java.sql.SQLException

    private static var setBinaryStream_MethodID_73: jmethodID?

    open func setBinaryStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBinaryStream", methodSig: "(ILjava/io/InputStream;)V", methodCache: &PreparedStatementForward.setBinaryStream_MethodID_73, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBinaryStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setBinaryStream( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream,int) throws java.sql.SQLException

    private static var setBinaryStream_MethodID_74: jmethodID?

    open func setBinaryStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBinaryStream", methodSig: "(ILjava/io/InputStream;I)V", methodCache: &PreparedStatementForward.setBinaryStream_MethodID_74, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBinaryStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try setBinaryStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream,long) throws java.sql.SQLException

    private static var setBinaryStream_MethodID_75: jmethodID?

    open func setBinaryStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBinaryStream", methodSig: "(ILjava/io/InputStream;J)V", methodCache: &PreparedStatementForward.setBinaryStream_MethodID_75, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBinaryStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setBinaryStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setNull(int,int,java.lang.String) throws java.sql.SQLException

    private static var setNull_MethodID_76: jmethodID?

    open func setNull( arg0: Int, arg1: Int, arg2: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNull", methodSig: "(IILjava/lang/String;)V", methodCache: &PreparedStatementForward.setNull_MethodID_76, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNull( _ _arg0: Int, _ _arg1: Int, _ _arg2: String? ) throws /* java.sql.SQLException */ {
        try setNull( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setNull(int,int) throws java.sql.SQLException

    private static var setNull_MethodID_77: jmethodID?

    open func setNull( arg0: Int, arg1: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNull", methodSig: "(II)V", methodCache: &PreparedStatementForward.setNull_MethodID_77, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNull( _ _arg0: Int, _ _arg1: Int ) throws /* java.sql.SQLException */ {
        try setNull( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setBigDecimal(int,java.math.BigDecimal) throws java.sql.SQLException

    private static var setBigDecimal_MethodID_78: jmethodID?

    open func setBigDecimal( arg0: Int, arg1: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBigDecimal", methodSig: "(ILjava/math/BigDecimal;)V", methodCache: &PreparedStatementForward.setBigDecimal_MethodID_78, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBigDecimal( _ _arg0: Int, _ _arg1: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setBigDecimal( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setString(int,java.lang.String) throws java.sql.SQLException

    private static var setString_MethodID_79: jmethodID?

    open func setString( arg0: Int, arg1: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setString", methodSig: "(ILjava/lang/String;)V", methodCache: &PreparedStatementForward.setString_MethodID_79, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setString( _ _arg0: Int, _ _arg1: String? ) throws /* java.sql.SQLException */ {
        try setString( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream,int) throws java.sql.SQLException

    private static var setAsciiStream_MethodID_80: jmethodID?

    open func setAsciiStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAsciiStream", methodSig: "(ILjava/io/InputStream;I)V", methodCache: &PreparedStatementForward.setAsciiStream_MethodID_80, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setAsciiStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try setAsciiStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream,long) throws java.sql.SQLException

    private static var setAsciiStream_MethodID_81: jmethodID?

    open func setAsciiStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAsciiStream", methodSig: "(ILjava/io/InputStream;J)V", methodCache: &PreparedStatementForward.setAsciiStream_MethodID_81, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setAsciiStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setAsciiStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream) throws java.sql.SQLException

    private static var setAsciiStream_MethodID_82: jmethodID?

    open func setAsciiStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAsciiStream", methodSig: "(ILjava/io/InputStream;)V", methodCache: &PreparedStatementForward.setAsciiStream_MethodID_82, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setAsciiStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setAsciiStream( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object) throws java.sql.SQLException

    private static var setObject_MethodID_83: jmethodID?

    open func setObject( arg0: Int, arg1: java_lang.JavaObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setObject", methodSig: "(ILjava/lang/Object;)V", methodCache: &PreparedStatementForward.setObject_MethodID_83, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setObject( _ _arg0: Int, _ _arg1: java_lang.JavaObject? ) throws /* java.sql.SQLException */ {
        try setObject( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object,int) throws java.sql.SQLException

    private static var setObject_MethodID_84: jmethodID?

    open func setObject( arg0: Int, arg1: java_lang.JavaObject?, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setObject", methodSig: "(ILjava/lang/Object;I)V", methodCache: &PreparedStatementForward.setObject_MethodID_84, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setObject( _ _arg0: Int, _ _arg1: java_lang.JavaObject?, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try setObject( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object,int,int) throws java.sql.SQLException

    private static var setObject_MethodID_85: jmethodID?

    open func setObject( arg0: Int, arg1: java_lang.JavaObject?, arg2: Int, arg3: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setObject", methodSig: "(ILjava/lang/Object;II)V", methodCache: &PreparedStatementForward.setObject_MethodID_85, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setObject( _ _arg0: Int, _ _arg1: java_lang.JavaObject?, _ _arg2: Int, _ _arg3: Int ) throws /* java.sql.SQLException */ {
        try setObject( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader,int) throws java.sql.SQLException

    private static var setCharacterStream_MethodID_86: jmethodID?

    open func setCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCharacterStream", methodSig: "(ILjava/io/Reader;I)V", methodCache: &PreparedStatementForward.setCharacterStream_MethodID_86, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try setCharacterStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader,long) throws java.sql.SQLException

    private static var setCharacterStream_MethodID_87: jmethodID?

    open func setCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCharacterStream", methodSig: "(ILjava/io/Reader;J)V", methodCache: &PreparedStatementForward.setCharacterStream_MethodID_87, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setCharacterStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader) throws java.sql.SQLException

    private static var setCharacterStream_MethodID_88: jmethodID?

    open func setCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCharacterStream", methodSig: "(ILjava/io/Reader;)V", methodCache: &PreparedStatementForward.setCharacterStream_MethodID_88, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setCharacterStream( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setRowId(int,java.sql.RowId) throws java.sql.SQLException

    private static var setRowId_MethodID_89: jmethodID?

    open func setRowId( arg0: Int, arg1: RowId? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRowId", methodSig: "(ILjava/sql/RowId;)V", methodCache: &PreparedStatementForward.setRowId_MethodID_89, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setRowId( _ _arg0: Int, _ _arg1: RowId? ) throws /* java.sql.SQLException */ {
        try setRowId( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setNString(int,java.lang.String) throws java.sql.SQLException

    private static var setNString_MethodID_90: jmethodID?

    open func setNString( arg0: Int, arg1: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNString", methodSig: "(ILjava/lang/String;)V", methodCache: &PreparedStatementForward.setNString_MethodID_90, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNString( _ _arg0: Int, _ _arg1: String? ) throws /* java.sql.SQLException */ {
        try setNString( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setNCharacterStream(int,java.io.Reader,long) throws java.sql.SQLException

    private static var setNCharacterStream_MethodID_91: jmethodID?

    open func setNCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNCharacterStream", methodSig: "(ILjava/io/Reader;J)V", methodCache: &PreparedStatementForward.setNCharacterStream_MethodID_91, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setNCharacterStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setNCharacterStream(int,java.io.Reader) throws java.sql.SQLException

    private static var setNCharacterStream_MethodID_92: jmethodID?

    open func setNCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNCharacterStream", methodSig: "(ILjava/io/Reader;)V", methodCache: &PreparedStatementForward.setNCharacterStream_MethodID_92, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setNCharacterStream( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setNClob(int,java.sql.NClob) throws java.sql.SQLException

    private static var setNClob_MethodID_93: jmethodID?

    open func setNClob( arg0: Int, arg1: NClob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNClob", methodSig: "(ILjava/sql/NClob;)V", methodCache: &PreparedStatementForward.setNClob_MethodID_93, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNClob( _ _arg0: Int, _ _arg1: NClob? ) throws /* java.sql.SQLException */ {
        try setNClob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setNClob(int,java.io.Reader,long) throws java.sql.SQLException

    private static var setNClob_MethodID_94: jmethodID?

    open func setNClob( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNClob", methodSig: "(ILjava/io/Reader;J)V", methodCache: &PreparedStatementForward.setNClob_MethodID_94, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNClob( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setNClob( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setNClob(int,java.io.Reader) throws java.sql.SQLException

    private static var setNClob_MethodID_95: jmethodID?

    open func setNClob( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNClob", methodSig: "(ILjava/io/Reader;)V", methodCache: &PreparedStatementForward.setNClob_MethodID_95, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNClob( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setNClob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setClob(int,java.sql.Clob) throws java.sql.SQLException

    private static var setClob_MethodID_96: jmethodID?

    open func setClob( arg0: Int, arg1: Clob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setClob", methodSig: "(ILjava/sql/Clob;)V", methodCache: &PreparedStatementForward.setClob_MethodID_96, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setClob( _ _arg0: Int, _ _arg1: Clob? ) throws /* java.sql.SQLException */ {
        try setClob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setClob(int,java.io.Reader,long) throws java.sql.SQLException

    private static var setClob_MethodID_97: jmethodID?

    open func setClob( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setClob", methodSig: "(ILjava/io/Reader;J)V", methodCache: &PreparedStatementForward.setClob_MethodID_97, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setClob( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setClob( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setClob(int,java.io.Reader) throws java.sql.SQLException

    private static var setClob_MethodID_98: jmethodID?

    open func setClob( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setClob", methodSig: "(ILjava/io/Reader;)V", methodCache: &PreparedStatementForward.setClob_MethodID_98, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setClob( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setClob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setBlob(int,java.sql.Blob) throws java.sql.SQLException

    private static var setBlob_MethodID_99: jmethodID?

    open func setBlob( arg0: Int, arg1: Blob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBlob", methodSig: "(ILjava/sql/Blob;)V", methodCache: &PreparedStatementForward.setBlob_MethodID_99, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBlob( _ _arg0: Int, _ _arg1: Blob? ) throws /* java.sql.SQLException */ {
        try setBlob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setBlob(int,java.io.InputStream,long) throws java.sql.SQLException

    private static var setBlob_MethodID_100: jmethodID?

    open func setBlob( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBlob", methodSig: "(ILjava/io/InputStream;J)V", methodCache: &PreparedStatementForward.setBlob_MethodID_100, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBlob( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setBlob( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setBlob(int,java.io.InputStream) throws java.sql.SQLException

    private static var setBlob_MethodID_101: jmethodID?

    open func setBlob( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBlob", methodSig: "(ILjava/io/InputStream;)V", methodCache: &PreparedStatementForward.setBlob_MethodID_101, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBlob( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setBlob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setSQLXML(int,java.sql.SQLXML) throws java.sql.SQLException

    private static var setSQLXML_MethodID_102: jmethodID?

    open func setSQLXML( arg0: Int, arg1: SQLXML? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSQLXML", methodSig: "(ILjava/sql/SQLXML;)V", methodCache: &PreparedStatementForward.setSQLXML_MethodID_102, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setSQLXML( _ _arg0: Int, _ _arg1: SQLXML? ) throws /* java.sql.SQLException */ {
        try setSQLXML( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.sql.ResultSet java.sql.PreparedStatement.executeQuery() throws java.sql.SQLException

    private static var executeQuery_MethodID_103: jmethodID?

    open func executeQuery() throws /* java.sql.SQLException */ -> ResultSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "executeQuery", methodSig: "()Ljava/sql/ResultSet;", methodCache: &PreparedStatementForward.executeQuery_MethodID_103, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ResultSetForward( javaObject: __return ) : nil
    }


    /// public abstract int java.sql.PreparedStatement.executeUpdate() throws java.sql.SQLException

    private static var executeUpdate_MethodID_104: jmethodID?

    open func executeUpdate() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "executeUpdate", methodSig: "()I", methodCache: &PreparedStatementForward.executeUpdate_MethodID_104, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.sql.PreparedStatement.setUnicodeStream(int,java.io.InputStream,int) throws java.sql.SQLException

    private static var setUnicodeStream_MethodID_105: jmethodID?

    open func setUnicodeStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setUnicodeStream", methodSig: "(ILjava/io/InputStream;I)V", methodCache: &PreparedStatementForward.setUnicodeStream_MethodID_105, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setUnicodeStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try setUnicodeStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.clearParameters() throws java.sql.SQLException

    private static var clearParameters_MethodID_106: jmethodID?

    open func clearParameters() throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clearParameters", methodSig: "()V", methodCache: &PreparedStatementForward.clearParameters_MethodID_106, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }


    /// public abstract void java.sql.PreparedStatement.addBatch() throws java.sql.SQLException

    private static var addBatch_MethodID_107: jmethodID?

    open func addBatch() throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addBatch", methodSig: "()V", methodCache: &PreparedStatementForward.addBatch_MethodID_107, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }


    /// public abstract void java.sql.PreparedStatement.setRef(int,java.sql.Ref) throws java.sql.SQLException

    private static var setRef_MethodID_108: jmethodID?

    open func setRef( arg0: Int, arg1: Ref? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRef", methodSig: "(ILjava/sql/Ref;)V", methodCache: &PreparedStatementForward.setRef_MethodID_108, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setRef( _ _arg0: Int, _ _arg1: Ref? ) throws /* java.sql.SQLException */ {
        try setRef( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setArray(int,java.sql.Array) throws java.sql.SQLException

    private static var setArray_MethodID_109: jmethodID?

    open func setArray( arg0: Int, arg1: Array? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setArray", methodSig: "(ILjava/sql/Array;)V", methodCache: &PreparedStatementForward.setArray_MethodID_109, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setArray( _ _arg0: Int, _ _arg1: Array? ) throws /* java.sql.SQLException */ {
        try setArray( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.sql.ParameterMetaData java.sql.PreparedStatement.getParameterMetaData() throws java.sql.SQLException

    private static var getParameterMetaData_MethodID_110: jmethodID?

    open func getParameterMetaData() throws /* java.sql.SQLException */ -> ParameterMetaData! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getParameterMetaData", methodSig: "()Ljava/sql/ParameterMetaData;", methodCache: &PreparedStatementForward.getParameterMetaData_MethodID_110, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ParameterMetaDataForward( javaObject: __return ) : nil
    }


    /// public abstract void java.sql.Statement.close() throws java.sql.SQLException

    private static var close_MethodID_111: jmethodID?

    override open func close() throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "close", methodSig: "()V", methodCache: &PreparedStatementForward.close_MethodID_111, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }


    /// public abstract boolean java.sql.Statement.isClosed() throws java.sql.SQLException

    private static var isClosed_MethodID_112: jmethodID?

    override open func isClosed() throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isClosed", methodSig: "()Z", methodCache: &PreparedStatementForward.isClosed_MethodID_112, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract boolean java.sql.Statement.execute(java.lang.String) throws java.sql.SQLException

    private static var execute_MethodID_113: jmethodID?

    override open func execute( arg0: String? ) throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "execute", methodSig: "(Ljava/lang/String;)Z", methodCache: &PreparedStatementForward.execute_MethodID_113, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func execute( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Bool {
        return try execute( arg0: _arg0 )
    }

    /// public abstract boolean java.sql.Statement.execute(java.lang.String,java.lang.String[]) throws java.sql.SQLException

    private static var execute_MethodID_114: jmethodID?

    override open func execute( arg0: String?, arg1: [String]? ) throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "execute", methodSig: "(Ljava/lang/String;[Ljava/lang/String;)Z", methodCache: &PreparedStatementForward.execute_MethodID_114, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func execute( _ _arg0: String?, _ _arg1: [String]? ) throws /* java.sql.SQLException */ -> Bool {
        return try execute( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract boolean java.sql.Statement.execute(java.lang.String,int[]) throws java.sql.SQLException

    private static var execute_MethodID_115: jmethodID?

    override open func execute( arg0: String?, arg1: [Int32]? ) throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "execute", methodSig: "(Ljava/lang/String;[I)Z", methodCache: &PreparedStatementForward.execute_MethodID_115, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func execute( _ _arg0: String?, _ _arg1: [Int32]? ) throws /* java.sql.SQLException */ -> Bool {
        return try execute( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract boolean java.sql.Statement.execute(java.lang.String,int) throws java.sql.SQLException

    private static var execute_MethodID_116: jmethodID?

    override open func execute( arg0: String?, arg1: Int ) throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "execute", methodSig: "(Ljava/lang/String;I)Z", methodCache: &PreparedStatementForward.execute_MethodID_116, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func execute( _ _arg0: String?, _ _arg1: Int ) throws /* java.sql.SQLException */ -> Bool {
        return try execute( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.sql.ResultSet java.sql.Statement.getResultSet() throws java.sql.SQLException

    private static var getResultSet_MethodID_117: jmethodID?

    override open func getResultSet() throws /* java.sql.SQLException */ -> ResultSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getResultSet", methodSig: "()Ljava/sql/ResultSet;", methodCache: &PreparedStatementForward.getResultSet_MethodID_117, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ResultSetForward( javaObject: __return ) : nil
    }


    /// public abstract java.sql.SQLWarning java.sql.Statement.getWarnings() throws java.sql.SQLException

    private static var getWarnings_MethodID_118: jmethodID?

    override open func getWarnings() throws /* java.sql.SQLException */ -> SQLWarning! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getWarnings", methodSig: "()Ljava/sql/SQLWarning;", methodCache: &PreparedStatementForward.getWarnings_MethodID_118, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? SQLWarning( javaObject: __return ) : nil
    }


    /// public abstract void java.sql.Statement.clearWarnings() throws java.sql.SQLException

    private static var clearWarnings_MethodID_119: jmethodID?

    override open func clearWarnings() throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clearWarnings", methodSig: "()V", methodCache: &PreparedStatementForward.clearWarnings_MethodID_119, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }


    /// public abstract void java.sql.Statement.setFetchDirection(int) throws java.sql.SQLException

    private static var setFetchDirection_MethodID_120: jmethodID?

    override open func setFetchDirection( arg0: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFetchDirection", methodSig: "(I)V", methodCache: &PreparedStatementForward.setFetchDirection_MethodID_120, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setFetchDirection( _ _arg0: Int ) throws /* java.sql.SQLException */ {
        try setFetchDirection( arg0: _arg0 )
    }

    /// public abstract int java.sql.Statement.getFetchDirection() throws java.sql.SQLException

    private static var getFetchDirection_MethodID_121: jmethodID?

    override open func getFetchDirection() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getFetchDirection", methodSig: "()I", methodCache: &PreparedStatementForward.getFetchDirection_MethodID_121, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.sql.Statement.setFetchSize(int) throws java.sql.SQLException

    private static var setFetchSize_MethodID_122: jmethodID?

    override open func setFetchSize( arg0: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFetchSize", methodSig: "(I)V", methodCache: &PreparedStatementForward.setFetchSize_MethodID_122, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setFetchSize( _ _arg0: Int ) throws /* java.sql.SQLException */ {
        try setFetchSize( arg0: _arg0 )
    }

    /// public abstract int java.sql.Statement.getFetchSize() throws java.sql.SQLException

    private static var getFetchSize_MethodID_123: jmethodID?

    override open func getFetchSize() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getFetchSize", methodSig: "()I", methodCache: &PreparedStatementForward.getFetchSize_MethodID_123, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract java.sql.ResultSet java.sql.Statement.executeQuery(java.lang.String) throws java.sql.SQLException

    private static var executeQuery_MethodID_124: jmethodID?

    override open func executeQuery( arg0: String? ) throws /* java.sql.SQLException */ -> ResultSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "executeQuery", methodSig: "(Ljava/lang/String;)Ljava/sql/ResultSet;", methodCache: &PreparedStatementForward.executeQuery_MethodID_124, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ResultSetForward( javaObject: __return ) : nil
    }

    override open func executeQuery( _ _arg0: String? ) throws /* java.sql.SQLException */ -> ResultSet! {
        return try executeQuery( arg0: _arg0 )
    }

    /// public abstract int java.sql.Statement.executeUpdate(java.lang.String,java.lang.String[]) throws java.sql.SQLException

    private static var executeUpdate_MethodID_125: jmethodID?

    override open func executeUpdate( arg0: String?, arg1: [String]? ) throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "executeUpdate", methodSig: "(Ljava/lang/String;[Ljava/lang/String;)I", methodCache: &PreparedStatementForward.executeUpdate_MethodID_125, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }

    override open func executeUpdate( _ _arg0: String?, _ _arg1: [String]? ) throws /* java.sql.SQLException */ -> Int {
        return try executeUpdate( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract int java.sql.Statement.executeUpdate(java.lang.String,int[]) throws java.sql.SQLException

    private static var executeUpdate_MethodID_126: jmethodID?

    override open func executeUpdate( arg0: String?, arg1: [Int32]? ) throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "executeUpdate", methodSig: "(Ljava/lang/String;[I)I", methodCache: &PreparedStatementForward.executeUpdate_MethodID_126, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }

    override open func executeUpdate( _ _arg0: String?, _ _arg1: [Int32]? ) throws /* java.sql.SQLException */ -> Int {
        return try executeUpdate( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract int java.sql.Statement.executeUpdate(java.lang.String,int) throws java.sql.SQLException

    private static var executeUpdate_MethodID_127: jmethodID?

    override open func executeUpdate( arg0: String?, arg1: Int ) throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "executeUpdate", methodSig: "(Ljava/lang/String;I)I", methodCache: &PreparedStatementForward.executeUpdate_MethodID_127, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }

    override open func executeUpdate( _ _arg0: String?, _ _arg1: Int ) throws /* java.sql.SQLException */ -> Int {
        return try executeUpdate( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract int java.sql.Statement.executeUpdate(java.lang.String) throws java.sql.SQLException

    private static var executeUpdate_MethodID_128: jmethodID?

    override open func executeUpdate( arg0: String? ) throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "executeUpdate", methodSig: "(Ljava/lang/String;)I", methodCache: &PreparedStatementForward.executeUpdate_MethodID_128, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }

    override open func executeUpdate( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Int {
        return try executeUpdate( arg0: _arg0 )
    }

    /// public abstract void java.sql.Statement.addBatch(java.lang.String) throws java.sql.SQLException

    private static var addBatch_MethodID_129: jmethodID?

    override open func addBatch( arg0: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addBatch", methodSig: "(Ljava/lang/String;)V", methodCache: &PreparedStatementForward.addBatch_MethodID_129, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func addBatch( _ _arg0: String? ) throws /* java.sql.SQLException */ {
        try addBatch( arg0: _arg0 )
    }

    /// public abstract int java.sql.Statement.getMaxFieldSize() throws java.sql.SQLException

    private static var getMaxFieldSize_MethodID_130: jmethodID?

    override open func getMaxFieldSize() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMaxFieldSize", methodSig: "()I", methodCache: &PreparedStatementForward.getMaxFieldSize_MethodID_130, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.sql.Statement.setMaxFieldSize(int) throws java.sql.SQLException

    private static var setMaxFieldSize_MethodID_131: jmethodID?

    override open func setMaxFieldSize( arg0: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMaxFieldSize", methodSig: "(I)V", methodCache: &PreparedStatementForward.setMaxFieldSize_MethodID_131, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setMaxFieldSize( _ _arg0: Int ) throws /* java.sql.SQLException */ {
        try setMaxFieldSize( arg0: _arg0 )
    }

    /// public abstract int java.sql.Statement.getMaxRows() throws java.sql.SQLException

    private static var getMaxRows_MethodID_132: jmethodID?

    override open func getMaxRows() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMaxRows", methodSig: "()I", methodCache: &PreparedStatementForward.getMaxRows_MethodID_132, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.sql.Statement.setMaxRows(int) throws java.sql.SQLException

    private static var setMaxRows_MethodID_133: jmethodID?

    override open func setMaxRows( arg0: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMaxRows", methodSig: "(I)V", methodCache: &PreparedStatementForward.setMaxRows_MethodID_133, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setMaxRows( _ _arg0: Int ) throws /* java.sql.SQLException */ {
        try setMaxRows( arg0: _arg0 )
    }

    /// public abstract void java.sql.Statement.setEscapeProcessing(boolean) throws java.sql.SQLException

    private static var setEscapeProcessing_MethodID_134: jmethodID?

    override open func setEscapeProcessing( arg0: Bool ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEscapeProcessing", methodSig: "(Z)V", methodCache: &PreparedStatementForward.setEscapeProcessing_MethodID_134, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setEscapeProcessing( _ _arg0: Bool ) throws /* java.sql.SQLException */ {
        try setEscapeProcessing( arg0: _arg0 )
    }

    /// public abstract int java.sql.Statement.getQueryTimeout() throws java.sql.SQLException

    private static var getQueryTimeout_MethodID_135: jmethodID?

    override open func getQueryTimeout() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getQueryTimeout", methodSig: "()I", methodCache: &PreparedStatementForward.getQueryTimeout_MethodID_135, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.sql.Statement.setQueryTimeout(int) throws java.sql.SQLException

    private static var setQueryTimeout_MethodID_136: jmethodID?

    override open func setQueryTimeout( arg0: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setQueryTimeout", methodSig: "(I)V", methodCache: &PreparedStatementForward.setQueryTimeout_MethodID_136, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setQueryTimeout( _ _arg0: Int ) throws /* java.sql.SQLException */ {
        try setQueryTimeout( arg0: _arg0 )
    }

    /// public abstract void java.sql.Statement.cancel() throws java.sql.SQLException

    private static var cancel_MethodID_137: jmethodID?

    override open func cancel() throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "cancel", methodSig: "()V", methodCache: &PreparedStatementForward.cancel_MethodID_137, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }


    /// public abstract void java.sql.Statement.setCursorName(java.lang.String) throws java.sql.SQLException

    private static var setCursorName_MethodID_138: jmethodID?

    override open func setCursorName( arg0: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCursorName", methodSig: "(Ljava/lang/String;)V", methodCache: &PreparedStatementForward.setCursorName_MethodID_138, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setCursorName( _ _arg0: String? ) throws /* java.sql.SQLException */ {
        try setCursorName( arg0: _arg0 )
    }

    /// public abstract int java.sql.Statement.getUpdateCount() throws java.sql.SQLException

    private static var getUpdateCount_MethodID_139: jmethodID?

    override open func getUpdateCount() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getUpdateCount", methodSig: "()I", methodCache: &PreparedStatementForward.getUpdateCount_MethodID_139, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract boolean java.sql.Statement.getMoreResults(int) throws java.sql.SQLException

    private static var getMoreResults_MethodID_140: jmethodID?

    override open func getMoreResults( arg0: Int ) throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getMoreResults", methodSig: "(I)Z", methodCache: &PreparedStatementForward.getMoreResults_MethodID_140, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func getMoreResults( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Bool {
        return try getMoreResults( arg0: _arg0 )
    }

    /// public abstract boolean java.sql.Statement.getMoreResults() throws java.sql.SQLException

    private static var getMoreResults_MethodID_141: jmethodID?

    override open func getMoreResults() throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getMoreResults", methodSig: "()Z", methodCache: &PreparedStatementForward.getMoreResults_MethodID_141, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract int java.sql.Statement.getResultSetConcurrency() throws java.sql.SQLException

    private static var getResultSetConcurrency_MethodID_142: jmethodID?

    override open func getResultSetConcurrency() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getResultSetConcurrency", methodSig: "()I", methodCache: &PreparedStatementForward.getResultSetConcurrency_MethodID_142, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract int java.sql.Statement.getResultSetType() throws java.sql.SQLException

    private static var getResultSetType_MethodID_143: jmethodID?

    override open func getResultSetType() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getResultSetType", methodSig: "()I", methodCache: &PreparedStatementForward.getResultSetType_MethodID_143, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.sql.Statement.clearBatch() throws java.sql.SQLException

    private static var clearBatch_MethodID_144: jmethodID?

    override open func clearBatch() throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clearBatch", methodSig: "()V", methodCache: &PreparedStatementForward.clearBatch_MethodID_144, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }


    /// public abstract int[] java.sql.Statement.executeBatch() throws java.sql.SQLException

    private static var executeBatch_MethodID_145: jmethodID?

    override open func executeBatch() throws /* java.sql.SQLException */ -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "executeBatch", methodSig: "()[I", methodCache: &PreparedStatementForward.executeBatch_MethodID_145, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: [Int32](), from: __return )
    }


    /// public abstract java.sql.Connection java.sql.Statement.getConnection() throws java.sql.SQLException

    private static var getConnection_MethodID_146: jmethodID?

    override open func getConnection() throws /* java.sql.SQLException */ -> Connection! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getConnection", methodSig: "()Ljava/sql/Connection;", methodCache: &PreparedStatementForward.getConnection_MethodID_146, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ConnectionForward( javaObject: __return ) : nil
    }


    /// public abstract java.sql.ResultSet java.sql.Statement.getGeneratedKeys() throws java.sql.SQLException

    private static var getGeneratedKeys_MethodID_147: jmethodID?

    override open func getGeneratedKeys() throws /* java.sql.SQLException */ -> ResultSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGeneratedKeys", methodSig: "()Ljava/sql/ResultSet;", methodCache: &PreparedStatementForward.getGeneratedKeys_MethodID_147, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ResultSetForward( javaObject: __return ) : nil
    }


    /// public abstract int java.sql.Statement.getResultSetHoldability() throws java.sql.SQLException

    private static var getResultSetHoldability_MethodID_148: jmethodID?

    override open func getResultSetHoldability() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getResultSetHoldability", methodSig: "()I", methodCache: &PreparedStatementForward.getResultSetHoldability_MethodID_148, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.sql.Statement.setPoolable(boolean) throws java.sql.SQLException

    private static var setPoolable_MethodID_149: jmethodID?

    override open func setPoolable( arg0: Bool ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPoolable", methodSig: "(Z)V", methodCache: &PreparedStatementForward.setPoolable_MethodID_149, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setPoolable( _ _arg0: Bool ) throws /* java.sql.SQLException */ {
        try setPoolable( arg0: _arg0 )
    }

    /// public abstract boolean java.sql.Statement.isPoolable() throws java.sql.SQLException

    private static var isPoolable_MethodID_150: jmethodID?

    override open func isPoolable() throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isPoolable", methodSig: "()Z", methodCache: &PreparedStatementForward.isPoolable_MethodID_150, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract java.lang.Object java.sql.Wrapper.unwrap(java.lang.Class) throws java.sql.SQLException

    private static var unwrap_MethodID_151: jmethodID?

    override open func unwrap( arg0: java_lang.Class? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "unwrap", methodSig: "(Ljava/lang/Class;)Ljava/lang/Object;", methodCache: &PreparedStatementForward.unwrap_MethodID_151, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    override open func unwrap( _ _arg0: java_lang.Class? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        return try unwrap( arg0: _arg0 )
    }

    /// public abstract boolean java.sql.Wrapper.isWrapperFor(java.lang.Class) throws java.sql.SQLException

    private static var isWrapperFor_MethodID_152: jmethodID?

    override open func isWrapperFor( arg0: java_lang.Class? ) throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isWrapperFor", methodSig: "(Ljava/lang/Class;)Z", methodCache: &PreparedStatementForward.isWrapperFor_MethodID_152, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func isWrapperFor( _ _arg0: java_lang.Class? ) throws /* java.sql.SQLException */ -> Bool {
        return try isWrapperFor( arg0: _arg0 )
    }

}


