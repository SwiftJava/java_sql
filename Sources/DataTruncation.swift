
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:32 GMT 2016 ///

/// class java.sql.DataTruncation ///

open class DataTruncation: SQLWarning {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.sql.DataTruncation", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DataTruncationJNIClass: jclass?

    /// private int java.sql.DataTruncation.index

    /// private boolean java.sql.DataTruncation.parameter

    /// private boolean java.sql.DataTruncation.read

    /// private int java.sql.DataTruncation.dataSize

    /// private int java.sql.DataTruncation.transferSize

    /// private static final long java.sql.DataTruncation.serialVersionUID

    /// private static final long java.sql.SQLWarning.serialVersionUID

    /// private java.lang.String java.sql.SQLException.SQLState

    /// private int java.sql.SQLException.vendorCode

    /// private volatile java.sql.SQLException java.sql.SQLException.next

    /// private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater java.sql.SQLException.nextUpdater

    /// private static final long java.sql.SQLException.serialVersionUID

    /// static final long java.lang.Exception.serialVersionUID

    /// private static final long java.lang.Throwable.serialVersionUID

    /// private java.lang.String java.lang.Throwable.detailMessage

    /// private java.lang.Throwable java.lang.Throwable.cause

    /// private java.lang.StackTraceElement[] java.lang.Throwable.stackTrace

    /// public java.sql.DataTruncation(int,boolean,boolean,int,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int, arg1: Bool, arg2: Bool, arg3: Int, arg4: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/sql/DataTruncation", classCache: &DataTruncation.DataTruncationJNIClass, methodSig: "(IZZII)V", methodCache: &DataTruncation.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Bool, _ _arg2: Bool, _ _arg3: Int, _ _arg4: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public java.sql.DataTruncation(int,boolean,boolean,int,int,java.lang.Throwable)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Int, arg1: Bool, arg2: Bool, arg3: Int, arg4: Int, arg5: java_lang.Throwable? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/sql/DataTruncation", classCache: &DataTruncation.DataTruncationJNIClass, methodSig: "(IZZIILjava/lang/Throwable;)V", methodCache: &DataTruncation.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Bool, _ _arg2: Bool, _ _arg3: Int, _ _arg4: Int, _ _arg5: java_lang.Throwable? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public int java.sql.DataTruncation.getIndex()

    private static var getIndex_MethodID_3: jmethodID?

    open func getIndex() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getIndex", methodSig: "()I", methodCache: &DataTruncation.getIndex_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public boolean java.sql.DataTruncation.getParameter()

    private static var getParameter_MethodID_4: jmethodID?

    open func getParameter() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getParameter", methodSig: "()Z", methodCache: &DataTruncation.getParameter_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public boolean java.sql.DataTruncation.getRead()

    private static var getRead_MethodID_5: jmethodID?

    open func getRead() -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getRead", methodSig: "()Z", methodCache: &DataTruncation.getRead_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public int java.sql.DataTruncation.getDataSize()

    private static var getDataSize_MethodID_6: jmethodID?

    open func getDataSize() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getDataSize", methodSig: "()I", methodCache: &DataTruncation.getDataSize_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public int java.sql.DataTruncation.getTransferSize()

    private static var getTransferSize_MethodID_7: jmethodID?

    open func getTransferSize() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getTransferSize", methodSig: "()I", methodCache: &DataTruncation.getTransferSize_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


}
