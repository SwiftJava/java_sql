
import java_swift
import java_util
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:34 GMT 2016 ///

/// class java.sql.Timestamp ///

open class Timestamp: java_util.Date {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.sql.Timestamp", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var TimestampJNIClass: jclass?

    /// private int java.sql.Timestamp.nanos

    /// static final long java.sql.Timestamp.serialVersionUID

    /// private static final sun.util.calendar.BaseCalendar java.util.Date.gcal

    /// private static sun.util.calendar.BaseCalendar java.util.Date.jcal

    /// private transient long java.util.Date.fastTime

    /// private transient sun.util.calendar.BaseCalendar$Date java.util.Date.cdate

    /// private static int java.util.Date.defaultCenturyStart

    /// private static final long java.util.Date.serialVersionUID

    /// private static final java.lang.String[] java.util.Date.wtb

    /// private static final int[] java.util.Date.ttb

    /// public java.sql.Timestamp(long)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/sql/Timestamp", classCache: &Timestamp.TimestampJNIClass, methodSig: "(J)V", methodCache: &Timestamp.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int64 ) {
        self.init( arg0: _arg0 )
    }

    /// public java.sql.Timestamp(int,int,int,int,int,int,int)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Int, arg1: Int, arg2: Int, arg3: Int, arg4: Int, arg5: Int, arg6: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        __args[5] = JNIType.encode( value: arg5, locals: &__locals )
        __args[6] = JNIType.encode( value: arg6, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/sql/Timestamp", classCache: &Timestamp.TimestampJNIClass, methodSig: "(IIIIIII)V", methodCache: &Timestamp.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int, _ _arg3: Int, _ _arg4: Int, _ _arg5: Int, _ _arg6: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5, arg6: _arg6 )
    }

    /// public boolean java.sql.Timestamp.equals(java.lang.Object)

    /// public boolean java.sql.Timestamp.equals(java.sql.Timestamp)

    private static var equals_MethodID_3: jmethodID?

    open func equals( arg0: Timestamp? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/sql/Timestamp;)Z", methodCache: &Timestamp.equals_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func equals( _ _arg0: Timestamp? ) -> Bool {
        return equals( arg0: _arg0 )
    }

    /// public java.lang.String java.sql.Timestamp.toString()

    /// public int java.sql.Timestamp.compareTo(java.lang.Object)

    /// public int java.sql.Timestamp.compareTo(java.sql.Timestamp)

    private static var compareTo_MethodID_4: jmethodID?

    open func compareTo( arg0: Timestamp? ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "compareTo", methodSig: "(Ljava/sql/Timestamp;)I", methodCache: &Timestamp.compareTo_MethodID_4, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }

    open func compareTo( _ _arg0: Timestamp? ) -> Int {
        return compareTo( arg0: _arg0 )
    }

    /// public int java.sql.Timestamp.compareTo(java.util.Date)

    /// public static java.sql.Timestamp java.sql.Timestamp.valueOf(java.lang.String)

    private static var valueOf_MethodID_5: jmethodID?

    open class func valueOf( arg0: String? ) -> Timestamp! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/Timestamp", classCache: &TimestampJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/sql/Timestamp;", methodCache: &valueOf_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Timestamp( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: String? ) -> Timestamp! {
        return valueOf( arg0: _arg0 )
    }

    /// public boolean java.sql.Timestamp.after(java.sql.Timestamp)

    private static var after_MethodID_6: jmethodID?

    open func after( arg0: Timestamp? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "after", methodSig: "(Ljava/sql/Timestamp;)Z", methodCache: &Timestamp.after_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func after( _ _arg0: Timestamp? ) -> Bool {
        return after( arg0: _arg0 )
    }

    /// public boolean java.sql.Timestamp.before(java.sql.Timestamp)

    private static var before_MethodID_7: jmethodID?

    open func before( arg0: Timestamp? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "before", methodSig: "(Ljava/sql/Timestamp;)Z", methodCache: &Timestamp.before_MethodID_7, args: &__args, locals: &__locals )
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func before( _ _arg0: Timestamp? ) -> Bool {
        return before( arg0: _arg0 )
    }

    /// public void java.sql.Timestamp.setTime(long)

    /// public long java.sql.Timestamp.getTime()

    /// public int java.sql.Timestamp.getNanos()

    private static var getNanos_MethodID_8: jmethodID?

    open func getNanos() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getNanos", methodSig: "()I", methodCache: &Timestamp.getNanos_MethodID_8, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public void java.sql.Timestamp.setNanos(int)

    private static var setNanos_MethodID_9: jmethodID?

    open func setNanos( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNanos", methodSig: "(I)V", methodCache: &Timestamp.setNanos_MethodID_9, args: &__args, locals: &__locals )
    }

    open func setNanos( _ _arg0: Int ) {
        setNanos( arg0: _arg0 )
    }

}
