
import java_swift
import java_lang
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:32 GMT 2016 ///

/// class java.sql.DriverManager ///

open class DriverManager: java_lang.JavaObject {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.sql.DriverManager", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DriverManagerJNIClass: jclass?

    /// static final java.sql.SQLPermission java.sql.DriverManager.SET_LOG_PERMISSION

    /// private static java.util.Vector java.sql.DriverManager.writeDrivers

    /// private static java.util.Vector java.sql.DriverManager.readDrivers

    /// private static int java.sql.DriverManager.loginTimeout

    /// private static java.io.PrintWriter java.sql.DriverManager.logWriter

    /// private static java.io.PrintStream java.sql.DriverManager.logStream

    /// private static boolean java.sql.DriverManager.initialized

    /// private static java.lang.Object java.sql.DriverManager.logSync

    /// private java.sql.DriverManager()

    /// public static void java.sql.DriverManager.println(java.lang.String)

    private static var println_MethodID_1: jmethodID?

    open class func println( arg0: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "println", methodSig: "(Ljava/lang/String;)V", methodCache: &println_MethodID_1, args: &__args, locals: &__locals )
    }

    open class func println( _ _arg0: String? ) {
        println( arg0: _arg0 )
    }

    /// private static java.lang.Class java.sql.DriverManager.getCallerClass(java.lang.ClassLoader,java.lang.String)

    /// private static native java.lang.ClassLoader java.sql.DriverManager.getCallerClassLoader()

    /// static void java.sql.DriverManager.initialize()

    /// public static java.io.PrintWriter java.sql.DriverManager.getLogWriter()

    private static var getLogWriter_MethodID_2: jmethodID?

    open class func getLogWriter() -> /* java.io.PrintWriter */ UnclassedObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getLogWriter", methodSig: "()Ljava/io/PrintWriter;", methodCache: &getLogWriter_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.io.PrintWriter */ UnclassedObject( javaObject: __return ) : nil
    }


    /// private static java.sql.Connection java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties,java.lang.ClassLoader) throws java.sql.SQLException

    /// public static java.sql.Connection java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties) throws java.sql.SQLException

    private static var getConnection_MethodID_3: jmethodID?

    open class func getConnection( arg0: String?, arg1: java_util.Properties? ) throws /* java.sql.SQLException */ -> Connection! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getConnection", methodSig: "(Ljava/lang/String;Ljava/util/Properties;)Ljava/sql/Connection;", methodCache: &getConnection_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ConnectionForward( javaObject: __return ) : nil
    }

    open class func getConnection( _ _arg0: String?, _ _arg1: java_util.Properties? ) throws /* java.sql.SQLException */ -> Connection! {
        return try getConnection( arg0: _arg0, arg1: _arg1 )
    }

    /// public static java.sql.Connection java.sql.DriverManager.getConnection(java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException

    private static var getConnection_MethodID_4: jmethodID?

    open class func getConnection( arg0: String?, arg1: String?, arg2: String? ) throws /* java.sql.SQLException */ -> Connection! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getConnection", methodSig: "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/Connection;", methodCache: &getConnection_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ConnectionForward( javaObject: __return ) : nil
    }

    open class func getConnection( _ _arg0: String?, _ _arg1: String?, _ _arg2: String? ) throws /* java.sql.SQLException */ -> Connection! {
        return try getConnection( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public static java.sql.Connection java.sql.DriverManager.getConnection(java.lang.String) throws java.sql.SQLException

    private static var getConnection_MethodID_5: jmethodID?

    open class func getConnection( arg0: String? ) throws /* java.sql.SQLException */ -> Connection! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getConnection", methodSig: "(Ljava/lang/String;)Ljava/sql/Connection;", methodCache: &getConnection_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ConnectionForward( javaObject: __return ) : nil
    }

    open class func getConnection( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Connection! {
        return try getConnection( arg0: _arg0 )
    }

    /// public static void java.sql.DriverManager.setLogWriter(java.io.PrintWriter)

    private static var setLogWriter_MethodID_6: jmethodID?

    open class func setLogWriter( arg0: /* java.io.PrintWriter */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "setLogWriter", methodSig: "(Ljava/io/PrintWriter;)V", methodCache: &setLogWriter_MethodID_6, args: &__args, locals: &__locals )
    }

    open class func setLogWriter( _ _arg0: /* java.io.PrintWriter */ UnclassedObject? ) {
        setLogWriter( arg0: _arg0 )
    }

    /// public static java.sql.Driver java.sql.DriverManager.getDriver(java.lang.String) throws java.sql.SQLException

    private static var getDriver_MethodID_7: jmethodID?

    open class func getDriver( arg0: String? ) throws /* java.sql.SQLException */ -> Driver! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getDriver", methodSig: "(Ljava/lang/String;)Ljava/sql/Driver;", methodCache: &getDriver_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? DriverForward( javaObject: __return ) : nil
    }

    open class func getDriver( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Driver! {
        return try getDriver( arg0: _arg0 )
    }

    /// public static synchronized void java.sql.DriverManager.registerDriver(java.sql.Driver) throws java.sql.SQLException

    private static var registerDriver_MethodID_8: jmethodID?

    open class func registerDriver( arg0: Driver? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallStaticVoidMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "registerDriver", methodSig: "(Ljava/sql/Driver;)V", methodCache: &registerDriver_MethodID_8, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open class func registerDriver( _ _arg0: Driver? ) throws /* java.sql.SQLException */ {
        try registerDriver( arg0: _arg0 )
    }

    /// public static synchronized void java.sql.DriverManager.deregisterDriver(java.sql.Driver) throws java.sql.SQLException

    private static var deregisterDriver_MethodID_9: jmethodID?

    open class func deregisterDriver( arg0: Driver? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallStaticVoidMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "deregisterDriver", methodSig: "(Ljava/sql/Driver;)V", methodCache: &deregisterDriver_MethodID_9, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open class func deregisterDriver( _ _arg0: Driver? ) throws /* java.sql.SQLException */ {
        try deregisterDriver( arg0: _arg0 )
    }

    /// public static java.util.Enumeration java.sql.DriverManager.getDrivers()

    private static var getDrivers_MethodID_10: jmethodID?

    open class func getDrivers() -> java_util.Enumeration! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getDrivers", methodSig: "()Ljava/util/Enumeration;", methodCache: &getDrivers_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.EnumerationForward( javaObject: __return ) : nil
    }


    /// public static void java.sql.DriverManager.setLoginTimeout(int)

    private static var setLoginTimeout_MethodID_11: jmethodID?

    open class func setLoginTimeout( arg0: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "setLoginTimeout", methodSig: "(I)V", methodCache: &setLoginTimeout_MethodID_11, args: &__args, locals: &__locals )
    }

    open class func setLoginTimeout( _ _arg0: Int ) {
        setLoginTimeout( arg0: _arg0 )
    }

    /// public static int java.sql.DriverManager.getLoginTimeout()

    private static var getLoginTimeout_MethodID_12: jmethodID?

    open class func getLoginTimeout() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticIntMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getLoginTimeout", methodSig: "()I", methodCache: &getLoginTimeout_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public static void java.sql.DriverManager.setLogStream(java.io.PrintStream)

    private static var setLogStream_MethodID_13: jmethodID?

    open class func setLogStream( arg0: /* java.io.PrintStream */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "setLogStream", methodSig: "(Ljava/io/PrintStream;)V", methodCache: &setLogStream_MethodID_13, args: &__args, locals: &__locals )
    }

    open class func setLogStream( _ _arg0: /* java.io.PrintStream */ UnclassedObject? ) {
        setLogStream( arg0: _arg0 )
    }

    /// public static java.io.PrintStream java.sql.DriverManager.getLogStream()

    private static var getLogStream_MethodID_14: jmethodID?

    open class func getLogStream() -> /* java.io.PrintStream */ UnclassedObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getLogStream", methodSig: "()Ljava/io/PrintStream;", methodCache: &getLogStream_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* java.io.PrintStream */ UnclassedObject( javaObject: __return ) : nil
    }


    /// private static void java.sql.DriverManager.loadInitialDrivers()

}
