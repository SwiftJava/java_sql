
import java_swift
import java_util
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.sql.DriverManager ///

open class DriverManager: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DriverManagerJNIClass: jclass?

    /// static final java.sql.SQLPermission java.sql.DriverManager.DEREGISTER_DRIVER_PERMISSION

    // Skipping field: true false false false false false 

    /// static final java.sql.SQLPermission java.sql.DriverManager.SET_LOG_PERMISSION

    // Skipping field: true false false false false false 

    /// private static volatile java.io.PrintStream java.sql.DriverManager.logStream

    /// private static final java.lang.Object java.sql.DriverManager.logSync

    /// private static volatile java.io.PrintWriter java.sql.DriverManager.logWriter

    /// private static volatile int java.sql.DriverManager.loginTimeout

    /// private static final java.util.concurrent.CopyOnWriteArrayList java.sql.DriverManager.registeredDrivers

    /// private java.sql.DriverManager()

    /// public static synchronized void java.sql.DriverManager.deregisterDriver(java.sql.Driver) throws java.sql.SQLException

    private static var deregisterDriver_MethodID_1: jmethodID?

    open class func deregisterDriver( driver: Driver? ) throws /* java.sql.SQLException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: driver, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "deregisterDriver", methodSig: "(Ljava/sql/Driver;)V", methodCache: &deregisterDriver_MethodID_1, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw SQLException( javaObject: throwable )
        }
    }

    open class func deregisterDriver( _ _driver: Driver? ) throws /* java.sql.SQLException */ {
        try deregisterDriver( driver: _driver )
    }

    /// public static java.sql.Connection java.sql.DriverManager.getConnection(java.lang.String) throws java.sql.SQLException

    private static var getConnection_MethodID_2: jmethodID?

    open class func getConnection( url: String? ) throws /* java.sql.SQLException */ -> Connection! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: url, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getConnection", methodSig: "(Ljava/lang/String;)Ljava/sql/Connection;", methodCache: &getConnection_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ConnectionForward( javaObject: __return ) : nil
    }

    open class func getConnection( _ _url: String? ) throws /* java.sql.SQLException */ -> Connection! {
        return try getConnection( url: _url )
    }

    /// public static java.sql.Connection java.sql.DriverManager.getConnection(java.lang.String,java.lang.String,java.lang.String) throws java.sql.SQLException

    private static var getConnection_MethodID_3: jmethodID?

    open class func getConnection( url: String?, user: String?, password: String? ) throws /* java.sql.SQLException */ -> Connection! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: url, locals: &__locals )
        __args[1] = JNIType.toJava( value: user, locals: &__locals )
        __args[2] = JNIType.toJava( value: password, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getConnection", methodSig: "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/sql/Connection;", methodCache: &getConnection_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ConnectionForward( javaObject: __return ) : nil
    }

    open class func getConnection( _ _url: String?, _ _user: String?, _ _password: String? ) throws /* java.sql.SQLException */ -> Connection! {
        return try getConnection( url: _url, user: _user, password: _password )
    }

    /// public static java.sql.Connection java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties) throws java.sql.SQLException

    private static var getConnection_MethodID_4: jmethodID?

    open class func getConnection( url: String?, info: java_util.Properties? ) throws /* java.sql.SQLException */ -> Connection! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: url, locals: &__locals )
        __args[1] = JNIType.toJava( value: info, mapClass: "java/util/Properties", locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getConnection", methodSig: "(Ljava/lang/String;Ljava/util/Properties;)Ljava/sql/Connection;", methodCache: &getConnection_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ConnectionForward( javaObject: __return ) : nil
    }

    open class func getConnection( _ _url: String?, _ _info: java_util.Properties? ) throws /* java.sql.SQLException */ -> Connection! {
        return try getConnection( url: _url, info: _info )
    }

    /// private static java.sql.Connection java.sql.DriverManager.getConnection(java.lang.String,java.util.Properties,java.lang.Class) throws java.sql.SQLException

    /// public static java.sql.Driver java.sql.DriverManager.getDriver(java.lang.String) throws java.sql.SQLException

    private static var getDriver_MethodID_5: jmethodID?

    open class func getDriver( url: String? ) throws /* java.sql.SQLException */ -> Driver! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: url, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getDriver", methodSig: "(Ljava/lang/String;)Ljava/sql/Driver;", methodCache: &getDriver_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? DriverForward( javaObject: __return ) : nil
    }

    open class func getDriver( _ _url: String? ) throws /* java.sql.SQLException */ -> Driver! {
        return try getDriver( url: _url )
    }

    /// public static java.util.Enumeration java.sql.DriverManager.getDrivers()

    private static var getDrivers_MethodID_6: jmethodID?

    open class func getDrivers() -> java_util.Enumeration! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getDrivers", methodSig: "()Ljava/util/Enumeration;", methodCache: &getDrivers_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.EnumerationForward( javaObject: __return ) : nil
    }


    /// public static java.io.PrintStream java.sql.DriverManager.getLogStream()

    private static var getLogStream_MethodID_7: jmethodID?

    open class func getLogStream() -> /* class java.io.PrintStream */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getLogStream", methodSig: "()Ljava/io/PrintStream;", methodCache: &getLogStream_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.io.PrintStream */ UnavailableObject( javaObject: __return ) : nil
    }


    /// public static java.io.PrintWriter java.sql.DriverManager.getLogWriter()

    private static var getLogWriter_MethodID_8: jmethodID?

    open class func getLogWriter() -> /* class java.io.PrintWriter */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getLogWriter", methodSig: "()Ljava/io/PrintWriter;", methodCache: &getLogWriter_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class java.io.PrintWriter */ UnavailableObject( javaObject: __return ) : nil
    }


    /// public static int java.sql.DriverManager.getLoginTimeout()

    private static var getLoginTimeout_MethodID_9: jmethodID?

    open class func getLoginTimeout() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticIntMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "getLoginTimeout", methodSig: "()I", methodCache: &getLoginTimeout_MethodID_9, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// private static boolean java.sql.DriverManager.isDriverAllowed(java.sql.Driver,java.lang.ClassLoader)

    /// private static boolean java.sql.DriverManager.isDriverAllowed(java.sql.Driver,java.lang.Class)

    /// private static void java.sql.DriverManager.loadInitialDrivers()

    /// public static void java.sql.DriverManager.println(java.lang.String)

    private static var println_MethodID_10: jmethodID?

    open class func println( message: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: message, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "println", methodSig: "(Ljava/lang/String;)V", methodCache: &println_MethodID_10, args: &__args, locals: &__locals )
    }

    open class func println( _ _message: String? ) {
        println( message: _message )
    }

    /// public static synchronized void java.sql.DriverManager.registerDriver(java.sql.Driver) throws java.sql.SQLException

    private static var registerDriver_MethodID_11: jmethodID?

    open class func registerDriver( driver: Driver? ) throws /* java.sql.SQLException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: driver, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "registerDriver", methodSig: "(Ljava/sql/Driver;)V", methodCache: &registerDriver_MethodID_11, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw SQLException( javaObject: throwable )
        }
    }

    open class func registerDriver( _ _driver: Driver? ) throws /* java.sql.SQLException */ {
        try registerDriver( driver: _driver )
    }

    /// public static synchronized void java.sql.DriverManager.registerDriver(java.sql.Driver,java.sql.DriverAction) throws java.sql.SQLException

    private static var registerDriver_MethodID_12: jmethodID?

    open class func registerDriver( driver: Driver?, da: DriverAction? ) throws /* java.sql.SQLException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: driver, locals: &__locals )
        __args[1] = JNIType.toJava( value: da, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "registerDriver", methodSig: "(Ljava/sql/Driver;Ljava/sql/DriverAction;)V", methodCache: &registerDriver_MethodID_12, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw SQLException( javaObject: throwable )
        }
    }

    open class func registerDriver( _ _driver: Driver?, _ _da: DriverAction? ) throws /* java.sql.SQLException */ {
        try registerDriver( driver: _driver, da: _da )
    }

    /// public static void java.sql.DriverManager.setLogStream(java.io.PrintStream)

    private static var setLogStream_MethodID_13: jmethodID?

    open class func setLogStream( out: /* class java.io.PrintStream */ UnavailableObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: out, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "setLogStream", methodSig: "(Ljava/io/PrintStream;)V", methodCache: &setLogStream_MethodID_13, args: &__args, locals: &__locals )
    }

    open class func setLogStream( _ _out: /* class java.io.PrintStream */ UnavailableObject? ) {
        setLogStream( out: _out )
    }

    /// public static void java.sql.DriverManager.setLogWriter(java.io.PrintWriter)

    private static var setLogWriter_MethodID_14: jmethodID?

    open class func setLogWriter( out: /* class java.io.PrintWriter */ UnavailableObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: out, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "setLogWriter", methodSig: "(Ljava/io/PrintWriter;)V", methodCache: &setLogWriter_MethodID_14, args: &__args, locals: &__locals )
    }

    open class func setLogWriter( _ _out: /* class java.io.PrintWriter */ UnavailableObject? ) {
        setLogWriter( out: _out )
    }

    /// public static void java.sql.DriverManager.setLoginTimeout(int)

    private static var setLoginTimeout_MethodID_15: jmethodID?

    open class func setLoginTimeout( seconds: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(seconds) )
        JNIMethod.CallStaticVoidMethod( className: "java/sql/DriverManager", classCache: &DriverManagerJNIClass, methodName: "setLoginTimeout", methodSig: "(I)V", methodCache: &setLoginTimeout_MethodID_15, args: &__args, locals: &__locals )
    }

    open class func setLoginTimeout( _ _seconds: Int ) {
        setLoginTimeout( seconds: _seconds )
    }

}

