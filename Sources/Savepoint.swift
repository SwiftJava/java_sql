
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.sql.Savepoint ///

public protocol Savepoint: JavaProtocol {

    /// public abstract int java.sql.Savepoint.getSavepointId() throws java.sql.SQLException

    func getSavepointId() throws /* java.sql.SQLException */ -> Int

    /// public abstract java.lang.String java.sql.Savepoint.getSavepointName() throws java.sql.SQLException

    func getSavepointName() throws /* java.sql.SQLException */ -> String!

}


open class SavepointForward: JNIObjectForward, Savepoint {

    private static var SavepointJNIClass: jclass?

    /// public abstract int java.sql.Savepoint.getSavepointId() throws java.sql.SQLException

    private static var getSavepointId_MethodID_3: jmethodID?

    open func getSavepointId() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getSavepointId", methodSig: "()I", methodCache: &SavepointForward.getSavepointId_MethodID_3, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public abstract java.lang.String java.sql.Savepoint.getSavepointName() throws java.sql.SQLException

    private static var getSavepointName_MethodID_4: jmethodID?

    open func getSavepointName() throws /* java.sql.SQLException */ -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSavepointName", methodSig: "()Ljava/lang/String;", methodCache: &SavepointForward.getSavepointName_MethodID_4, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.toSwift( type: String(), from: __return )
    }


}


