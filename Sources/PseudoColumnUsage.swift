
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class java.sql.PseudoColumnUsage ///

open class PseudoColumnUsage: java_lang.Enum {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.sql.PseudoColumnUsage", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var PseudoColumnUsageJNIClass: jclass?

    /// public static final java.sql.PseudoColumnUsage java.sql.PseudoColumnUsage.SELECT_LIST_ONLY

    private static var SELECT_LIST_ONLY_FieldID: jfieldID?

    open static var SELECT_LIST_ONLY: PseudoColumnUsage! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "SELECT_LIST_ONLY", fieldType: "Ljava/sql/PseudoColumnUsage;", fieldCache: &SELECT_LIST_ONLY_FieldID, className: "java/sql/PseudoColumnUsage", classCache: &PseudoColumnUsageJNIClass )
            return __value != nil ? PseudoColumnUsage( javaObject: __value ) : nil
        }
    }

    /// public static final java.sql.PseudoColumnUsage java.sql.PseudoColumnUsage.WHERE_CLAUSE_ONLY

    private static var WHERE_CLAUSE_ONLY_FieldID: jfieldID?

    open static var WHERE_CLAUSE_ONLY: PseudoColumnUsage! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "WHERE_CLAUSE_ONLY", fieldType: "Ljava/sql/PseudoColumnUsage;", fieldCache: &WHERE_CLAUSE_ONLY_FieldID, className: "java/sql/PseudoColumnUsage", classCache: &PseudoColumnUsageJNIClass )
            return __value != nil ? PseudoColumnUsage( javaObject: __value ) : nil
        }
    }

    /// public static final java.sql.PseudoColumnUsage java.sql.PseudoColumnUsage.NO_USAGE_RESTRICTIONS

    private static var NO_USAGE_RESTRICTIONS_FieldID: jfieldID?

    open static var NO_USAGE_RESTRICTIONS: PseudoColumnUsage! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "NO_USAGE_RESTRICTIONS", fieldType: "Ljava/sql/PseudoColumnUsage;", fieldCache: &NO_USAGE_RESTRICTIONS_FieldID, className: "java/sql/PseudoColumnUsage", classCache: &PseudoColumnUsageJNIClass )
            return __value != nil ? PseudoColumnUsage( javaObject: __value ) : nil
        }
    }

    /// public static final java.sql.PseudoColumnUsage java.sql.PseudoColumnUsage.USAGE_UNKNOWN

    private static var USAGE_UNKNOWN_FieldID: jfieldID?

    open static var USAGE_UNKNOWN: PseudoColumnUsage! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "USAGE_UNKNOWN", fieldType: "Ljava/sql/PseudoColumnUsage;", fieldCache: &USAGE_UNKNOWN_FieldID, className: "java/sql/PseudoColumnUsage", classCache: &PseudoColumnUsageJNIClass )
            return __value != nil ? PseudoColumnUsage( javaObject: __value ) : nil
        }
    }

    /// private static final java.sql.PseudoColumnUsage[] java.sql.PseudoColumnUsage.$VALUES

    /// private final java.lang.String java.lang.Enum.name

    /// private final int java.lang.Enum.ordinal

    /// private java.sql.PseudoColumnUsage(java.lang.String,int)

    /// public static java.sql.PseudoColumnUsage[] java.sql.PseudoColumnUsage.values()

    private static var values_MethodID_1: jmethodID?

    open class func values() -> [PseudoColumnUsage]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/PseudoColumnUsage", classCache: &PseudoColumnUsageJNIClass, methodName: "values", methodSig: "()[Ljava/sql/PseudoColumnUsage;", methodCache: &values_MethodID_1, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [PseudoColumnUsage](), from: __return )
    }


    /// public static java.sql.PseudoColumnUsage java.sql.PseudoColumnUsage.valueOf(java.lang.String)

    private static var valueOf_MethodID_2: jmethodID?

    open class func valueOf( name: String? ) -> PseudoColumnUsage! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/PseudoColumnUsage", classCache: &PseudoColumnUsageJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/sql/PseudoColumnUsage;", methodCache: &valueOf_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? PseudoColumnUsage( javaObject: __return ) : nil
    }

    open class func valueOf( _ _name: String? ) -> PseudoColumnUsage! {
        return valueOf( name: _name )
    }

}

