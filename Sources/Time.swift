
import java_swift
import java_util
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:34 GMT 2016 ///

/// class java.sql.Time ///

open class Time: java_util.Date {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.sql.Time", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var TimeJNIClass: jclass?

    /// static final long java.sql.Time.serialVersionUID

    /// private static final sun.util.calendar.BaseCalendar java.util.Date.gcal

    /// private static sun.util.calendar.BaseCalendar java.util.Date.jcal

    /// private transient long java.util.Date.fastTime

    /// private transient sun.util.calendar.BaseCalendar$Date java.util.Date.cdate

    /// private static int java.util.Date.defaultCenturyStart

    /// private static final long java.util.Date.serialVersionUID

    /// private static final java.lang.String[] java.util.Date.wtb

    /// private static final int[] java.util.Date.ttb

    /// public java.sql.Time(int,int,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Int, arg1: Int, arg2: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/sql/Time", classCache: &Time.TimeJNIClass, methodSig: "(III)V", methodCache: &Time.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.sql.Time(long)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: Int64 ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/sql/Time", classCache: &Time.TimeJNIClass, methodSig: "(J)V", methodCache: &Time.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Int64 ) {
        self.init( arg0: _arg0 )
    }

    /// public java.lang.String java.sql.Time.toString()

    /// public static java.sql.Time java.sql.Time.valueOf(java.lang.String)

    private static var valueOf_MethodID_3: jmethodID?

    open class func valueOf( arg0: String? ) -> Time! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "java/sql/Time", classCache: &TimeJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljava/sql/Time;", methodCache: &valueOf_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? Time( javaObject: __return ) : nil
    }

    open class func valueOf( _ _arg0: String? ) -> Time! {
        return valueOf( arg0: _arg0 )
    }

    /// public void java.sql.Time.setTime(long)

    /// public int java.sql.Time.getYear()

    /// public int java.sql.Time.getMonth()

    /// public int java.sql.Time.getDate()

    /// public void java.sql.Time.setDate(int)

    /// public void java.sql.Time.setMonth(int)

    /// public void java.sql.Time.setYear(int)

    /// public int java.sql.Time.getDay()

}
