
import java_swift
import java_lang
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:33 GMT 2016 ///

/// class java.sql.SQLClientInfoException ///

open class SQLClientInfoException: SQLException {

    public convenience init?( casting object: java_lang.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "java.sql.SQLClientInfoException", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var SQLClientInfoExceptionJNIClass: jclass?

    /// private java.util.Map java.sql.SQLClientInfoException.failedProperties

    /// private static final long java.sql.SQLClientInfoException.serialVersionUID

    /// private java.lang.String java.sql.SQLException.SQLState

    /// private int java.sql.SQLException.vendorCode

    /// private volatile java.sql.SQLException java.sql.SQLException.next

    /// private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater java.sql.SQLException.nextUpdater

    /// private static final long java.sql.SQLException.serialVersionUID

    /// static final long java.lang.Exception.serialVersionUID

    /// private static final long java.lang.Throwable.serialVersionUID

    /// private java.lang.String java.lang.Throwable.detailMessage

    /// private java.lang.Throwable java.lang.Throwable.cause

    /// private java.lang.StackTraceElement[] java.lang.Throwable.stackTrace

    /// public java.sql.SQLClientInfoException()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "java/sql/SQLClientInfoException", classCache: &SQLClientInfoException.SQLClientInfoExceptionJNIClass, methodSig: "()V", methodCache: &SQLClientInfoException.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public java.sql.SQLClientInfoException(java.util.Map)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: java_util.Map? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/sql/SQLClientInfoException", classCache: &SQLClientInfoException.SQLClientInfoExceptionJNIClass, methodSig: "(Ljava/util/Map;)V", methodCache: &SQLClientInfoException.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_util.Map? ) {
        self.init( arg0: _arg0 )
    }

    /// public java.sql.SQLClientInfoException(java.util.Map,java.lang.Throwable)

    private static var new_MethodID_3: jmethodID?

    public convenience init( arg0: java_util.Map?, arg1: java_lang.Throwable? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/sql/SQLClientInfoException", classCache: &SQLClientInfoException.SQLClientInfoExceptionJNIClass, methodSig: "(Ljava/util/Map;Ljava/lang/Throwable;)V", methodCache: &SQLClientInfoException.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: java_util.Map?, _ _arg1: java_lang.Throwable? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.sql.SQLClientInfoException(java.lang.String,java.util.Map)

    private static var new_MethodID_4: jmethodID?

    public convenience init( arg0: String?, arg1: java_util.Map? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/sql/SQLClientInfoException", classCache: &SQLClientInfoException.SQLClientInfoExceptionJNIClass, methodSig: "(Ljava/lang/String;Ljava/util/Map;)V", methodCache: &SQLClientInfoException.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: java_util.Map? ) {
        self.init( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.sql.SQLClientInfoException(java.lang.String,java.util.Map,java.lang.Throwable)

    private static var new_MethodID_5: jmethodID?

    public convenience init( arg0: String?, arg1: java_util.Map?, arg2: java_lang.Throwable? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/sql/SQLClientInfoException", classCache: &SQLClientInfoException.SQLClientInfoExceptionJNIClass, methodSig: "(Ljava/lang/String;Ljava/util/Map;Ljava/lang/Throwable;)V", methodCache: &SQLClientInfoException.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: java_util.Map?, _ _arg2: java_lang.Throwable? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.sql.SQLClientInfoException(java.lang.String,java.lang.String,java.util.Map)

    private static var new_MethodID_6: jmethodID?

    public convenience init( arg0: String?, arg1: String?, arg2: java_util.Map? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = jvalue( l: arg2?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/sql/SQLClientInfoException", classCache: &SQLClientInfoException.SQLClientInfoExceptionJNIClass, methodSig: "(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)V", methodCache: &SQLClientInfoException.new_MethodID_6, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: String?, _ _arg2: java_util.Map? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public java.sql.SQLClientInfoException(java.lang.String,java.lang.String,java.util.Map,java.lang.Throwable)

    private static var new_MethodID_7: jmethodID?

    public convenience init( arg0: String?, arg1: String?, arg2: java_util.Map?, arg3: java_lang.Throwable? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = jvalue( l: arg2?.localJavaObject( &__locals ) )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/sql/SQLClientInfoException", classCache: &SQLClientInfoException.SQLClientInfoExceptionJNIClass, methodSig: "(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;Ljava/lang/Throwable;)V", methodCache: &SQLClientInfoException.new_MethodID_7, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: String?, _ _arg2: java_util.Map?, _ _arg3: java_lang.Throwable? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.sql.SQLClientInfoException(java.lang.String,java.lang.String,int,java.util.Map)

    private static var new_MethodID_8: jmethodID?

    public convenience init( arg0: String?, arg1: String?, arg2: Int, arg3: java_util.Map? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = jvalue( l: arg3?.localJavaObject( &__locals ) )
        let __object = JNIMethod.NewObject( className: "java/sql/SQLClientInfoException", classCache: &SQLClientInfoException.SQLClientInfoExceptionJNIClass, methodSig: "(Ljava/lang/String;Ljava/lang/String;ILjava/util/Map;)V", methodCache: &SQLClientInfoException.new_MethodID_8, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: String?, _ _arg2: Int, _ _arg3: java_util.Map? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public java.sql.SQLClientInfoException(java.lang.String,java.lang.String,int,java.util.Map,java.lang.Throwable)

    private static var new_MethodID_9: jmethodID?

    public convenience init( arg0: String?, arg1: String?, arg2: Int, arg3: java_util.Map?, arg4: java_lang.Throwable? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = jvalue( l: arg3?.localJavaObject( &__locals ) )
        __args[4] = JNIType.encode( value: arg4, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "java/sql/SQLClientInfoException", classCache: &SQLClientInfoException.SQLClientInfoExceptionJNIClass, methodSig: "(Ljava/lang/String;Ljava/lang/String;ILjava/util/Map;Ljava/lang/Throwable;)V", methodCache: &SQLClientInfoException.new_MethodID_9, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: String?, _ _arg1: String?, _ _arg2: Int, _ _arg3: java_util.Map?, _ _arg4: java_lang.Throwable? ) {
        self.init( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4 )
    }

    /// public java.util.Map java.sql.SQLClientInfoException.getFailedProperties()

    private static var getFailedProperties_MethodID_10: jmethodID?

    open func getFailedProperties() -> java_util.Map! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFailedProperties", methodSig: "()Ljava/util/Map;", methodCache: &SQLClientInfoException.getFailedProperties_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.MapForward( javaObject: __return ) : nil
    }


}
