
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:33 GMT 2016 ///

/// interface java.sql.SQLData ///

public protocol SQLData: JavaProtocol {

    /// public abstract java.lang.String java.sql.SQLData.getSQLTypeName() throws java.sql.SQLException

    func getSQLTypeName() throws /* java.sql.SQLException */ -> String!

    /// public abstract void java.sql.SQLData.readSQL(java.sql.SQLInput,java.lang.String) throws java.sql.SQLException

    func readSQL( arg0: SQLInput?, arg1: String? ) throws /* java.sql.SQLException */
    func readSQL( _ _arg0: SQLInput?, _ _arg1: String? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLData.writeSQL(java.sql.SQLOutput) throws java.sql.SQLException

    func writeSQL( arg0: SQLOutput? ) throws /* java.sql.SQLException */
    func writeSQL( _ _arg0: SQLOutput? ) throws /* java.sql.SQLException */

}

open class SQLDataForward: JNIObjectForward, SQLData {

    private static var SQLDataJNIClass: jclass?

    /// public abstract java.lang.String java.sql.SQLData.getSQLTypeName() throws java.sql.SQLException

    private static var getSQLTypeName_MethodID_4: jmethodID?

    open func getSQLTypeName() throws /* java.sql.SQLException */ -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSQLTypeName", methodSig: "()Ljava/lang/String;", methodCache: &SQLDataForward.getSQLTypeName_MethodID_4, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: String(), from: __return )
    }


    /// public abstract void java.sql.SQLData.readSQL(java.sql.SQLInput,java.lang.String) throws java.sql.SQLException

    private static var readSQL_MethodID_5: jmethodID?

    open func readSQL( arg0: SQLInput?, arg1: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "readSQL", methodSig: "(Ljava/sql/SQLInput;Ljava/lang/String;)V", methodCache: &SQLDataForward.readSQL_MethodID_5, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func readSQL( _ _arg0: SQLInput?, _ _arg1: String? ) throws /* java.sql.SQLException */ {
        try readSQL( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.SQLData.writeSQL(java.sql.SQLOutput) throws java.sql.SQLException

    private static var writeSQL_MethodID_6: jmethodID?

    open func writeSQL( arg0: SQLOutput? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeSQL", methodSig: "(Ljava/sql/SQLOutput;)V", methodCache: &SQLDataForward.writeSQL_MethodID_6, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeSQL( _ _arg0: SQLOutput? ) throws /* java.sql.SQLException */ {
        try writeSQL( arg0: _arg0 )
    }

}


