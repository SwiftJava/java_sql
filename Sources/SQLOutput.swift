
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:33 GMT 2016 ///

/// interface java.sql.SQLOutput ///

public protocol SQLOutput: JavaProtocol {

    /// public abstract void java.sql.SQLOutput.writeObject(java.sql.SQLData) throws java.sql.SQLException

    func writeObject( arg0: SQLData? ) throws /* java.sql.SQLException */
    func writeObject( _ _arg0: SQLData? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeInt(int) throws java.sql.SQLException

    func writeInt( arg0: Int ) throws /* java.sql.SQLException */
    func writeInt( _ _arg0: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeBytes(byte[]) throws java.sql.SQLException

    func writeBytes( arg0: [Int8]? ) throws /* java.sql.SQLException */
    func writeBytes( _ _arg0: [Int8]? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeLong(long) throws java.sql.SQLException

    func writeLong( arg0: Int64 ) throws /* java.sql.SQLException */
    func writeLong( _ _arg0: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeByte(byte) throws java.sql.SQLException

    func writeByte( arg0: Int8 ) throws /* java.sql.SQLException */
    func writeByte( _ _arg0: Int8 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeShort(short) throws java.sql.SQLException

    func writeShort( arg0: Int16 ) throws /* java.sql.SQLException */
    func writeShort( _ _arg0: Int16 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeFloat(float) throws java.sql.SQLException

    func writeFloat( arg0: Float ) throws /* java.sql.SQLException */
    func writeFloat( _ _arg0: Float ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeString(java.lang.String) throws java.sql.SQLException

    func writeString( arg0: String? ) throws /* java.sql.SQLException */
    func writeString( _ _arg0: String? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeBoolean(boolean) throws java.sql.SQLException

    func writeBoolean( arg0: Bool ) throws /* java.sql.SQLException */
    func writeBoolean( _ _arg0: Bool ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeDouble(double) throws java.sql.SQLException

    func writeDouble( arg0: Double ) throws /* java.sql.SQLException */
    func writeDouble( _ _arg0: Double ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeBigDecimal(java.math.BigDecimal) throws java.sql.SQLException

    func writeBigDecimal( arg0: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */
    func writeBigDecimal( _ _arg0: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeDate(java.sql.Date) throws java.sql.SQLException

    func writeDate( arg0: Date? ) throws /* java.sql.SQLException */
    func writeDate( _ _arg0: Date? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeTime(java.sql.Time) throws java.sql.SQLException

    func writeTime( arg0: Time? ) throws /* java.sql.SQLException */
    func writeTime( _ _arg0: Time? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeTimestamp(java.sql.Timestamp) throws java.sql.SQLException

    func writeTimestamp( arg0: Timestamp? ) throws /* java.sql.SQLException */
    func writeTimestamp( _ _arg0: Timestamp? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeCharacterStream(java.io.Reader) throws java.sql.SQLException

    func writeCharacterStream( arg0: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */
    func writeCharacterStream( _ _arg0: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeAsciiStream(java.io.InputStream) throws java.sql.SQLException

    func writeAsciiStream( arg0: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */
    func writeAsciiStream( _ _arg0: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeBinaryStream(java.io.InputStream) throws java.sql.SQLException

    func writeBinaryStream( arg0: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */
    func writeBinaryStream( _ _arg0: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeRef(java.sql.Ref) throws java.sql.SQLException

    func writeRef( arg0: Ref? ) throws /* java.sql.SQLException */
    func writeRef( _ _arg0: Ref? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeBlob(java.sql.Blob) throws java.sql.SQLException

    func writeBlob( arg0: Blob? ) throws /* java.sql.SQLException */
    func writeBlob( _ _arg0: Blob? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeClob(java.sql.Clob) throws java.sql.SQLException

    func writeClob( arg0: Clob? ) throws /* java.sql.SQLException */
    func writeClob( _ _arg0: Clob? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeStruct(java.sql.Struct) throws java.sql.SQLException

    func writeStruct( arg0: Struct? ) throws /* java.sql.SQLException */
    func writeStruct( _ _arg0: Struct? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeArray(java.sql.Array) throws java.sql.SQLException

    func writeArray( arg0: Array? ) throws /* java.sql.SQLException */
    func writeArray( _ _arg0: Array? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeURL(java.net.URL) throws java.sql.SQLException

    func writeURL( arg0: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */
    func writeURL( _ _arg0: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeNString(java.lang.String) throws java.sql.SQLException

    func writeNString( arg0: String? ) throws /* java.sql.SQLException */
    func writeNString( _ _arg0: String? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeNClob(java.sql.NClob) throws java.sql.SQLException

    func writeNClob( arg0: NClob? ) throws /* java.sql.SQLException */
    func writeNClob( _ _arg0: NClob? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeRowId(java.sql.RowId) throws java.sql.SQLException

    func writeRowId( arg0: RowId? ) throws /* java.sql.SQLException */
    func writeRowId( _ _arg0: RowId? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeSQLXML(java.sql.SQLXML) throws java.sql.SQLException

    func writeSQLXML( arg0: SQLXML? ) throws /* java.sql.SQLException */
    func writeSQLXML( _ _arg0: SQLXML? ) throws /* java.sql.SQLException */

}

open class SQLOutputForward: JNIObjectForward, SQLOutput {

    private static var SQLOutputJNIClass: jclass?

    /// public abstract void java.sql.SQLOutput.writeObject(java.sql.SQLData) throws java.sql.SQLException

    private static var writeObject_MethodID_28: jmethodID?

    open func writeObject( arg0: SQLData? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeObject", methodSig: "(Ljava/sql/SQLData;)V", methodCache: &SQLOutputForward.writeObject_MethodID_28, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeObject( _ _arg0: SQLData? ) throws /* java.sql.SQLException */ {
        try writeObject( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeInt(int) throws java.sql.SQLException

    private static var writeInt_MethodID_29: jmethodID?

    open func writeInt( arg0: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeInt", methodSig: "(I)V", methodCache: &SQLOutputForward.writeInt_MethodID_29, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeInt( _ _arg0: Int ) throws /* java.sql.SQLException */ {
        try writeInt( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeBytes(byte[]) throws java.sql.SQLException

    private static var writeBytes_MethodID_30: jmethodID?

    open func writeBytes( arg0: [Int8]? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeBytes", methodSig: "([B)V", methodCache: &SQLOutputForward.writeBytes_MethodID_30, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeBytes( _ _arg0: [Int8]? ) throws /* java.sql.SQLException */ {
        try writeBytes( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeLong(long) throws java.sql.SQLException

    private static var writeLong_MethodID_31: jmethodID?

    open func writeLong( arg0: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeLong", methodSig: "(J)V", methodCache: &SQLOutputForward.writeLong_MethodID_31, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeLong( _ _arg0: Int64 ) throws /* java.sql.SQLException */ {
        try writeLong( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeByte(byte) throws java.sql.SQLException

    private static var writeByte_MethodID_32: jmethodID?

    open func writeByte( arg0: Int8 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeByte", methodSig: "(B)V", methodCache: &SQLOutputForward.writeByte_MethodID_32, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeByte( _ _arg0: Int8 ) throws /* java.sql.SQLException */ {
        try writeByte( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeShort(short) throws java.sql.SQLException

    private static var writeShort_MethodID_33: jmethodID?

    open func writeShort( arg0: Int16 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeShort", methodSig: "(S)V", methodCache: &SQLOutputForward.writeShort_MethodID_33, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeShort( _ _arg0: Int16 ) throws /* java.sql.SQLException */ {
        try writeShort( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeFloat(float) throws java.sql.SQLException

    private static var writeFloat_MethodID_34: jmethodID?

    open func writeFloat( arg0: Float ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeFloat", methodSig: "(F)V", methodCache: &SQLOutputForward.writeFloat_MethodID_34, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeFloat( _ _arg0: Float ) throws /* java.sql.SQLException */ {
        try writeFloat( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeString(java.lang.String) throws java.sql.SQLException

    private static var writeString_MethodID_35: jmethodID?

    open func writeString( arg0: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeString", methodSig: "(Ljava/lang/String;)V", methodCache: &SQLOutputForward.writeString_MethodID_35, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeString( _ _arg0: String? ) throws /* java.sql.SQLException */ {
        try writeString( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeBoolean(boolean) throws java.sql.SQLException

    private static var writeBoolean_MethodID_36: jmethodID?

    open func writeBoolean( arg0: Bool ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeBoolean", methodSig: "(Z)V", methodCache: &SQLOutputForward.writeBoolean_MethodID_36, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeBoolean( _ _arg0: Bool ) throws /* java.sql.SQLException */ {
        try writeBoolean( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeDouble(double) throws java.sql.SQLException

    private static var writeDouble_MethodID_37: jmethodID?

    open func writeDouble( arg0: Double ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeDouble", methodSig: "(D)V", methodCache: &SQLOutputForward.writeDouble_MethodID_37, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeDouble( _ _arg0: Double ) throws /* java.sql.SQLException */ {
        try writeDouble( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeBigDecimal(java.math.BigDecimal) throws java.sql.SQLException

    private static var writeBigDecimal_MethodID_38: jmethodID?

    open func writeBigDecimal( arg0: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeBigDecimal", methodSig: "(Ljava/math/BigDecimal;)V", methodCache: &SQLOutputForward.writeBigDecimal_MethodID_38, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeBigDecimal( _ _arg0: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try writeBigDecimal( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeDate(java.sql.Date) throws java.sql.SQLException

    private static var writeDate_MethodID_39: jmethodID?

    open func writeDate( arg0: Date? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeDate", methodSig: "(Ljava/sql/Date;)V", methodCache: &SQLOutputForward.writeDate_MethodID_39, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeDate( _ _arg0: Date? ) throws /* java.sql.SQLException */ {
        try writeDate( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeTime(java.sql.Time) throws java.sql.SQLException

    private static var writeTime_MethodID_40: jmethodID?

    open func writeTime( arg0: Time? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeTime", methodSig: "(Ljava/sql/Time;)V", methodCache: &SQLOutputForward.writeTime_MethodID_40, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeTime( _ _arg0: Time? ) throws /* java.sql.SQLException */ {
        try writeTime( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeTimestamp(java.sql.Timestamp) throws java.sql.SQLException

    private static var writeTimestamp_MethodID_41: jmethodID?

    open func writeTimestamp( arg0: Timestamp? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeTimestamp", methodSig: "(Ljava/sql/Timestamp;)V", methodCache: &SQLOutputForward.writeTimestamp_MethodID_41, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeTimestamp( _ _arg0: Timestamp? ) throws /* java.sql.SQLException */ {
        try writeTimestamp( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeCharacterStream(java.io.Reader) throws java.sql.SQLException

    private static var writeCharacterStream_MethodID_42: jmethodID?

    open func writeCharacterStream( arg0: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeCharacterStream", methodSig: "(Ljava/io/Reader;)V", methodCache: &SQLOutputForward.writeCharacterStream_MethodID_42, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeCharacterStream( _ _arg0: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try writeCharacterStream( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeAsciiStream(java.io.InputStream) throws java.sql.SQLException

    private static var writeAsciiStream_MethodID_43: jmethodID?

    open func writeAsciiStream( arg0: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeAsciiStream", methodSig: "(Ljava/io/InputStream;)V", methodCache: &SQLOutputForward.writeAsciiStream_MethodID_43, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeAsciiStream( _ _arg0: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try writeAsciiStream( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeBinaryStream(java.io.InputStream) throws java.sql.SQLException

    private static var writeBinaryStream_MethodID_44: jmethodID?

    open func writeBinaryStream( arg0: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeBinaryStream", methodSig: "(Ljava/io/InputStream;)V", methodCache: &SQLOutputForward.writeBinaryStream_MethodID_44, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeBinaryStream( _ _arg0: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try writeBinaryStream( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeRef(java.sql.Ref) throws java.sql.SQLException

    private static var writeRef_MethodID_45: jmethodID?

    open func writeRef( arg0: Ref? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeRef", methodSig: "(Ljava/sql/Ref;)V", methodCache: &SQLOutputForward.writeRef_MethodID_45, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeRef( _ _arg0: Ref? ) throws /* java.sql.SQLException */ {
        try writeRef( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeBlob(java.sql.Blob) throws java.sql.SQLException

    private static var writeBlob_MethodID_46: jmethodID?

    open func writeBlob( arg0: Blob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeBlob", methodSig: "(Ljava/sql/Blob;)V", methodCache: &SQLOutputForward.writeBlob_MethodID_46, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeBlob( _ _arg0: Blob? ) throws /* java.sql.SQLException */ {
        try writeBlob( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeClob(java.sql.Clob) throws java.sql.SQLException

    private static var writeClob_MethodID_47: jmethodID?

    open func writeClob( arg0: Clob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeClob", methodSig: "(Ljava/sql/Clob;)V", methodCache: &SQLOutputForward.writeClob_MethodID_47, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeClob( _ _arg0: Clob? ) throws /* java.sql.SQLException */ {
        try writeClob( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeStruct(java.sql.Struct) throws java.sql.SQLException

    private static var writeStruct_MethodID_48: jmethodID?

    open func writeStruct( arg0: Struct? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeStruct", methodSig: "(Ljava/sql/Struct;)V", methodCache: &SQLOutputForward.writeStruct_MethodID_48, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeStruct( _ _arg0: Struct? ) throws /* java.sql.SQLException */ {
        try writeStruct( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeArray(java.sql.Array) throws java.sql.SQLException

    private static var writeArray_MethodID_49: jmethodID?

    open func writeArray( arg0: Array? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeArray", methodSig: "(Ljava/sql/Array;)V", methodCache: &SQLOutputForward.writeArray_MethodID_49, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeArray( _ _arg0: Array? ) throws /* java.sql.SQLException */ {
        try writeArray( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeURL(java.net.URL) throws java.sql.SQLException

    private static var writeURL_MethodID_50: jmethodID?

    open func writeURL( arg0: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeURL", methodSig: "(Ljava/net/URL;)V", methodCache: &SQLOutputForward.writeURL_MethodID_50, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeURL( _ _arg0: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try writeURL( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeNString(java.lang.String) throws java.sql.SQLException

    private static var writeNString_MethodID_51: jmethodID?

    open func writeNString( arg0: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeNString", methodSig: "(Ljava/lang/String;)V", methodCache: &SQLOutputForward.writeNString_MethodID_51, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeNString( _ _arg0: String? ) throws /* java.sql.SQLException */ {
        try writeNString( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeNClob(java.sql.NClob) throws java.sql.SQLException

    private static var writeNClob_MethodID_52: jmethodID?

    open func writeNClob( arg0: NClob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeNClob", methodSig: "(Ljava/sql/NClob;)V", methodCache: &SQLOutputForward.writeNClob_MethodID_52, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeNClob( _ _arg0: NClob? ) throws /* java.sql.SQLException */ {
        try writeNClob( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeRowId(java.sql.RowId) throws java.sql.SQLException

    private static var writeRowId_MethodID_53: jmethodID?

    open func writeRowId( arg0: RowId? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeRowId", methodSig: "(Ljava/sql/RowId;)V", methodCache: &SQLOutputForward.writeRowId_MethodID_53, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeRowId( _ _arg0: RowId? ) throws /* java.sql.SQLException */ {
        try writeRowId( arg0: _arg0 )
    }

    /// public abstract void java.sql.SQLOutput.writeSQLXML(java.sql.SQLXML) throws java.sql.SQLException

    private static var writeSQLXML_MethodID_54: jmethodID?

    open func writeSQLXML( arg0: SQLXML? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeSQLXML", methodSig: "(Ljava/sql/SQLXML;)V", methodCache: &SQLOutputForward.writeSQLXML_MethodID_54, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeSQLXML( _ _arg0: SQLXML? ) throws /* java.sql.SQLException */ {
        try writeSQLXML( arg0: _arg0 )
    }

}


