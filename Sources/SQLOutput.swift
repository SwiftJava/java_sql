
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.sql.SQLOutput ///

public protocol SQLOutput: JavaProtocol {

    /// public default void java.sql.SQLOutput.writeObject(java.lang.Object,java.sql.SQLType) throws java.sql.SQLException

    func writeObject( x: java_swift.JavaObject?, targetSqlType: SQLType? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeObject(java.sql.SQLData) throws java.sql.SQLException

    func writeObject( x: SQLData? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeInt(int) throws java.sql.SQLException

    func writeInt( x: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeBytes(byte[]) throws java.sql.SQLException

    func writeBytes( x: [Int8]? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeBoolean(boolean) throws java.sql.SQLException

    func writeBoolean( x: Bool ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeByte(byte) throws java.sql.SQLException

    func writeByte( x: Int8 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeShort(short) throws java.sql.SQLException

    func writeShort( x: Int16 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeLong(long) throws java.sql.SQLException

    func writeLong( x: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeDouble(double) throws java.sql.SQLException

    func writeDouble( x: Double ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeString(java.lang.String) throws java.sql.SQLException

    func writeString( x: String? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeArray(java.sql.Array) throws java.sql.SQLException

    func writeArray( x: Array? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeFloat(float) throws java.sql.SQLException

    func writeFloat( x: Float ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeBigDecimal(java.math.BigDecimal) throws java.sql.SQLException

    func writeBigDecimal( x: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeDate(java.sql.Date) throws java.sql.SQLException

    func writeDate( x: Date? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeTime(java.sql.Time) throws java.sql.SQLException

    func writeTime( x: Time? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeTimestamp(java.sql.Timestamp) throws java.sql.SQLException

    func writeTimestamp( x: Timestamp? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeCharacterStream(java.io.Reader) throws java.sql.SQLException

    func writeCharacterStream( x: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeAsciiStream(java.io.InputStream) throws java.sql.SQLException

    func writeAsciiStream( x: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeBinaryStream(java.io.InputStream) throws java.sql.SQLException

    func writeBinaryStream( x: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeRef(java.sql.Ref) throws java.sql.SQLException

    func writeRef( x: Ref? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeBlob(java.sql.Blob) throws java.sql.SQLException

    func writeBlob( x: Blob? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeClob(java.sql.Clob) throws java.sql.SQLException

    func writeClob( x: Clob? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeStruct(java.sql.Struct) throws java.sql.SQLException

    func writeStruct( x: Struct? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeURL(java.net.URL) throws java.sql.SQLException

    func writeURL( x: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeNString(java.lang.String) throws java.sql.SQLException

    func writeNString( x: String? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeNClob(java.sql.NClob) throws java.sql.SQLException

    func writeNClob( x: NClob? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeRowId(java.sql.RowId) throws java.sql.SQLException

    func writeRowId( x: RowId? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.SQLOutput.writeSQLXML(java.sql.SQLXML) throws java.sql.SQLException

    func writeSQLXML( x: SQLXML? ) throws /* java.sql.SQLException */

}


open class SQLOutputForward: JNIObjectForward, SQLOutput {

    private static var SQLOutputJNIClass: jclass?

    /// public default void java.sql.SQLOutput.writeObject(java.lang.Object,java.sql.SQLType) throws java.sql.SQLException

    private static var writeObject_MethodID_29: jmethodID?

    open func writeObject( x: java_swift.JavaObject?, targetSqlType: SQLType? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        __args[1] = JNIType.toJava( value: targetSqlType, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeObject", methodSig: "(Ljava/lang/Object;Ljava/sql/SQLType;)V", methodCache: &SQLOutputForward.writeObject_MethodID_29, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeObject( _ _x: java_swift.JavaObject?, _ _targetSqlType: SQLType? ) throws /* java.sql.SQLException */ {
        try writeObject( x: _x, targetSqlType: _targetSqlType )
    }

    /// public abstract void java.sql.SQLOutput.writeObject(java.sql.SQLData) throws java.sql.SQLException

    private static var writeObject_MethodID_30: jmethodID?

    open func writeObject( x: SQLData? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeObject", methodSig: "(Ljava/sql/SQLData;)V", methodCache: &SQLOutputForward.writeObject_MethodID_30, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeObject( _ _x: SQLData? ) throws /* java.sql.SQLException */ {
        try writeObject( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeInt(int) throws java.sql.SQLException

    private static var writeInt_MethodID_31: jmethodID?

    open func writeInt( x: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeInt", methodSig: "(I)V", methodCache: &SQLOutputForward.writeInt_MethodID_31, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeInt( _ _x: Int ) throws /* java.sql.SQLException */ {
        try writeInt( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeBytes(byte[]) throws java.sql.SQLException

    private static var writeBytes_MethodID_32: jmethodID?

    open func writeBytes( x: [Int8]? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeBytes", methodSig: "([B)V", methodCache: &SQLOutputForward.writeBytes_MethodID_32, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeBytes( _ _x: [Int8]? ) throws /* java.sql.SQLException */ {
        try writeBytes( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeBoolean(boolean) throws java.sql.SQLException

    private static var writeBoolean_MethodID_33: jmethodID?

    open func writeBoolean( x: Bool ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeBoolean", methodSig: "(Z)V", methodCache: &SQLOutputForward.writeBoolean_MethodID_33, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeBoolean( _ _x: Bool ) throws /* java.sql.SQLException */ {
        try writeBoolean( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeByte(byte) throws java.sql.SQLException

    private static var writeByte_MethodID_34: jmethodID?

    open func writeByte( x: Int8 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeByte", methodSig: "(B)V", methodCache: &SQLOutputForward.writeByte_MethodID_34, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeByte( _ _x: Int8 ) throws /* java.sql.SQLException */ {
        try writeByte( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeShort(short) throws java.sql.SQLException

    private static var writeShort_MethodID_35: jmethodID?

    open func writeShort( x: Int16 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeShort", methodSig: "(S)V", methodCache: &SQLOutputForward.writeShort_MethodID_35, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeShort( _ _x: Int16 ) throws /* java.sql.SQLException */ {
        try writeShort( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeLong(long) throws java.sql.SQLException

    private static var writeLong_MethodID_36: jmethodID?

    open func writeLong( x: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeLong", methodSig: "(J)V", methodCache: &SQLOutputForward.writeLong_MethodID_36, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeLong( _ _x: Int64 ) throws /* java.sql.SQLException */ {
        try writeLong( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeDouble(double) throws java.sql.SQLException

    private static var writeDouble_MethodID_37: jmethodID?

    open func writeDouble( x: Double ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeDouble", methodSig: "(D)V", methodCache: &SQLOutputForward.writeDouble_MethodID_37, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeDouble( _ _x: Double ) throws /* java.sql.SQLException */ {
        try writeDouble( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeString(java.lang.String) throws java.sql.SQLException

    private static var writeString_MethodID_38: jmethodID?

    open func writeString( x: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeString", methodSig: "(Ljava/lang/String;)V", methodCache: &SQLOutputForward.writeString_MethodID_38, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeString( _ _x: String? ) throws /* java.sql.SQLException */ {
        try writeString( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeArray(java.sql.Array) throws java.sql.SQLException

    private static var writeArray_MethodID_39: jmethodID?

    open func writeArray( x: Array? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeArray", methodSig: "(Ljava/sql/Array;)V", methodCache: &SQLOutputForward.writeArray_MethodID_39, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeArray( _ _x: Array? ) throws /* java.sql.SQLException */ {
        try writeArray( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeFloat(float) throws java.sql.SQLException

    private static var writeFloat_MethodID_40: jmethodID?

    open func writeFloat( x: Float ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeFloat", methodSig: "(F)V", methodCache: &SQLOutputForward.writeFloat_MethodID_40, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeFloat( _ _x: Float ) throws /* java.sql.SQLException */ {
        try writeFloat( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeBigDecimal(java.math.BigDecimal) throws java.sql.SQLException

    private static var writeBigDecimal_MethodID_41: jmethodID?

    open func writeBigDecimal( x: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeBigDecimal", methodSig: "(Ljava/math/BigDecimal;)V", methodCache: &SQLOutputForward.writeBigDecimal_MethodID_41, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeBigDecimal( _ _x: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try writeBigDecimal( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeDate(java.sql.Date) throws java.sql.SQLException

    private static var writeDate_MethodID_42: jmethodID?

    open func writeDate( x: Date? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeDate", methodSig: "(Ljava/sql/Date;)V", methodCache: &SQLOutputForward.writeDate_MethodID_42, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeDate( _ _x: Date? ) throws /* java.sql.SQLException */ {
        try writeDate( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeTime(java.sql.Time) throws java.sql.SQLException

    private static var writeTime_MethodID_43: jmethodID?

    open func writeTime( x: Time? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeTime", methodSig: "(Ljava/sql/Time;)V", methodCache: &SQLOutputForward.writeTime_MethodID_43, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeTime( _ _x: Time? ) throws /* java.sql.SQLException */ {
        try writeTime( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeTimestamp(java.sql.Timestamp) throws java.sql.SQLException

    private static var writeTimestamp_MethodID_44: jmethodID?

    open func writeTimestamp( x: Timestamp? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeTimestamp", methodSig: "(Ljava/sql/Timestamp;)V", methodCache: &SQLOutputForward.writeTimestamp_MethodID_44, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeTimestamp( _ _x: Timestamp? ) throws /* java.sql.SQLException */ {
        try writeTimestamp( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeCharacterStream(java.io.Reader) throws java.sql.SQLException

    private static var writeCharacterStream_MethodID_45: jmethodID?

    open func writeCharacterStream( x: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeCharacterStream", methodSig: "(Ljava/io/Reader;)V", methodCache: &SQLOutputForward.writeCharacterStream_MethodID_45, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeCharacterStream( _ _x: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try writeCharacterStream( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeAsciiStream(java.io.InputStream) throws java.sql.SQLException

    private static var writeAsciiStream_MethodID_46: jmethodID?

    open func writeAsciiStream( x: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeAsciiStream", methodSig: "(Ljava/io/InputStream;)V", methodCache: &SQLOutputForward.writeAsciiStream_MethodID_46, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeAsciiStream( _ _x: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try writeAsciiStream( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeBinaryStream(java.io.InputStream) throws java.sql.SQLException

    private static var writeBinaryStream_MethodID_47: jmethodID?

    open func writeBinaryStream( x: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeBinaryStream", methodSig: "(Ljava/io/InputStream;)V", methodCache: &SQLOutputForward.writeBinaryStream_MethodID_47, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeBinaryStream( _ _x: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try writeBinaryStream( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeRef(java.sql.Ref) throws java.sql.SQLException

    private static var writeRef_MethodID_48: jmethodID?

    open func writeRef( x: Ref? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeRef", methodSig: "(Ljava/sql/Ref;)V", methodCache: &SQLOutputForward.writeRef_MethodID_48, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeRef( _ _x: Ref? ) throws /* java.sql.SQLException */ {
        try writeRef( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeBlob(java.sql.Blob) throws java.sql.SQLException

    private static var writeBlob_MethodID_49: jmethodID?

    open func writeBlob( x: Blob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeBlob", methodSig: "(Ljava/sql/Blob;)V", methodCache: &SQLOutputForward.writeBlob_MethodID_49, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeBlob( _ _x: Blob? ) throws /* java.sql.SQLException */ {
        try writeBlob( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeClob(java.sql.Clob) throws java.sql.SQLException

    private static var writeClob_MethodID_50: jmethodID?

    open func writeClob( x: Clob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeClob", methodSig: "(Ljava/sql/Clob;)V", methodCache: &SQLOutputForward.writeClob_MethodID_50, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeClob( _ _x: Clob? ) throws /* java.sql.SQLException */ {
        try writeClob( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeStruct(java.sql.Struct) throws java.sql.SQLException

    private static var writeStruct_MethodID_51: jmethodID?

    open func writeStruct( x: Struct? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeStruct", methodSig: "(Ljava/sql/Struct;)V", methodCache: &SQLOutputForward.writeStruct_MethodID_51, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeStruct( _ _x: Struct? ) throws /* java.sql.SQLException */ {
        try writeStruct( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeURL(java.net.URL) throws java.sql.SQLException

    private static var writeURL_MethodID_52: jmethodID?

    open func writeURL( x: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeURL", methodSig: "(Ljava/net/URL;)V", methodCache: &SQLOutputForward.writeURL_MethodID_52, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeURL( _ _x: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try writeURL( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeNString(java.lang.String) throws java.sql.SQLException

    private static var writeNString_MethodID_53: jmethodID?

    open func writeNString( x: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeNString", methodSig: "(Ljava/lang/String;)V", methodCache: &SQLOutputForward.writeNString_MethodID_53, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeNString( _ _x: String? ) throws /* java.sql.SQLException */ {
        try writeNString( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeNClob(java.sql.NClob) throws java.sql.SQLException

    private static var writeNClob_MethodID_54: jmethodID?

    open func writeNClob( x: NClob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeNClob", methodSig: "(Ljava/sql/NClob;)V", methodCache: &SQLOutputForward.writeNClob_MethodID_54, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeNClob( _ _x: NClob? ) throws /* java.sql.SQLException */ {
        try writeNClob( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeRowId(java.sql.RowId) throws java.sql.SQLException

    private static var writeRowId_MethodID_55: jmethodID?

    open func writeRowId( x: RowId? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeRowId", methodSig: "(Ljava/sql/RowId;)V", methodCache: &SQLOutputForward.writeRowId_MethodID_55, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeRowId( _ _x: RowId? ) throws /* java.sql.SQLException */ {
        try writeRowId( x: _x )
    }

    /// public abstract void java.sql.SQLOutput.writeSQLXML(java.sql.SQLXML) throws java.sql.SQLException

    private static var writeSQLXML_MethodID_56: jmethodID?

    open func writeSQLXML( x: SQLXML? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "writeSQLXML", methodSig: "(Ljava/sql/SQLXML;)V", methodCache: &SQLOutputForward.writeSQLXML_MethodID_56, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func writeSQLXML( _ _x: SQLXML? ) throws /* java.sql.SQLException */ {
        try writeSQLXML( x: _x )
    }

}


