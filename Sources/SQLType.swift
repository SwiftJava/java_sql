
import java_swift
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.sql.SQLType ///

public protocol SQLType: JavaProtocol {

    /// public abstract java.lang.String java.sql.SQLType.getName()

    func getName() -> String!

    /// public abstract java.lang.String java.sql.SQLType.getVendor()

    func getVendor() -> String!

    /// public abstract java.lang.Integer java.sql.SQLType.getVendorTypeNumber()

    func getVendorTypeNumber() -> java_lang.Integer!

}


open class SQLTypeForward: JNIObjectForward, SQLType {

    private static var SQLTypeJNIClass: jclass?

    /// public abstract java.lang.String java.sql.SQLType.getName()

    private static var getName_MethodID_4: jmethodID?

    open func getName() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getName", methodSig: "()Ljava/lang/String;", methodCache: &SQLTypeForward.getName_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public abstract java.lang.String java.sql.SQLType.getVendor()

    private static var getVendor_MethodID_5: jmethodID?

    open func getVendor() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getVendor", methodSig: "()Ljava/lang/String;", methodCache: &SQLTypeForward.getVendor_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public abstract java.lang.Integer java.sql.SQLType.getVendorTypeNumber()

    private static var getVendorTypeNumber_MethodID_6: jmethodID?

    open func getVendorTypeNumber() -> java_lang.Integer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getVendorTypeNumber", methodSig: "()Ljava/lang/Integer;", methodCache: &SQLTypeForward.getVendorTypeNumber_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_lang.Integer( javaObject: __return ) : nil
    }


}

