
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface java.sql.SQLXML ///

public protocol SQLXML: JavaProtocol {

    /// public abstract java.io.OutputStream java.sql.SQLXML.setBinaryStream() throws java.sql.SQLException

    /// public abstract void java.sql.SQLXML.setString(java.lang.String) throws java.sql.SQLException

    func setString( value: String? ) throws /* java.sql.SQLException */

    /// public abstract java.io.Writer java.sql.SQLXML.setCharacterStream() throws java.sql.SQLException

    /// public abstract void java.sql.SQLXML.free() throws java.sql.SQLException

    func free() throws /* java.sql.SQLException */

    /// public abstract javax.xml.transform.Source java.sql.SQLXML.getSource(java.lang.Class) throws java.sql.SQLException

    /// public abstract javax.xml.transform.Result java.sql.SQLXML.setResult(java.lang.Class) throws java.sql.SQLException

    /// public abstract java.lang.String java.sql.SQLXML.getString() throws java.sql.SQLException

    func getString() throws /* java.sql.SQLException */ -> String!

    /// public abstract java.io.InputStream java.sql.SQLXML.getBinaryStream() throws java.sql.SQLException

    /// public abstract java.io.Reader java.sql.SQLXML.getCharacterStream() throws java.sql.SQLException

}


open class SQLXMLForward: JNIObjectForward, SQLXML {

    private static var SQLXMLJNIClass: jclass?

    /// public abstract java.io.OutputStream java.sql.SQLXML.setBinaryStream() throws java.sql.SQLException

    /// public abstract void java.sql.SQLXML.setString(java.lang.String) throws java.sql.SQLException

    private static var setString_MethodID_4: jmethodID?

    open func setString( value: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: value, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setString", methodSig: "(Ljava/lang/String;)V", methodCache: &SQLXMLForward.setString_MethodID_4, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setString( _ _value: String? ) throws /* java.sql.SQLException */ {
        try setString( value: _value )
    }

    /// public abstract java.io.Writer java.sql.SQLXML.setCharacterStream() throws java.sql.SQLException

    /// public abstract void java.sql.SQLXML.free() throws java.sql.SQLException

    private static var free_MethodID_5: jmethodID?

    open func free() throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "free", methodSig: "()V", methodCache: &SQLXMLForward.free_MethodID_5, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }


    /// public abstract javax.xml.transform.Source java.sql.SQLXML.getSource(java.lang.Class) throws java.sql.SQLException

    /// public abstract javax.xml.transform.Result java.sql.SQLXML.setResult(java.lang.Class) throws java.sql.SQLException

    /// public abstract java.lang.String java.sql.SQLXML.getString() throws java.sql.SQLException

    private static var getString_MethodID_6: jmethodID?

    open func getString() throws /* java.sql.SQLException */ -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getString", methodSig: "()Ljava/lang/String;", methodCache: &SQLXMLForward.getString_MethodID_6, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.toSwift( type: String(), from: __return )
    }


    /// public abstract java.io.InputStream java.sql.SQLXML.getBinaryStream() throws java.sql.SQLException

    /// public abstract java.io.Reader java.sql.SQLXML.getCharacterStream() throws java.sql.SQLException

}


