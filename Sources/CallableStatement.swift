
import java_swift
import java_lang
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:32 GMT 2016 ///

/// interface java.sql.CallableStatement ///

public protocol CallableStatement: PreparedStatement {

    /// public abstract java.lang.Object java.sql.CallableStatement.getObject(int) throws java.sql.SQLException

    func getObject( arg0: Int ) throws /* java.sql.SQLException */ -> java_lang.JavaObject!
    func getObject( _ _arg0: Int ) throws /* java.sql.SQLException */ -> java_lang.JavaObject!

    /// public abstract java.lang.Object java.sql.CallableStatement.getObject(java.lang.String,java.util.Map) throws java.sql.SQLException

    func getObject( arg0: String?, arg1: java_util.Map? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject!
    func getObject( _ _arg0: String?, _ _arg1: java_util.Map? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject!

    /// public abstract java.lang.Object java.sql.CallableStatement.getObject(java.lang.String) throws java.sql.SQLException

    func getObject( arg0: String? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject!
    func getObject( _ _arg0: String? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject!

    /// public abstract java.lang.Object java.sql.CallableStatement.getObject(int,java.util.Map) throws java.sql.SQLException

    func getObject( arg0: Int, arg1: java_util.Map? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject!
    func getObject( _ _arg0: Int, _ _arg1: java_util.Map? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject!

    /// public abstract boolean java.sql.CallableStatement.getBoolean(java.lang.String) throws java.sql.SQLException

    func getBoolean( arg0: String? ) throws /* java.sql.SQLException */ -> Bool
    func getBoolean( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Bool

    /// public abstract boolean java.sql.CallableStatement.getBoolean(int) throws java.sql.SQLException

    func getBoolean( arg0: Int ) throws /* java.sql.SQLException */ -> Bool
    func getBoolean( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Bool

    /// public abstract byte java.sql.CallableStatement.getByte(int) throws java.sql.SQLException

    func getByte( arg0: Int ) throws /* java.sql.SQLException */ -> Int8
    func getByte( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Int8

    /// public abstract byte java.sql.CallableStatement.getByte(java.lang.String) throws java.sql.SQLException

    func getByte( arg0: String? ) throws /* java.sql.SQLException */ -> Int8
    func getByte( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Int8

    /// public abstract short java.sql.CallableStatement.getShort(int) throws java.sql.SQLException

    func getShort( arg0: Int ) throws /* java.sql.SQLException */ -> Int16
    func getShort( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Int16

    /// public abstract short java.sql.CallableStatement.getShort(java.lang.String) throws java.sql.SQLException

    func getShort( arg0: String? ) throws /* java.sql.SQLException */ -> Int16
    func getShort( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Int16

    /// public abstract int java.sql.CallableStatement.getInt(java.lang.String) throws java.sql.SQLException

    func getInt( arg0: String? ) throws /* java.sql.SQLException */ -> Int
    func getInt( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Int

    /// public abstract int java.sql.CallableStatement.getInt(int) throws java.sql.SQLException

    func getInt( arg0: Int ) throws /* java.sql.SQLException */ -> Int
    func getInt( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Int

    /// public abstract long java.sql.CallableStatement.getLong(int) throws java.sql.SQLException

    func getLong( arg0: Int ) throws /* java.sql.SQLException */ -> Int64
    func getLong( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Int64

    /// public abstract long java.sql.CallableStatement.getLong(java.lang.String) throws java.sql.SQLException

    func getLong( arg0: String? ) throws /* java.sql.SQLException */ -> Int64
    func getLong( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Int64

    /// public abstract float java.sql.CallableStatement.getFloat(int) throws java.sql.SQLException

    func getFloat( arg0: Int ) throws /* java.sql.SQLException */ -> Float
    func getFloat( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Float

    /// public abstract float java.sql.CallableStatement.getFloat(java.lang.String) throws java.sql.SQLException

    func getFloat( arg0: String? ) throws /* java.sql.SQLException */ -> Float
    func getFloat( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Float

    /// public abstract double java.sql.CallableStatement.getDouble(java.lang.String) throws java.sql.SQLException

    func getDouble( arg0: String? ) throws /* java.sql.SQLException */ -> Double
    func getDouble( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Double

    /// public abstract double java.sql.CallableStatement.getDouble(int) throws java.sql.SQLException

    func getDouble( arg0: Int ) throws /* java.sql.SQLException */ -> Double
    func getDouble( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Double

    /// public abstract byte[] java.sql.CallableStatement.getBytes(int) throws java.sql.SQLException

    func getBytes( arg0: Int ) throws /* java.sql.SQLException */ -> [Int8]!
    func getBytes( _ _arg0: Int ) throws /* java.sql.SQLException */ -> [Int8]!

    /// public abstract byte[] java.sql.CallableStatement.getBytes(java.lang.String) throws java.sql.SQLException

    func getBytes( arg0: String? ) throws /* java.sql.SQLException */ -> [Int8]!
    func getBytes( _ _arg0: String? ) throws /* java.sql.SQLException */ -> [Int8]!

    /// public abstract java.sql.Array java.sql.CallableStatement.getArray(java.lang.String) throws java.sql.SQLException

    func getArray( arg0: String? ) throws /* java.sql.SQLException */ -> Array!
    func getArray( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Array!

    /// public abstract java.sql.Array java.sql.CallableStatement.getArray(int) throws java.sql.SQLException

    func getArray( arg0: Int ) throws /* java.sql.SQLException */ -> Array!
    func getArray( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Array!

    /// public abstract java.net.URL java.sql.CallableStatement.getURL(int) throws java.sql.SQLException

    /// public abstract java.net.URL java.sql.CallableStatement.getURL(java.lang.String) throws java.sql.SQLException

    /// public abstract void java.sql.CallableStatement.setBoolean(java.lang.String,boolean) throws java.sql.SQLException

    func setBoolean( arg0: String?, arg1: Bool ) throws /* java.sql.SQLException */
    func setBoolean( _ _arg0: String?, _ _arg1: Bool ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setByte(java.lang.String,byte) throws java.sql.SQLException

    func setByte( arg0: String?, arg1: Int8 ) throws /* java.sql.SQLException */
    func setByte( _ _arg0: String?, _ _arg1: Int8 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setShort(java.lang.String,short) throws java.sql.SQLException

    func setShort( arg0: String?, arg1: Int16 ) throws /* java.sql.SQLException */
    func setShort( _ _arg0: String?, _ _arg1: Int16 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setInt(java.lang.String,int) throws java.sql.SQLException

    func setInt( arg0: String?, arg1: Int ) throws /* java.sql.SQLException */
    func setInt( _ _arg0: String?, _ _arg1: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setLong(java.lang.String,long) throws java.sql.SQLException

    func setLong( arg0: String?, arg1: Int64 ) throws /* java.sql.SQLException */
    func setLong( _ _arg0: String?, _ _arg1: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setFloat(java.lang.String,float) throws java.sql.SQLException

    func setFloat( arg0: String?, arg1: Float ) throws /* java.sql.SQLException */
    func setFloat( _ _arg0: String?, _ _arg1: Float ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setDouble(java.lang.String,double) throws java.sql.SQLException

    func setDouble( arg0: String?, arg1: Double ) throws /* java.sql.SQLException */
    func setDouble( _ _arg0: String?, _ _arg1: Double ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setTimestamp(java.lang.String,java.sql.Timestamp) throws java.sql.SQLException

    func setTimestamp( arg0: String?, arg1: Timestamp? ) throws /* java.sql.SQLException */
    func setTimestamp( _ _arg0: String?, _ _arg1: Timestamp? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar) throws java.sql.SQLException

    func setTimestamp( arg0: String?, arg1: Timestamp?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */
    func setTimestamp( _ _arg0: String?, _ _arg1: Timestamp?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */

    /// public abstract java.sql.Ref java.sql.CallableStatement.getRef(java.lang.String) throws java.sql.SQLException

    func getRef( arg0: String? ) throws /* java.sql.SQLException */ -> Ref!
    func getRef( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Ref!

    /// public abstract java.sql.Ref java.sql.CallableStatement.getRef(int) throws java.sql.SQLException

    func getRef( arg0: Int ) throws /* java.sql.SQLException */ -> Ref!
    func getRef( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Ref!

    /// public abstract java.lang.String java.sql.CallableStatement.getString(java.lang.String) throws java.sql.SQLException

    func getString( arg0: String? ) throws /* java.sql.SQLException */ -> String!
    func getString( _ _arg0: String? ) throws /* java.sql.SQLException */ -> String!

    /// public abstract java.lang.String java.sql.CallableStatement.getString(int) throws java.sql.SQLException

    func getString( arg0: Int ) throws /* java.sql.SQLException */ -> String!
    func getString( _ _arg0: Int ) throws /* java.sql.SQLException */ -> String!

    /// public abstract void java.sql.CallableStatement.setURL(java.lang.String,java.net.URL) throws java.sql.SQLException

    func setURL( arg0: String?, arg1: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setURL( _ _arg0: String?, _ _arg1: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setTime(java.lang.String,java.sql.Time,java.util.Calendar) throws java.sql.SQLException

    func setTime( arg0: String?, arg1: Time?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */
    func setTime( _ _arg0: String?, _ _arg1: Time?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setTime(java.lang.String,java.sql.Time) throws java.sql.SQLException

    func setTime( arg0: String?, arg1: Time? ) throws /* java.sql.SQLException */
    func setTime( _ _arg0: String?, _ _arg1: Time? ) throws /* java.sql.SQLException */

    /// public abstract java.sql.Time java.sql.CallableStatement.getTime(java.lang.String) throws java.sql.SQLException

    func getTime( arg0: String? ) throws /* java.sql.SQLException */ -> Time!
    func getTime( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Time!

    /// public abstract java.sql.Time java.sql.CallableStatement.getTime(int) throws java.sql.SQLException

    func getTime( arg0: Int ) throws /* java.sql.SQLException */ -> Time!
    func getTime( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Time!

    /// public abstract java.sql.Time java.sql.CallableStatement.getTime(int,java.util.Calendar) throws java.sql.SQLException

    func getTime( arg0: Int, arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Time!
    func getTime( _ _arg0: Int, _ _arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Time!

    /// public abstract java.sql.Time java.sql.CallableStatement.getTime(java.lang.String,java.util.Calendar) throws java.sql.SQLException

    func getTime( arg0: String?, arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Time!
    func getTime( _ _arg0: String?, _ _arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Time!

    /// public abstract java.sql.Date java.sql.CallableStatement.getDate(int,java.util.Calendar) throws java.sql.SQLException

    func getDate( arg0: Int, arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Date!
    func getDate( _ _arg0: Int, _ _arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Date!

    /// public abstract java.sql.Date java.sql.CallableStatement.getDate(java.lang.String) throws java.sql.SQLException

    func getDate( arg0: String? ) throws /* java.sql.SQLException */ -> Date!
    func getDate( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Date!

    /// public abstract java.sql.Date java.sql.CallableStatement.getDate(int) throws java.sql.SQLException

    func getDate( arg0: Int ) throws /* java.sql.SQLException */ -> Date!
    func getDate( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Date!

    /// public abstract java.sql.Date java.sql.CallableStatement.getDate(java.lang.String,java.util.Calendar) throws java.sql.SQLException

    func getDate( arg0: String?, arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Date!
    func getDate( _ _arg0: String?, _ _arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Date!

    /// public abstract java.sql.Timestamp java.sql.CallableStatement.getTimestamp(int) throws java.sql.SQLException

    func getTimestamp( arg0: Int ) throws /* java.sql.SQLException */ -> Timestamp!
    func getTimestamp( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Timestamp!

    /// public abstract java.sql.Timestamp java.sql.CallableStatement.getTimestamp(int,java.util.Calendar) throws java.sql.SQLException

    func getTimestamp( arg0: Int, arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Timestamp!
    func getTimestamp( _ _arg0: Int, _ _arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Timestamp!

    /// public abstract java.sql.Timestamp java.sql.CallableStatement.getTimestamp(java.lang.String,java.util.Calendar) throws java.sql.SQLException

    func getTimestamp( arg0: String?, arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Timestamp!
    func getTimestamp( _ _arg0: String?, _ _arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Timestamp!

    /// public abstract java.sql.Timestamp java.sql.CallableStatement.getTimestamp(java.lang.String) throws java.sql.SQLException

    func getTimestamp( arg0: String? ) throws /* java.sql.SQLException */ -> Timestamp!
    func getTimestamp( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Timestamp!

    /// public abstract void java.sql.CallableStatement.setDate(java.lang.String,java.sql.Date) throws java.sql.SQLException

    func setDate( arg0: String?, arg1: Date? ) throws /* java.sql.SQLException */
    func setDate( _ _arg0: String?, _ _arg1: Date? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setDate(java.lang.String,java.sql.Date,java.util.Calendar) throws java.sql.SQLException

    func setDate( arg0: String?, arg1: Date?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */
    func setDate( _ _arg0: String?, _ _arg1: Date?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */

    /// public abstract boolean java.sql.CallableStatement.wasNull() throws java.sql.SQLException

    func wasNull() throws /* java.sql.SQLException */ -> Bool

    /// public abstract java.math.BigDecimal java.sql.CallableStatement.getBigDecimal(int) throws java.sql.SQLException

    /// public abstract java.math.BigDecimal java.sql.CallableStatement.getBigDecimal(int,int) throws java.sql.SQLException

    /// public abstract java.math.BigDecimal java.sql.CallableStatement.getBigDecimal(java.lang.String) throws java.sql.SQLException

    /// public abstract java.io.Reader java.sql.CallableStatement.getCharacterStream(java.lang.String) throws java.sql.SQLException

    /// public abstract java.io.Reader java.sql.CallableStatement.getCharacterStream(int) throws java.sql.SQLException

    /// public abstract java.sql.Blob java.sql.CallableStatement.getBlob(java.lang.String) throws java.sql.SQLException

    func getBlob( arg0: String? ) throws /* java.sql.SQLException */ -> Blob!
    func getBlob( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Blob!

    /// public abstract java.sql.Blob java.sql.CallableStatement.getBlob(int) throws java.sql.SQLException

    func getBlob( arg0: Int ) throws /* java.sql.SQLException */ -> Blob!
    func getBlob( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Blob!

    /// public abstract java.sql.Clob java.sql.CallableStatement.getClob(int) throws java.sql.SQLException

    func getClob( arg0: Int ) throws /* java.sql.SQLException */ -> Clob!
    func getClob( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Clob!

    /// public abstract java.sql.Clob java.sql.CallableStatement.getClob(java.lang.String) throws java.sql.SQLException

    func getClob( arg0: String? ) throws /* java.sql.SQLException */ -> Clob!
    func getClob( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Clob!

    /// public abstract java.sql.RowId java.sql.CallableStatement.getRowId(int) throws java.sql.SQLException

    func getRowId( arg0: Int ) throws /* java.sql.SQLException */ -> RowId!
    func getRowId( _ _arg0: Int ) throws /* java.sql.SQLException */ -> RowId!

    /// public abstract java.sql.RowId java.sql.CallableStatement.getRowId(java.lang.String) throws java.sql.SQLException

    func getRowId( arg0: String? ) throws /* java.sql.SQLException */ -> RowId!
    func getRowId( _ _arg0: String? ) throws /* java.sql.SQLException */ -> RowId!

    /// public abstract java.sql.NClob java.sql.CallableStatement.getNClob(java.lang.String) throws java.sql.SQLException

    func getNClob( arg0: String? ) throws /* java.sql.SQLException */ -> NClob!
    func getNClob( _ _arg0: String? ) throws /* java.sql.SQLException */ -> NClob!

    /// public abstract java.sql.NClob java.sql.CallableStatement.getNClob(int) throws java.sql.SQLException

    func getNClob( arg0: Int ) throws /* java.sql.SQLException */ -> NClob!
    func getNClob( _ _arg0: Int ) throws /* java.sql.SQLException */ -> NClob!

    /// public abstract java.sql.SQLXML java.sql.CallableStatement.getSQLXML(java.lang.String) throws java.sql.SQLException

    func getSQLXML( arg0: String? ) throws /* java.sql.SQLException */ -> SQLXML!
    func getSQLXML( _ _arg0: String? ) throws /* java.sql.SQLException */ -> SQLXML!

    /// public abstract java.sql.SQLXML java.sql.CallableStatement.getSQLXML(int) throws java.sql.SQLException

    func getSQLXML( arg0: Int ) throws /* java.sql.SQLException */ -> SQLXML!
    func getSQLXML( _ _arg0: Int ) throws /* java.sql.SQLException */ -> SQLXML!

    /// public abstract java.lang.String java.sql.CallableStatement.getNString(int) throws java.sql.SQLException

    func getNString( arg0: Int ) throws /* java.sql.SQLException */ -> String!
    func getNString( _ _arg0: Int ) throws /* java.sql.SQLException */ -> String!

    /// public abstract java.lang.String java.sql.CallableStatement.getNString(java.lang.String) throws java.sql.SQLException

    func getNString( arg0: String? ) throws /* java.sql.SQLException */ -> String!
    func getNString( _ _arg0: String? ) throws /* java.sql.SQLException */ -> String!

    /// public abstract java.io.Reader java.sql.CallableStatement.getNCharacterStream(java.lang.String) throws java.sql.SQLException

    /// public abstract java.io.Reader java.sql.CallableStatement.getNCharacterStream(int) throws java.sql.SQLException

    /// public abstract void java.sql.CallableStatement.setBytes(java.lang.String,byte[]) throws java.sql.SQLException

    func setBytes( arg0: String?, arg1: [Int8]? ) throws /* java.sql.SQLException */
    func setBytes( _ _arg0: String?, _ _arg1: [Int8]? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setBinaryStream(java.lang.String,java.io.InputStream,long) throws java.sql.SQLException

    func setBinaryStream( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */
    func setBinaryStream( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setBinaryStream(java.lang.String,java.io.InputStream,int) throws java.sql.SQLException

    func setBinaryStream( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */
    func setBinaryStream( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setBinaryStream(java.lang.String,java.io.InputStream) throws java.sql.SQLException

    func setBinaryStream( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setBinaryStream( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.registerOutParameter(int,int,java.lang.String) throws java.sql.SQLException

    func registerOutParameter( arg0: Int, arg1: Int, arg2: String? ) throws /* java.sql.SQLException */
    func registerOutParameter( _ _arg0: Int, _ _arg1: Int, _ _arg2: String? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.registerOutParameter(int,int,int) throws java.sql.SQLException

    func registerOutParameter( arg0: Int, arg1: Int, arg2: Int ) throws /* java.sql.SQLException */
    func registerOutParameter( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.registerOutParameter(int,int) throws java.sql.SQLException

    func registerOutParameter( arg0: Int, arg1: Int ) throws /* java.sql.SQLException */
    func registerOutParameter( _ _arg0: Int, _ _arg1: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.registerOutParameter(java.lang.String,int) throws java.sql.SQLException

    func registerOutParameter( arg0: String?, arg1: Int ) throws /* java.sql.SQLException */
    func registerOutParameter( _ _arg0: String?, _ _arg1: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.registerOutParameter(java.lang.String,int,int) throws java.sql.SQLException

    func registerOutParameter( arg0: String?, arg1: Int, arg2: Int ) throws /* java.sql.SQLException */
    func registerOutParameter( _ _arg0: String?, _ _arg1: Int, _ _arg2: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.registerOutParameter(java.lang.String,int,java.lang.String) throws java.sql.SQLException

    func registerOutParameter( arg0: String?, arg1: Int, arg2: String? ) throws /* java.sql.SQLException */
    func registerOutParameter( _ _arg0: String?, _ _arg1: Int, _ _arg2: String? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setNull(java.lang.String,int) throws java.sql.SQLException

    func setNull( arg0: String?, arg1: Int ) throws /* java.sql.SQLException */
    func setNull( _ _arg0: String?, _ _arg1: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setNull(java.lang.String,int,java.lang.String) throws java.sql.SQLException

    func setNull( arg0: String?, arg1: Int, arg2: String? ) throws /* java.sql.SQLException */
    func setNull( _ _arg0: String?, _ _arg1: Int, _ _arg2: String? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setBigDecimal(java.lang.String,java.math.BigDecimal) throws java.sql.SQLException

    func setBigDecimal( arg0: String?, arg1: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setBigDecimal( _ _arg0: String?, _ _arg1: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setString(java.lang.String,java.lang.String) throws java.sql.SQLException

    func setString( arg0: String?, arg1: String? ) throws /* java.sql.SQLException */
    func setString( _ _arg0: String?, _ _arg1: String? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setAsciiStream(java.lang.String,java.io.InputStream,long) throws java.sql.SQLException

    func setAsciiStream( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */
    func setAsciiStream( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setAsciiStream(java.lang.String,java.io.InputStream,int) throws java.sql.SQLException

    func setAsciiStream( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */
    func setAsciiStream( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setAsciiStream(java.lang.String,java.io.InputStream) throws java.sql.SQLException

    func setAsciiStream( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setAsciiStream( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object) throws java.sql.SQLException

    func setObject( arg0: String?, arg1: java_lang.JavaObject? ) throws /* java.sql.SQLException */
    func setObject( _ _arg0: String?, _ _arg1: java_lang.JavaObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object,int) throws java.sql.SQLException

    func setObject( arg0: String?, arg1: java_lang.JavaObject?, arg2: Int ) throws /* java.sql.SQLException */
    func setObject( _ _arg0: String?, _ _arg1: java_lang.JavaObject?, _ _arg2: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object,int,int) throws java.sql.SQLException

    func setObject( arg0: String?, arg1: java_lang.JavaObject?, arg2: Int, arg3: Int ) throws /* java.sql.SQLException */
    func setObject( _ _arg0: String?, _ _arg1: java_lang.JavaObject?, _ _arg2: Int, _ _arg3: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setCharacterStream(java.lang.String,java.io.Reader,long) throws java.sql.SQLException

    func setCharacterStream( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */
    func setCharacterStream( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setCharacterStream(java.lang.String,java.io.Reader) throws java.sql.SQLException

    func setCharacterStream( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setCharacterStream( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setCharacterStream(java.lang.String,java.io.Reader,int) throws java.sql.SQLException

    func setCharacterStream( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */
    func setCharacterStream( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setRowId(java.lang.String,java.sql.RowId) throws java.sql.SQLException

    func setRowId( arg0: String?, arg1: RowId? ) throws /* java.sql.SQLException */
    func setRowId( _ _arg0: String?, _ _arg1: RowId? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setNString(java.lang.String,java.lang.String) throws java.sql.SQLException

    func setNString( arg0: String?, arg1: String? ) throws /* java.sql.SQLException */
    func setNString( _ _arg0: String?, _ _arg1: String? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setNCharacterStream(java.lang.String,java.io.Reader) throws java.sql.SQLException

    func setNCharacterStream( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setNCharacterStream( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setNCharacterStream(java.lang.String,java.io.Reader,long) throws java.sql.SQLException

    func setNCharacterStream( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */
    func setNCharacterStream( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setNClob(java.lang.String,java.io.Reader) throws java.sql.SQLException

    func setNClob( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setNClob( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setNClob(java.lang.String,java.io.Reader,long) throws java.sql.SQLException

    func setNClob( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */
    func setNClob( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setNClob(java.lang.String,java.sql.NClob) throws java.sql.SQLException

    func setNClob( arg0: String?, arg1: NClob? ) throws /* java.sql.SQLException */
    func setNClob( _ _arg0: String?, _ _arg1: NClob? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setClob(java.lang.String,java.io.Reader,long) throws java.sql.SQLException

    func setClob( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */
    func setClob( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setClob(java.lang.String,java.io.Reader) throws java.sql.SQLException

    func setClob( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setClob( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setClob(java.lang.String,java.sql.Clob) throws java.sql.SQLException

    func setClob( arg0: String?, arg1: Clob? ) throws /* java.sql.SQLException */
    func setClob( _ _arg0: String?, _ _arg1: Clob? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setBlob(java.lang.String,java.sql.Blob) throws java.sql.SQLException

    func setBlob( arg0: String?, arg1: Blob? ) throws /* java.sql.SQLException */
    func setBlob( _ _arg0: String?, _ _arg1: Blob? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setBlob(java.lang.String,java.io.InputStream) throws java.sql.SQLException

    func setBlob( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */
    func setBlob( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setBlob(java.lang.String,java.io.InputStream,long) throws java.sql.SQLException

    func setBlob( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */
    func setBlob( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */

    /// public abstract void java.sql.CallableStatement.setSQLXML(java.lang.String,java.sql.SQLXML) throws java.sql.SQLException

    func setSQLXML( arg0: String?, arg1: SQLXML? ) throws /* java.sql.SQLException */
    func setSQLXML( _ _arg0: String?, _ _arg1: SQLXML? ) throws /* java.sql.SQLException */

}

open class CallableStatementForward: PreparedStatementForward, CallableStatement {

    private static var CallableStatementJNIClass: jclass?

    /// public abstract java.lang.Object java.sql.CallableStatement.getObject(int) throws java.sql.SQLException

    private static var getObject_MethodID_103: jmethodID?

    open func getObject( arg0: Int ) throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getObject", methodSig: "(I)Ljava/lang/Object;", methodCache: &CallableStatementForward.getObject_MethodID_103, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func getObject( _ _arg0: Int ) throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        return try getObject( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.sql.CallableStatement.getObject(java.lang.String,java.util.Map) throws java.sql.SQLException

    private static var getObject_MethodID_104: jmethodID?

    open func getObject( arg0: String?, arg1: java_util.Map? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getObject", methodSig: "(Ljava/lang/String;Ljava/util/Map;)Ljava/lang/Object;", methodCache: &CallableStatementForward.getObject_MethodID_104, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func getObject( _ _arg0: String?, _ _arg1: java_util.Map? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        return try getObject( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.lang.Object java.sql.CallableStatement.getObject(java.lang.String) throws java.sql.SQLException

    private static var getObject_MethodID_105: jmethodID?

    open func getObject( arg0: String? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getObject", methodSig: "(Ljava/lang/String;)Ljava/lang/Object;", methodCache: &CallableStatementForward.getObject_MethodID_105, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func getObject( _ _arg0: String? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        return try getObject( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.sql.CallableStatement.getObject(int,java.util.Map) throws java.sql.SQLException

    private static var getObject_MethodID_106: jmethodID?

    open func getObject( arg0: Int, arg1: java_util.Map? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getObject", methodSig: "(ILjava/util/Map;)Ljava/lang/Object;", methodCache: &CallableStatementForward.getObject_MethodID_106, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func getObject( _ _arg0: Int, _ _arg1: java_util.Map? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        return try getObject( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract boolean java.sql.CallableStatement.getBoolean(java.lang.String) throws java.sql.SQLException

    private static var getBoolean_MethodID_107: jmethodID?

    open func getBoolean( arg0: String? ) throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getBoolean", methodSig: "(Ljava/lang/String;)Z", methodCache: &CallableStatementForward.getBoolean_MethodID_107, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func getBoolean( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Bool {
        return try getBoolean( arg0: _arg0 )
    }

    /// public abstract boolean java.sql.CallableStatement.getBoolean(int) throws java.sql.SQLException

    private static var getBoolean_MethodID_108: jmethodID?

    open func getBoolean( arg0: Int ) throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getBoolean", methodSig: "(I)Z", methodCache: &CallableStatementForward.getBoolean_MethodID_108, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    open func getBoolean( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Bool {
        return try getBoolean( arg0: _arg0 )
    }

    /// public abstract byte java.sql.CallableStatement.getByte(int) throws java.sql.SQLException

    private static var getByte_MethodID_109: jmethodID?

    open func getByte( arg0: Int ) throws /* java.sql.SQLException */ -> Int8 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallByteMethod( object: javaObject, methodName: "getByte", methodSig: "(I)B", methodCache: &CallableStatementForward.getByte_MethodID_109, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int8(), from: __return )
    }

    open func getByte( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Int8 {
        return try getByte( arg0: _arg0 )
    }

    /// public abstract byte java.sql.CallableStatement.getByte(java.lang.String) throws java.sql.SQLException

    private static var getByte_MethodID_110: jmethodID?

    open func getByte( arg0: String? ) throws /* java.sql.SQLException */ -> Int8 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallByteMethod( object: javaObject, methodName: "getByte", methodSig: "(Ljava/lang/String;)B", methodCache: &CallableStatementForward.getByte_MethodID_110, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int8(), from: __return )
    }

    open func getByte( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Int8 {
        return try getByte( arg0: _arg0 )
    }

    /// public abstract short java.sql.CallableStatement.getShort(int) throws java.sql.SQLException

    private static var getShort_MethodID_111: jmethodID?

    open func getShort( arg0: Int ) throws /* java.sql.SQLException */ -> Int16 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallShortMethod( object: javaObject, methodName: "getShort", methodSig: "(I)S", methodCache: &CallableStatementForward.getShort_MethodID_111, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int16(), from: __return )
    }

    open func getShort( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Int16 {
        return try getShort( arg0: _arg0 )
    }

    /// public abstract short java.sql.CallableStatement.getShort(java.lang.String) throws java.sql.SQLException

    private static var getShort_MethodID_112: jmethodID?

    open func getShort( arg0: String? ) throws /* java.sql.SQLException */ -> Int16 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallShortMethod( object: javaObject, methodName: "getShort", methodSig: "(Ljava/lang/String;)S", methodCache: &CallableStatementForward.getShort_MethodID_112, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int16(), from: __return )
    }

    open func getShort( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Int16 {
        return try getShort( arg0: _arg0 )
    }

    /// public abstract int java.sql.CallableStatement.getInt(java.lang.String) throws java.sql.SQLException

    private static var getInt_MethodID_113: jmethodID?

    open func getInt( arg0: String? ) throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getInt", methodSig: "(Ljava/lang/String;)I", methodCache: &CallableStatementForward.getInt_MethodID_113, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getInt( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Int {
        return try getInt( arg0: _arg0 )
    }

    /// public abstract int java.sql.CallableStatement.getInt(int) throws java.sql.SQLException

    private static var getInt_MethodID_114: jmethodID?

    open func getInt( arg0: Int ) throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getInt", methodSig: "(I)I", methodCache: &CallableStatementForward.getInt_MethodID_114, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }

    open func getInt( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Int {
        return try getInt( arg0: _arg0 )
    }

    /// public abstract long java.sql.CallableStatement.getLong(int) throws java.sql.SQLException

    private static var getLong_MethodID_115: jmethodID?

    open func getLong( arg0: Int ) throws /* java.sql.SQLException */ -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getLong", methodSig: "(I)J", methodCache: &CallableStatementForward.getLong_MethodID_115, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func getLong( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Int64 {
        return try getLong( arg0: _arg0 )
    }

    /// public abstract long java.sql.CallableStatement.getLong(java.lang.String) throws java.sql.SQLException

    private static var getLong_MethodID_116: jmethodID?

    open func getLong( arg0: String? ) throws /* java.sql.SQLException */ -> Int64 {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallLongMethod( object: javaObject, methodName: "getLong", methodSig: "(Ljava/lang/String;)J", methodCache: &CallableStatementForward.getLong_MethodID_116, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int64(), from: __return )
    }

    open func getLong( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Int64 {
        return try getLong( arg0: _arg0 )
    }

    /// public abstract float java.sql.CallableStatement.getFloat(int) throws java.sql.SQLException

    private static var getFloat_MethodID_117: jmethodID?

    open func getFloat( arg0: Int ) throws /* java.sql.SQLException */ -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getFloat", methodSig: "(I)F", methodCache: &CallableStatementForward.getFloat_MethodID_117, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Float(), from: __return )
    }

    open func getFloat( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Float {
        return try getFloat( arg0: _arg0 )
    }

    /// public abstract float java.sql.CallableStatement.getFloat(java.lang.String) throws java.sql.SQLException

    private static var getFloat_MethodID_118: jmethodID?

    open func getFloat( arg0: String? ) throws /* java.sql.SQLException */ -> Float {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getFloat", methodSig: "(Ljava/lang/String;)F", methodCache: &CallableStatementForward.getFloat_MethodID_118, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Float(), from: __return )
    }

    open func getFloat( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Float {
        return try getFloat( arg0: _arg0 )
    }

    /// public abstract double java.sql.CallableStatement.getDouble(java.lang.String) throws java.sql.SQLException

    private static var getDouble_MethodID_119: jmethodID?

    open func getDouble( arg0: String? ) throws /* java.sql.SQLException */ -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getDouble", methodSig: "(Ljava/lang/String;)D", methodCache: &CallableStatementForward.getDouble_MethodID_119, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Double(), from: __return )
    }

    open func getDouble( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Double {
        return try getDouble( arg0: _arg0 )
    }

    /// public abstract double java.sql.CallableStatement.getDouble(int) throws java.sql.SQLException

    private static var getDouble_MethodID_120: jmethodID?

    open func getDouble( arg0: Int ) throws /* java.sql.SQLException */ -> Double {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallDoubleMethod( object: javaObject, methodName: "getDouble", methodSig: "(I)D", methodCache: &CallableStatementForward.getDouble_MethodID_120, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Double(), from: __return )
    }

    open func getDouble( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Double {
        return try getDouble( arg0: _arg0 )
    }

    /// public abstract byte[] java.sql.CallableStatement.getBytes(int) throws java.sql.SQLException

    private static var getBytes_MethodID_121: jmethodID?

    open func getBytes( arg0: Int ) throws /* java.sql.SQLException */ -> [Int8]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBytes", methodSig: "(I)[B", methodCache: &CallableStatementForward.getBytes_MethodID_121, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: [Int8](), from: __return )
    }

    open func getBytes( _ _arg0: Int ) throws /* java.sql.SQLException */ -> [Int8]! {
        return try getBytes( arg0: _arg0 )
    }

    /// public abstract byte[] java.sql.CallableStatement.getBytes(java.lang.String) throws java.sql.SQLException

    private static var getBytes_MethodID_122: jmethodID?

    open func getBytes( arg0: String? ) throws /* java.sql.SQLException */ -> [Int8]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBytes", methodSig: "(Ljava/lang/String;)[B", methodCache: &CallableStatementForward.getBytes_MethodID_122, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: [Int8](), from: __return )
    }

    open func getBytes( _ _arg0: String? ) throws /* java.sql.SQLException */ -> [Int8]! {
        return try getBytes( arg0: _arg0 )
    }

    /// public abstract java.sql.Array java.sql.CallableStatement.getArray(java.lang.String) throws java.sql.SQLException

    private static var getArray_MethodID_123: jmethodID?

    open func getArray( arg0: String? ) throws /* java.sql.SQLException */ -> Array! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getArray", methodSig: "(Ljava/lang/String;)Ljava/sql/Array;", methodCache: &CallableStatementForward.getArray_MethodID_123, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ArrayForward( javaObject: __return ) : nil
    }

    open func getArray( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Array! {
        return try getArray( arg0: _arg0 )
    }

    /// public abstract java.sql.Array java.sql.CallableStatement.getArray(int) throws java.sql.SQLException

    private static var getArray_MethodID_124: jmethodID?

    open func getArray( arg0: Int ) throws /* java.sql.SQLException */ -> Array! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getArray", methodSig: "(I)Ljava/sql/Array;", methodCache: &CallableStatementForward.getArray_MethodID_124, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ArrayForward( javaObject: __return ) : nil
    }

    open func getArray( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Array! {
        return try getArray( arg0: _arg0 )
    }

    /// public abstract java.net.URL java.sql.CallableStatement.getURL(int) throws java.sql.SQLException

    /// public abstract java.net.URL java.sql.CallableStatement.getURL(java.lang.String) throws java.sql.SQLException

    /// public abstract void java.sql.CallableStatement.setBoolean(java.lang.String,boolean) throws java.sql.SQLException

    private static var setBoolean_MethodID_125: jmethodID?

    open func setBoolean( arg0: String?, arg1: Bool ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBoolean", methodSig: "(Ljava/lang/String;Z)V", methodCache: &CallableStatementForward.setBoolean_MethodID_125, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBoolean( _ _arg0: String?, _ _arg1: Bool ) throws /* java.sql.SQLException */ {
        try setBoolean( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setByte(java.lang.String,byte) throws java.sql.SQLException

    private static var setByte_MethodID_126: jmethodID?

    open func setByte( arg0: String?, arg1: Int8 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setByte", methodSig: "(Ljava/lang/String;B)V", methodCache: &CallableStatementForward.setByte_MethodID_126, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setByte( _ _arg0: String?, _ _arg1: Int8 ) throws /* java.sql.SQLException */ {
        try setByte( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setShort(java.lang.String,short) throws java.sql.SQLException

    private static var setShort_MethodID_127: jmethodID?

    open func setShort( arg0: String?, arg1: Int16 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setShort", methodSig: "(Ljava/lang/String;S)V", methodCache: &CallableStatementForward.setShort_MethodID_127, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setShort( _ _arg0: String?, _ _arg1: Int16 ) throws /* java.sql.SQLException */ {
        try setShort( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setInt(java.lang.String,int) throws java.sql.SQLException

    private static var setInt_MethodID_128: jmethodID?

    open func setInt( arg0: String?, arg1: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setInt", methodSig: "(Ljava/lang/String;I)V", methodCache: &CallableStatementForward.setInt_MethodID_128, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setInt( _ _arg0: String?, _ _arg1: Int ) throws /* java.sql.SQLException */ {
        try setInt( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setLong(java.lang.String,long) throws java.sql.SQLException

    private static var setLong_MethodID_129: jmethodID?

    open func setLong( arg0: String?, arg1: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLong", methodSig: "(Ljava/lang/String;J)V", methodCache: &CallableStatementForward.setLong_MethodID_129, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setLong( _ _arg0: String?, _ _arg1: Int64 ) throws /* java.sql.SQLException */ {
        try setLong( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setFloat(java.lang.String,float) throws java.sql.SQLException

    private static var setFloat_MethodID_130: jmethodID?

    open func setFloat( arg0: String?, arg1: Float ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFloat", methodSig: "(Ljava/lang/String;F)V", methodCache: &CallableStatementForward.setFloat_MethodID_130, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setFloat( _ _arg0: String?, _ _arg1: Float ) throws /* java.sql.SQLException */ {
        try setFloat( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setDouble(java.lang.String,double) throws java.sql.SQLException

    private static var setDouble_MethodID_131: jmethodID?

    open func setDouble( arg0: String?, arg1: Double ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDouble", methodSig: "(Ljava/lang/String;D)V", methodCache: &CallableStatementForward.setDouble_MethodID_131, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setDouble( _ _arg0: String?, _ _arg1: Double ) throws /* java.sql.SQLException */ {
        try setDouble( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setTimestamp(java.lang.String,java.sql.Timestamp) throws java.sql.SQLException

    private static var setTimestamp_MethodID_132: jmethodID?

    open func setTimestamp( arg0: String?, arg1: Timestamp? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTimestamp", methodSig: "(Ljava/lang/String;Ljava/sql/Timestamp;)V", methodCache: &CallableStatementForward.setTimestamp_MethodID_132, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setTimestamp( _ _arg0: String?, _ _arg1: Timestamp? ) throws /* java.sql.SQLException */ {
        try setTimestamp( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar) throws java.sql.SQLException

    private static var setTimestamp_MethodID_133: jmethodID?

    open func setTimestamp( arg0: String?, arg1: Timestamp?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTimestamp", methodSig: "(Ljava/lang/String;Ljava/sql/Timestamp;Ljava/util/Calendar;)V", methodCache: &CallableStatementForward.setTimestamp_MethodID_133, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setTimestamp( _ _arg0: String?, _ _arg1: Timestamp?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        try setTimestamp( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract java.sql.Ref java.sql.CallableStatement.getRef(java.lang.String) throws java.sql.SQLException

    private static var getRef_MethodID_134: jmethodID?

    open func getRef( arg0: String? ) throws /* java.sql.SQLException */ -> Ref! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getRef", methodSig: "(Ljava/lang/String;)Ljava/sql/Ref;", methodCache: &CallableStatementForward.getRef_MethodID_134, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? RefForward( javaObject: __return ) : nil
    }

    open func getRef( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Ref! {
        return try getRef( arg0: _arg0 )
    }

    /// public abstract java.sql.Ref java.sql.CallableStatement.getRef(int) throws java.sql.SQLException

    private static var getRef_MethodID_135: jmethodID?

    open func getRef( arg0: Int ) throws /* java.sql.SQLException */ -> Ref! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getRef", methodSig: "(I)Ljava/sql/Ref;", methodCache: &CallableStatementForward.getRef_MethodID_135, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? RefForward( javaObject: __return ) : nil
    }

    open func getRef( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Ref! {
        return try getRef( arg0: _arg0 )
    }

    /// public abstract java.lang.String java.sql.CallableStatement.getString(java.lang.String) throws java.sql.SQLException

    private static var getString_MethodID_136: jmethodID?

    open func getString( arg0: String? ) throws /* java.sql.SQLException */ -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getString", methodSig: "(Ljava/lang/String;)Ljava/lang/String;", methodCache: &CallableStatementForward.getString_MethodID_136, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: String(), from: __return )
    }

    open func getString( _ _arg0: String? ) throws /* java.sql.SQLException */ -> String! {
        return try getString( arg0: _arg0 )
    }

    /// public abstract java.lang.String java.sql.CallableStatement.getString(int) throws java.sql.SQLException

    private static var getString_MethodID_137: jmethodID?

    open func getString( arg0: Int ) throws /* java.sql.SQLException */ -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getString", methodSig: "(I)Ljava/lang/String;", methodCache: &CallableStatementForward.getString_MethodID_137, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: String(), from: __return )
    }

    open func getString( _ _arg0: Int ) throws /* java.sql.SQLException */ -> String! {
        return try getString( arg0: _arg0 )
    }

    /// public abstract void java.sql.CallableStatement.setURL(java.lang.String,java.net.URL) throws java.sql.SQLException

    private static var setURL_MethodID_138: jmethodID?

    open func setURL( arg0: String?, arg1: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setURL", methodSig: "(Ljava/lang/String;Ljava/net/URL;)V", methodCache: &CallableStatementForward.setURL_MethodID_138, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setURL( _ _arg0: String?, _ _arg1: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setURL( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setTime(java.lang.String,java.sql.Time,java.util.Calendar) throws java.sql.SQLException

    private static var setTime_MethodID_139: jmethodID?

    open func setTime( arg0: String?, arg1: Time?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTime", methodSig: "(Ljava/lang/String;Ljava/sql/Time;Ljava/util/Calendar;)V", methodCache: &CallableStatementForward.setTime_MethodID_139, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setTime( _ _arg0: String?, _ _arg1: Time?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        try setTime( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.setTime(java.lang.String,java.sql.Time) throws java.sql.SQLException

    private static var setTime_MethodID_140: jmethodID?

    open func setTime( arg0: String?, arg1: Time? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTime", methodSig: "(Ljava/lang/String;Ljava/sql/Time;)V", methodCache: &CallableStatementForward.setTime_MethodID_140, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setTime( _ _arg0: String?, _ _arg1: Time? ) throws /* java.sql.SQLException */ {
        try setTime( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.sql.Time java.sql.CallableStatement.getTime(java.lang.String) throws java.sql.SQLException

    private static var getTime_MethodID_141: jmethodID?

    open func getTime( arg0: String? ) throws /* java.sql.SQLException */ -> Time! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTime", methodSig: "(Ljava/lang/String;)Ljava/sql/Time;", methodCache: &CallableStatementForward.getTime_MethodID_141, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? Time( javaObject: __return ) : nil
    }

    open func getTime( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Time! {
        return try getTime( arg0: _arg0 )
    }

    /// public abstract java.sql.Time java.sql.CallableStatement.getTime(int) throws java.sql.SQLException

    private static var getTime_MethodID_142: jmethodID?

    open func getTime( arg0: Int ) throws /* java.sql.SQLException */ -> Time! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTime", methodSig: "(I)Ljava/sql/Time;", methodCache: &CallableStatementForward.getTime_MethodID_142, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? Time( javaObject: __return ) : nil
    }

    open func getTime( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Time! {
        return try getTime( arg0: _arg0 )
    }

    /// public abstract java.sql.Time java.sql.CallableStatement.getTime(int,java.util.Calendar) throws java.sql.SQLException

    private static var getTime_MethodID_143: jmethodID?

    open func getTime( arg0: Int, arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Time! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTime", methodSig: "(ILjava/util/Calendar;)Ljava/sql/Time;", methodCache: &CallableStatementForward.getTime_MethodID_143, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? Time( javaObject: __return ) : nil
    }

    open func getTime( _ _arg0: Int, _ _arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Time! {
        return try getTime( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.sql.Time java.sql.CallableStatement.getTime(java.lang.String,java.util.Calendar) throws java.sql.SQLException

    private static var getTime_MethodID_144: jmethodID?

    open func getTime( arg0: String?, arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Time! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTime", methodSig: "(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Time;", methodCache: &CallableStatementForward.getTime_MethodID_144, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? Time( javaObject: __return ) : nil
    }

    open func getTime( _ _arg0: String?, _ _arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Time! {
        return try getTime( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.sql.Date java.sql.CallableStatement.getDate(int,java.util.Calendar) throws java.sql.SQLException

    private static var getDate_MethodID_145: jmethodID?

    open func getDate( arg0: Int, arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Date! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDate", methodSig: "(ILjava/util/Calendar;)Ljava/sql/Date;", methodCache: &CallableStatementForward.getDate_MethodID_145, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? Date( javaObject: __return ) : nil
    }

    open func getDate( _ _arg0: Int, _ _arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Date! {
        return try getDate( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.sql.Date java.sql.CallableStatement.getDate(java.lang.String) throws java.sql.SQLException

    private static var getDate_MethodID_146: jmethodID?

    open func getDate( arg0: String? ) throws /* java.sql.SQLException */ -> Date! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDate", methodSig: "(Ljava/lang/String;)Ljava/sql/Date;", methodCache: &CallableStatementForward.getDate_MethodID_146, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? Date( javaObject: __return ) : nil
    }

    open func getDate( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Date! {
        return try getDate( arg0: _arg0 )
    }

    /// public abstract java.sql.Date java.sql.CallableStatement.getDate(int) throws java.sql.SQLException

    private static var getDate_MethodID_147: jmethodID?

    open func getDate( arg0: Int ) throws /* java.sql.SQLException */ -> Date! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDate", methodSig: "(I)Ljava/sql/Date;", methodCache: &CallableStatementForward.getDate_MethodID_147, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? Date( javaObject: __return ) : nil
    }

    open func getDate( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Date! {
        return try getDate( arg0: _arg0 )
    }

    /// public abstract java.sql.Date java.sql.CallableStatement.getDate(java.lang.String,java.util.Calendar) throws java.sql.SQLException

    private static var getDate_MethodID_148: jmethodID?

    open func getDate( arg0: String?, arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Date! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDate", methodSig: "(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Date;", methodCache: &CallableStatementForward.getDate_MethodID_148, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? Date( javaObject: __return ) : nil
    }

    open func getDate( _ _arg0: String?, _ _arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Date! {
        return try getDate( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.sql.Timestamp java.sql.CallableStatement.getTimestamp(int) throws java.sql.SQLException

    private static var getTimestamp_MethodID_149: jmethodID?

    open func getTimestamp( arg0: Int ) throws /* java.sql.SQLException */ -> Timestamp! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTimestamp", methodSig: "(I)Ljava/sql/Timestamp;", methodCache: &CallableStatementForward.getTimestamp_MethodID_149, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? Timestamp( javaObject: __return ) : nil
    }

    open func getTimestamp( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Timestamp! {
        return try getTimestamp( arg0: _arg0 )
    }

    /// public abstract java.sql.Timestamp java.sql.CallableStatement.getTimestamp(int,java.util.Calendar) throws java.sql.SQLException

    private static var getTimestamp_MethodID_150: jmethodID?

    open func getTimestamp( arg0: Int, arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Timestamp! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTimestamp", methodSig: "(ILjava/util/Calendar;)Ljava/sql/Timestamp;", methodCache: &CallableStatementForward.getTimestamp_MethodID_150, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? Timestamp( javaObject: __return ) : nil
    }

    open func getTimestamp( _ _arg0: Int, _ _arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Timestamp! {
        return try getTimestamp( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.sql.Timestamp java.sql.CallableStatement.getTimestamp(java.lang.String,java.util.Calendar) throws java.sql.SQLException

    private static var getTimestamp_MethodID_151: jmethodID?

    open func getTimestamp( arg0: String?, arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Timestamp! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTimestamp", methodSig: "(Ljava/lang/String;Ljava/util/Calendar;)Ljava/sql/Timestamp;", methodCache: &CallableStatementForward.getTimestamp_MethodID_151, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? Timestamp( javaObject: __return ) : nil
    }

    open func getTimestamp( _ _arg0: String?, _ _arg1: java_util.Calendar? ) throws /* java.sql.SQLException */ -> Timestamp! {
        return try getTimestamp( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.sql.Timestamp java.sql.CallableStatement.getTimestamp(java.lang.String) throws java.sql.SQLException

    private static var getTimestamp_MethodID_152: jmethodID?

    open func getTimestamp( arg0: String? ) throws /* java.sql.SQLException */ -> Timestamp! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTimestamp", methodSig: "(Ljava/lang/String;)Ljava/sql/Timestamp;", methodCache: &CallableStatementForward.getTimestamp_MethodID_152, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? Timestamp( javaObject: __return ) : nil
    }

    open func getTimestamp( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Timestamp! {
        return try getTimestamp( arg0: _arg0 )
    }

    /// public abstract void java.sql.CallableStatement.setDate(java.lang.String,java.sql.Date) throws java.sql.SQLException

    private static var setDate_MethodID_153: jmethodID?

    open func setDate( arg0: String?, arg1: Date? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDate", methodSig: "(Ljava/lang/String;Ljava/sql/Date;)V", methodCache: &CallableStatementForward.setDate_MethodID_153, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setDate( _ _arg0: String?, _ _arg1: Date? ) throws /* java.sql.SQLException */ {
        try setDate( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setDate(java.lang.String,java.sql.Date,java.util.Calendar) throws java.sql.SQLException

    private static var setDate_MethodID_154: jmethodID?

    open func setDate( arg0: String?, arg1: Date?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDate", methodSig: "(Ljava/lang/String;Ljava/sql/Date;Ljava/util/Calendar;)V", methodCache: &CallableStatementForward.setDate_MethodID_154, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setDate( _ _arg0: String?, _ _arg1: Date?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        try setDate( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract boolean java.sql.CallableStatement.wasNull() throws java.sql.SQLException

    private static var wasNull_MethodID_155: jmethodID?

    open func wasNull() throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "wasNull", methodSig: "()Z", methodCache: &CallableStatementForward.wasNull_MethodID_155, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract java.math.BigDecimal java.sql.CallableStatement.getBigDecimal(int) throws java.sql.SQLException

    /// public abstract java.math.BigDecimal java.sql.CallableStatement.getBigDecimal(int,int) throws java.sql.SQLException

    /// public abstract java.math.BigDecimal java.sql.CallableStatement.getBigDecimal(java.lang.String) throws java.sql.SQLException

    /// public abstract java.io.Reader java.sql.CallableStatement.getCharacterStream(java.lang.String) throws java.sql.SQLException

    /// public abstract java.io.Reader java.sql.CallableStatement.getCharacterStream(int) throws java.sql.SQLException

    /// public abstract java.sql.Blob java.sql.CallableStatement.getBlob(java.lang.String) throws java.sql.SQLException

    private static var getBlob_MethodID_156: jmethodID?

    open func getBlob( arg0: String? ) throws /* java.sql.SQLException */ -> Blob! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBlob", methodSig: "(Ljava/lang/String;)Ljava/sql/Blob;", methodCache: &CallableStatementForward.getBlob_MethodID_156, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? BlobForward( javaObject: __return ) : nil
    }

    open func getBlob( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Blob! {
        return try getBlob( arg0: _arg0 )
    }

    /// public abstract java.sql.Blob java.sql.CallableStatement.getBlob(int) throws java.sql.SQLException

    private static var getBlob_MethodID_157: jmethodID?

    open func getBlob( arg0: Int ) throws /* java.sql.SQLException */ -> Blob! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBlob", methodSig: "(I)Ljava/sql/Blob;", methodCache: &CallableStatementForward.getBlob_MethodID_157, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? BlobForward( javaObject: __return ) : nil
    }

    open func getBlob( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Blob! {
        return try getBlob( arg0: _arg0 )
    }

    /// public abstract java.sql.Clob java.sql.CallableStatement.getClob(int) throws java.sql.SQLException

    private static var getClob_MethodID_158: jmethodID?

    open func getClob( arg0: Int ) throws /* java.sql.SQLException */ -> Clob! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getClob", methodSig: "(I)Ljava/sql/Clob;", methodCache: &CallableStatementForward.getClob_MethodID_158, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ClobForward( javaObject: __return ) : nil
    }

    open func getClob( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Clob! {
        return try getClob( arg0: _arg0 )
    }

    /// public abstract java.sql.Clob java.sql.CallableStatement.getClob(java.lang.String) throws java.sql.SQLException

    private static var getClob_MethodID_159: jmethodID?

    open func getClob( arg0: String? ) throws /* java.sql.SQLException */ -> Clob! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getClob", methodSig: "(Ljava/lang/String;)Ljava/sql/Clob;", methodCache: &CallableStatementForward.getClob_MethodID_159, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ClobForward( javaObject: __return ) : nil
    }

    open func getClob( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Clob! {
        return try getClob( arg0: _arg0 )
    }

    /// public abstract java.sql.RowId java.sql.CallableStatement.getRowId(int) throws java.sql.SQLException

    private static var getRowId_MethodID_160: jmethodID?

    open func getRowId( arg0: Int ) throws /* java.sql.SQLException */ -> RowId! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getRowId", methodSig: "(I)Ljava/sql/RowId;", methodCache: &CallableStatementForward.getRowId_MethodID_160, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? RowIdForward( javaObject: __return ) : nil
    }

    open func getRowId( _ _arg0: Int ) throws /* java.sql.SQLException */ -> RowId! {
        return try getRowId( arg0: _arg0 )
    }

    /// public abstract java.sql.RowId java.sql.CallableStatement.getRowId(java.lang.String) throws java.sql.SQLException

    private static var getRowId_MethodID_161: jmethodID?

    open func getRowId( arg0: String? ) throws /* java.sql.SQLException */ -> RowId! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getRowId", methodSig: "(Ljava/lang/String;)Ljava/sql/RowId;", methodCache: &CallableStatementForward.getRowId_MethodID_161, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? RowIdForward( javaObject: __return ) : nil
    }

    open func getRowId( _ _arg0: String? ) throws /* java.sql.SQLException */ -> RowId! {
        return try getRowId( arg0: _arg0 )
    }

    /// public abstract java.sql.NClob java.sql.CallableStatement.getNClob(java.lang.String) throws java.sql.SQLException

    private static var getNClob_MethodID_162: jmethodID?

    open func getNClob( arg0: String? ) throws /* java.sql.SQLException */ -> NClob! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNClob", methodSig: "(Ljava/lang/String;)Ljava/sql/NClob;", methodCache: &CallableStatementForward.getNClob_MethodID_162, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? NClobForward( javaObject: __return ) : nil
    }

    open func getNClob( _ _arg0: String? ) throws /* java.sql.SQLException */ -> NClob! {
        return try getNClob( arg0: _arg0 )
    }

    /// public abstract java.sql.NClob java.sql.CallableStatement.getNClob(int) throws java.sql.SQLException

    private static var getNClob_MethodID_163: jmethodID?

    open func getNClob( arg0: Int ) throws /* java.sql.SQLException */ -> NClob! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNClob", methodSig: "(I)Ljava/sql/NClob;", methodCache: &CallableStatementForward.getNClob_MethodID_163, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? NClobForward( javaObject: __return ) : nil
    }

    open func getNClob( _ _arg0: Int ) throws /* java.sql.SQLException */ -> NClob! {
        return try getNClob( arg0: _arg0 )
    }

    /// public abstract java.sql.SQLXML java.sql.CallableStatement.getSQLXML(java.lang.String) throws java.sql.SQLException

    private static var getSQLXML_MethodID_164: jmethodID?

    open func getSQLXML( arg0: String? ) throws /* java.sql.SQLException */ -> SQLXML! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSQLXML", methodSig: "(Ljava/lang/String;)Ljava/sql/SQLXML;", methodCache: &CallableStatementForward.getSQLXML_MethodID_164, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? SQLXMLForward( javaObject: __return ) : nil
    }

    open func getSQLXML( _ _arg0: String? ) throws /* java.sql.SQLException */ -> SQLXML! {
        return try getSQLXML( arg0: _arg0 )
    }

    /// public abstract java.sql.SQLXML java.sql.CallableStatement.getSQLXML(int) throws java.sql.SQLException

    private static var getSQLXML_MethodID_165: jmethodID?

    open func getSQLXML( arg0: Int ) throws /* java.sql.SQLException */ -> SQLXML! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSQLXML", methodSig: "(I)Ljava/sql/SQLXML;", methodCache: &CallableStatementForward.getSQLXML_MethodID_165, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? SQLXMLForward( javaObject: __return ) : nil
    }

    open func getSQLXML( _ _arg0: Int ) throws /* java.sql.SQLException */ -> SQLXML! {
        return try getSQLXML( arg0: _arg0 )
    }

    /// public abstract java.lang.String java.sql.CallableStatement.getNString(int) throws java.sql.SQLException

    private static var getNString_MethodID_166: jmethodID?

    open func getNString( arg0: Int ) throws /* java.sql.SQLException */ -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNString", methodSig: "(I)Ljava/lang/String;", methodCache: &CallableStatementForward.getNString_MethodID_166, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: String(), from: __return )
    }

    open func getNString( _ _arg0: Int ) throws /* java.sql.SQLException */ -> String! {
        return try getNString( arg0: _arg0 )
    }

    /// public abstract java.lang.String java.sql.CallableStatement.getNString(java.lang.String) throws java.sql.SQLException

    private static var getNString_MethodID_167: jmethodID?

    open func getNString( arg0: String? ) throws /* java.sql.SQLException */ -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNString", methodSig: "(Ljava/lang/String;)Ljava/lang/String;", methodCache: &CallableStatementForward.getNString_MethodID_167, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: String(), from: __return )
    }

    open func getNString( _ _arg0: String? ) throws /* java.sql.SQLException */ -> String! {
        return try getNString( arg0: _arg0 )
    }

    /// public abstract java.io.Reader java.sql.CallableStatement.getNCharacterStream(java.lang.String) throws java.sql.SQLException

    /// public abstract java.io.Reader java.sql.CallableStatement.getNCharacterStream(int) throws java.sql.SQLException

    /// public abstract void java.sql.CallableStatement.setBytes(java.lang.String,byte[]) throws java.sql.SQLException

    private static var setBytes_MethodID_168: jmethodID?

    open func setBytes( arg0: String?, arg1: [Int8]? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBytes", methodSig: "(Ljava/lang/String;[B)V", methodCache: &CallableStatementForward.setBytes_MethodID_168, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBytes( _ _arg0: String?, _ _arg1: [Int8]? ) throws /* java.sql.SQLException */ {
        try setBytes( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setBinaryStream(java.lang.String,java.io.InputStream,long) throws java.sql.SQLException

    private static var setBinaryStream_MethodID_169: jmethodID?

    open func setBinaryStream( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBinaryStream", methodSig: "(Ljava/lang/String;Ljava/io/InputStream;J)V", methodCache: &CallableStatementForward.setBinaryStream_MethodID_169, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBinaryStream( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setBinaryStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.setBinaryStream(java.lang.String,java.io.InputStream,int) throws java.sql.SQLException

    private static var setBinaryStream_MethodID_170: jmethodID?

    open func setBinaryStream( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBinaryStream", methodSig: "(Ljava/lang/String;Ljava/io/InputStream;I)V", methodCache: &CallableStatementForward.setBinaryStream_MethodID_170, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBinaryStream( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try setBinaryStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.setBinaryStream(java.lang.String,java.io.InputStream) throws java.sql.SQLException

    private static var setBinaryStream_MethodID_171: jmethodID?

    open func setBinaryStream( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBinaryStream", methodSig: "(Ljava/lang/String;Ljava/io/InputStream;)V", methodCache: &CallableStatementForward.setBinaryStream_MethodID_171, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBinaryStream( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setBinaryStream( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.registerOutParameter(int,int,java.lang.String) throws java.sql.SQLException

    private static var registerOutParameter_MethodID_172: jmethodID?

    open func registerOutParameter( arg0: Int, arg1: Int, arg2: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "registerOutParameter", methodSig: "(IILjava/lang/String;)V", methodCache: &CallableStatementForward.registerOutParameter_MethodID_172, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func registerOutParameter( _ _arg0: Int, _ _arg1: Int, _ _arg2: String? ) throws /* java.sql.SQLException */ {
        try registerOutParameter( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.registerOutParameter(int,int,int) throws java.sql.SQLException

    private static var registerOutParameter_MethodID_173: jmethodID?

    open func registerOutParameter( arg0: Int, arg1: Int, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "registerOutParameter", methodSig: "(III)V", methodCache: &CallableStatementForward.registerOutParameter_MethodID_173, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func registerOutParameter( _ _arg0: Int, _ _arg1: Int, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try registerOutParameter( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.registerOutParameter(int,int) throws java.sql.SQLException

    private static var registerOutParameter_MethodID_174: jmethodID?

    open func registerOutParameter( arg0: Int, arg1: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "registerOutParameter", methodSig: "(II)V", methodCache: &CallableStatementForward.registerOutParameter_MethodID_174, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func registerOutParameter( _ _arg0: Int, _ _arg1: Int ) throws /* java.sql.SQLException */ {
        try registerOutParameter( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.registerOutParameter(java.lang.String,int) throws java.sql.SQLException

    private static var registerOutParameter_MethodID_175: jmethodID?

    open func registerOutParameter( arg0: String?, arg1: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "registerOutParameter", methodSig: "(Ljava/lang/String;I)V", methodCache: &CallableStatementForward.registerOutParameter_MethodID_175, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func registerOutParameter( _ _arg0: String?, _ _arg1: Int ) throws /* java.sql.SQLException */ {
        try registerOutParameter( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.registerOutParameter(java.lang.String,int,int) throws java.sql.SQLException

    private static var registerOutParameter_MethodID_176: jmethodID?

    open func registerOutParameter( arg0: String?, arg1: Int, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "registerOutParameter", methodSig: "(Ljava/lang/String;II)V", methodCache: &CallableStatementForward.registerOutParameter_MethodID_176, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func registerOutParameter( _ _arg0: String?, _ _arg1: Int, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try registerOutParameter( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.registerOutParameter(java.lang.String,int,java.lang.String) throws java.sql.SQLException

    private static var registerOutParameter_MethodID_177: jmethodID?

    open func registerOutParameter( arg0: String?, arg1: Int, arg2: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "registerOutParameter", methodSig: "(Ljava/lang/String;ILjava/lang/String;)V", methodCache: &CallableStatementForward.registerOutParameter_MethodID_177, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func registerOutParameter( _ _arg0: String?, _ _arg1: Int, _ _arg2: String? ) throws /* java.sql.SQLException */ {
        try registerOutParameter( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.setNull(java.lang.String,int) throws java.sql.SQLException

    private static var setNull_MethodID_178: jmethodID?

    open func setNull( arg0: String?, arg1: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNull", methodSig: "(Ljava/lang/String;I)V", methodCache: &CallableStatementForward.setNull_MethodID_178, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNull( _ _arg0: String?, _ _arg1: Int ) throws /* java.sql.SQLException */ {
        try setNull( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setNull(java.lang.String,int,java.lang.String) throws java.sql.SQLException

    private static var setNull_MethodID_179: jmethodID?

    open func setNull( arg0: String?, arg1: Int, arg2: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNull", methodSig: "(Ljava/lang/String;ILjava/lang/String;)V", methodCache: &CallableStatementForward.setNull_MethodID_179, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNull( _ _arg0: String?, _ _arg1: Int, _ _arg2: String? ) throws /* java.sql.SQLException */ {
        try setNull( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.setBigDecimal(java.lang.String,java.math.BigDecimal) throws java.sql.SQLException

    private static var setBigDecimal_MethodID_180: jmethodID?

    open func setBigDecimal( arg0: String?, arg1: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBigDecimal", methodSig: "(Ljava/lang/String;Ljava/math/BigDecimal;)V", methodCache: &CallableStatementForward.setBigDecimal_MethodID_180, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBigDecimal( _ _arg0: String?, _ _arg1: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setBigDecimal( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setString(java.lang.String,java.lang.String) throws java.sql.SQLException

    private static var setString_MethodID_181: jmethodID?

    open func setString( arg0: String?, arg1: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setString", methodSig: "(Ljava/lang/String;Ljava/lang/String;)V", methodCache: &CallableStatementForward.setString_MethodID_181, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setString( _ _arg0: String?, _ _arg1: String? ) throws /* java.sql.SQLException */ {
        try setString( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setAsciiStream(java.lang.String,java.io.InputStream,long) throws java.sql.SQLException

    private static var setAsciiStream_MethodID_182: jmethodID?

    open func setAsciiStream( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAsciiStream", methodSig: "(Ljava/lang/String;Ljava/io/InputStream;J)V", methodCache: &CallableStatementForward.setAsciiStream_MethodID_182, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setAsciiStream( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setAsciiStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.setAsciiStream(java.lang.String,java.io.InputStream,int) throws java.sql.SQLException

    private static var setAsciiStream_MethodID_183: jmethodID?

    open func setAsciiStream( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAsciiStream", methodSig: "(Ljava/lang/String;Ljava/io/InputStream;I)V", methodCache: &CallableStatementForward.setAsciiStream_MethodID_183, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setAsciiStream( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try setAsciiStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.setAsciiStream(java.lang.String,java.io.InputStream) throws java.sql.SQLException

    private static var setAsciiStream_MethodID_184: jmethodID?

    open func setAsciiStream( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAsciiStream", methodSig: "(Ljava/lang/String;Ljava/io/InputStream;)V", methodCache: &CallableStatementForward.setAsciiStream_MethodID_184, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setAsciiStream( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setAsciiStream( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object) throws java.sql.SQLException

    private static var setObject_MethodID_185: jmethodID?

    open func setObject( arg0: String?, arg1: java_lang.JavaObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setObject", methodSig: "(Ljava/lang/String;Ljava/lang/Object;)V", methodCache: &CallableStatementForward.setObject_MethodID_185, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setObject( _ _arg0: String?, _ _arg1: java_lang.JavaObject? ) throws /* java.sql.SQLException */ {
        try setObject( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object,int) throws java.sql.SQLException

    private static var setObject_MethodID_186: jmethodID?

    open func setObject( arg0: String?, arg1: java_lang.JavaObject?, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setObject", methodSig: "(Ljava/lang/String;Ljava/lang/Object;I)V", methodCache: &CallableStatementForward.setObject_MethodID_186, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setObject( _ _arg0: String?, _ _arg1: java_lang.JavaObject?, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try setObject( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.setObject(java.lang.String,java.lang.Object,int,int) throws java.sql.SQLException

    private static var setObject_MethodID_187: jmethodID?

    open func setObject( arg0: String?, arg1: java_lang.JavaObject?, arg2: Int, arg3: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setObject", methodSig: "(Ljava/lang/String;Ljava/lang/Object;II)V", methodCache: &CallableStatementForward.setObject_MethodID_187, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setObject( _ _arg0: String?, _ _arg1: java_lang.JavaObject?, _ _arg2: Int, _ _arg3: Int ) throws /* java.sql.SQLException */ {
        try setObject( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.sql.CallableStatement.setCharacterStream(java.lang.String,java.io.Reader,long) throws java.sql.SQLException

    private static var setCharacterStream_MethodID_188: jmethodID?

    open func setCharacterStream( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCharacterStream", methodSig: "(Ljava/lang/String;Ljava/io/Reader;J)V", methodCache: &CallableStatementForward.setCharacterStream_MethodID_188, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setCharacterStream( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setCharacterStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.setCharacterStream(java.lang.String,java.io.Reader) throws java.sql.SQLException

    private static var setCharacterStream_MethodID_189: jmethodID?

    open func setCharacterStream( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCharacterStream", methodSig: "(Ljava/lang/String;Ljava/io/Reader;)V", methodCache: &CallableStatementForward.setCharacterStream_MethodID_189, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setCharacterStream( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setCharacterStream( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setCharacterStream(java.lang.String,java.io.Reader,int) throws java.sql.SQLException

    private static var setCharacterStream_MethodID_190: jmethodID?

    open func setCharacterStream( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCharacterStream", methodSig: "(Ljava/lang/String;Ljava/io/Reader;I)V", methodCache: &CallableStatementForward.setCharacterStream_MethodID_190, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setCharacterStream( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try setCharacterStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.setRowId(java.lang.String,java.sql.RowId) throws java.sql.SQLException

    private static var setRowId_MethodID_191: jmethodID?

    open func setRowId( arg0: String?, arg1: RowId? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRowId", methodSig: "(Ljava/lang/String;Ljava/sql/RowId;)V", methodCache: &CallableStatementForward.setRowId_MethodID_191, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setRowId( _ _arg0: String?, _ _arg1: RowId? ) throws /* java.sql.SQLException */ {
        try setRowId( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setNString(java.lang.String,java.lang.String) throws java.sql.SQLException

    private static var setNString_MethodID_192: jmethodID?

    open func setNString( arg0: String?, arg1: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNString", methodSig: "(Ljava/lang/String;Ljava/lang/String;)V", methodCache: &CallableStatementForward.setNString_MethodID_192, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNString( _ _arg0: String?, _ _arg1: String? ) throws /* java.sql.SQLException */ {
        try setNString( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setNCharacterStream(java.lang.String,java.io.Reader) throws java.sql.SQLException

    private static var setNCharacterStream_MethodID_193: jmethodID?

    open func setNCharacterStream( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNCharacterStream", methodSig: "(Ljava/lang/String;Ljava/io/Reader;)V", methodCache: &CallableStatementForward.setNCharacterStream_MethodID_193, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNCharacterStream( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setNCharacterStream( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setNCharacterStream(java.lang.String,java.io.Reader,long) throws java.sql.SQLException

    private static var setNCharacterStream_MethodID_194: jmethodID?

    open func setNCharacterStream( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNCharacterStream", methodSig: "(Ljava/lang/String;Ljava/io/Reader;J)V", methodCache: &CallableStatementForward.setNCharacterStream_MethodID_194, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNCharacterStream( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setNCharacterStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.setNClob(java.lang.String,java.io.Reader) throws java.sql.SQLException

    private static var setNClob_MethodID_195: jmethodID?

    open func setNClob( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNClob", methodSig: "(Ljava/lang/String;Ljava/io/Reader;)V", methodCache: &CallableStatementForward.setNClob_MethodID_195, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNClob( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setNClob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setNClob(java.lang.String,java.io.Reader,long) throws java.sql.SQLException

    private static var setNClob_MethodID_196: jmethodID?

    open func setNClob( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNClob", methodSig: "(Ljava/lang/String;Ljava/io/Reader;J)V", methodCache: &CallableStatementForward.setNClob_MethodID_196, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNClob( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setNClob( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.setNClob(java.lang.String,java.sql.NClob) throws java.sql.SQLException

    private static var setNClob_MethodID_197: jmethodID?

    open func setNClob( arg0: String?, arg1: NClob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNClob", methodSig: "(Ljava/lang/String;Ljava/sql/NClob;)V", methodCache: &CallableStatementForward.setNClob_MethodID_197, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setNClob( _ _arg0: String?, _ _arg1: NClob? ) throws /* java.sql.SQLException */ {
        try setNClob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setClob(java.lang.String,java.io.Reader,long) throws java.sql.SQLException

    private static var setClob_MethodID_198: jmethodID?

    open func setClob( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setClob", methodSig: "(Ljava/lang/String;Ljava/io/Reader;J)V", methodCache: &CallableStatementForward.setClob_MethodID_198, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setClob( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setClob( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.setClob(java.lang.String,java.io.Reader) throws java.sql.SQLException

    private static var setClob_MethodID_199: jmethodID?

    open func setClob( arg0: String?, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setClob", methodSig: "(Ljava/lang/String;Ljava/io/Reader;)V", methodCache: &CallableStatementForward.setClob_MethodID_199, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setClob( _ _arg0: String?, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setClob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setClob(java.lang.String,java.sql.Clob) throws java.sql.SQLException

    private static var setClob_MethodID_200: jmethodID?

    open func setClob( arg0: String?, arg1: Clob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setClob", methodSig: "(Ljava/lang/String;Ljava/sql/Clob;)V", methodCache: &CallableStatementForward.setClob_MethodID_200, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setClob( _ _arg0: String?, _ _arg1: Clob? ) throws /* java.sql.SQLException */ {
        try setClob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setBlob(java.lang.String,java.sql.Blob) throws java.sql.SQLException

    private static var setBlob_MethodID_201: jmethodID?

    open func setBlob( arg0: String?, arg1: Blob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBlob", methodSig: "(Ljava/lang/String;Ljava/sql/Blob;)V", methodCache: &CallableStatementForward.setBlob_MethodID_201, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBlob( _ _arg0: String?, _ _arg1: Blob? ) throws /* java.sql.SQLException */ {
        try setBlob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setBlob(java.lang.String,java.io.InputStream) throws java.sql.SQLException

    private static var setBlob_MethodID_202: jmethodID?

    open func setBlob( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBlob", methodSig: "(Ljava/lang/String;Ljava/io/InputStream;)V", methodCache: &CallableStatementForward.setBlob_MethodID_202, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBlob( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setBlob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.CallableStatement.setBlob(java.lang.String,java.io.InputStream,long) throws java.sql.SQLException

    private static var setBlob_MethodID_203: jmethodID?

    open func setBlob( arg0: String?, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBlob", methodSig: "(Ljava/lang/String;Ljava/io/InputStream;J)V", methodCache: &CallableStatementForward.setBlob_MethodID_203, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setBlob( _ _arg0: String?, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setBlob( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.CallableStatement.setSQLXML(java.lang.String,java.sql.SQLXML) throws java.sql.SQLException

    private static var setSQLXML_MethodID_204: jmethodID?

    open func setSQLXML( arg0: String?, arg1: SQLXML? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSQLXML", methodSig: "(Ljava/lang/String;Ljava/sql/SQLXML;)V", methodCache: &CallableStatementForward.setSQLXML_MethodID_204, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setSQLXML( _ _arg0: String?, _ _arg1: SQLXML? ) throws /* java.sql.SQLException */ {
        try setSQLXML( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setBoolean(int,boolean) throws java.sql.SQLException

    private static var setBoolean_MethodID_205: jmethodID?

    override open func setBoolean( arg0: Int, arg1: Bool ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBoolean", methodSig: "(IZ)V", methodCache: &CallableStatementForward.setBoolean_MethodID_205, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setBoolean( _ _arg0: Int, _ _arg1: Bool ) throws /* java.sql.SQLException */ {
        try setBoolean( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setByte(int,byte) throws java.sql.SQLException

    private static var setByte_MethodID_206: jmethodID?

    override open func setByte( arg0: Int, arg1: Int8 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setByte", methodSig: "(IB)V", methodCache: &CallableStatementForward.setByte_MethodID_206, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setByte( _ _arg0: Int, _ _arg1: Int8 ) throws /* java.sql.SQLException */ {
        try setByte( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setShort(int,short) throws java.sql.SQLException

    private static var setShort_MethodID_207: jmethodID?

    override open func setShort( arg0: Int, arg1: Int16 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setShort", methodSig: "(IS)V", methodCache: &CallableStatementForward.setShort_MethodID_207, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setShort( _ _arg0: Int, _ _arg1: Int16 ) throws /* java.sql.SQLException */ {
        try setShort( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setInt(int,int) throws java.sql.SQLException

    private static var setInt_MethodID_208: jmethodID?

    override open func setInt( arg0: Int, arg1: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setInt", methodSig: "(II)V", methodCache: &CallableStatementForward.setInt_MethodID_208, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setInt( _ _arg0: Int, _ _arg1: Int ) throws /* java.sql.SQLException */ {
        try setInt( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setLong(int,long) throws java.sql.SQLException

    private static var setLong_MethodID_209: jmethodID?

    override open func setLong( arg0: Int, arg1: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLong", methodSig: "(IJ)V", methodCache: &CallableStatementForward.setLong_MethodID_209, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setLong( _ _arg0: Int, _ _arg1: Int64 ) throws /* java.sql.SQLException */ {
        try setLong( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setFloat(int,float) throws java.sql.SQLException

    private static var setFloat_MethodID_210: jmethodID?

    override open func setFloat( arg0: Int, arg1: Float ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFloat", methodSig: "(IF)V", methodCache: &CallableStatementForward.setFloat_MethodID_210, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setFloat( _ _arg0: Int, _ _arg1: Float ) throws /* java.sql.SQLException */ {
        try setFloat( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setDouble(int,double) throws java.sql.SQLException

    private static var setDouble_MethodID_211: jmethodID?

    override open func setDouble( arg0: Int, arg1: Double ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDouble", methodSig: "(ID)V", methodCache: &CallableStatementForward.setDouble_MethodID_211, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setDouble( _ _arg0: Int, _ _arg1: Double ) throws /* java.sql.SQLException */ {
        try setDouble( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp) throws java.sql.SQLException

    private static var setTimestamp_MethodID_212: jmethodID?

    override open func setTimestamp( arg0: Int, arg1: Timestamp? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTimestamp", methodSig: "(ILjava/sql/Timestamp;)V", methodCache: &CallableStatementForward.setTimestamp_MethodID_212, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setTimestamp( _ _arg0: Int, _ _arg1: Timestamp? ) throws /* java.sql.SQLException */ {
        try setTimestamp( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setTimestamp(int,java.sql.Timestamp,java.util.Calendar) throws java.sql.SQLException

    private static var setTimestamp_MethodID_213: jmethodID?

    override open func setTimestamp( arg0: Int, arg1: Timestamp?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTimestamp", methodSig: "(ILjava/sql/Timestamp;Ljava/util/Calendar;)V", methodCache: &CallableStatementForward.setTimestamp_MethodID_213, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setTimestamp( _ _arg0: Int, _ _arg1: Timestamp?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        try setTimestamp( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setURL(int,java.net.URL) throws java.sql.SQLException

    private static var setURL_MethodID_214: jmethodID?

    override open func setURL( arg0: Int, arg1: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setURL", methodSig: "(ILjava/net/URL;)V", methodCache: &CallableStatementForward.setURL_MethodID_214, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setURL( _ _arg0: Int, _ _arg1: /* java.net.URL */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setURL( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setTime(int,java.sql.Time,java.util.Calendar) throws java.sql.SQLException

    private static var setTime_MethodID_215: jmethodID?

    override open func setTime( arg0: Int, arg1: Time?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTime", methodSig: "(ILjava/sql/Time;Ljava/util/Calendar;)V", methodCache: &CallableStatementForward.setTime_MethodID_215, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setTime( _ _arg0: Int, _ _arg1: Time?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        try setTime( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setTime(int,java.sql.Time) throws java.sql.SQLException

    private static var setTime_MethodID_216: jmethodID?

    override open func setTime( arg0: Int, arg1: Time? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTime", methodSig: "(ILjava/sql/Time;)V", methodCache: &CallableStatementForward.setTime_MethodID_216, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setTime( _ _arg0: Int, _ _arg1: Time? ) throws /* java.sql.SQLException */ {
        try setTime( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setDate(int,java.sql.Date) throws java.sql.SQLException

    private static var setDate_MethodID_217: jmethodID?

    override open func setDate( arg0: Int, arg1: Date? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDate", methodSig: "(ILjava/sql/Date;)V", methodCache: &CallableStatementForward.setDate_MethodID_217, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setDate( _ _arg0: Int, _ _arg1: Date? ) throws /* java.sql.SQLException */ {
        try setDate( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setDate(int,java.sql.Date,java.util.Calendar) throws java.sql.SQLException

    private static var setDate_MethodID_218: jmethodID?

    override open func setDate( arg0: Int, arg1: Date?, arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDate", methodSig: "(ILjava/sql/Date;Ljava/util/Calendar;)V", methodCache: &CallableStatementForward.setDate_MethodID_218, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setDate( _ _arg0: Int, _ _arg1: Date?, _ _arg2: java_util.Calendar? ) throws /* java.sql.SQLException */ {
        try setDate( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract boolean java.sql.PreparedStatement.execute() throws java.sql.SQLException

    private static var execute_MethodID_219: jmethodID?

    override open func execute() throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "execute", methodSig: "()Z", methodCache: &CallableStatementForward.execute_MethodID_219, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract java.sql.ResultSetMetaData java.sql.PreparedStatement.getMetaData() throws java.sql.SQLException

    private static var getMetaData_MethodID_220: jmethodID?

    override open func getMetaData() throws /* java.sql.SQLException */ -> ResultSetMetaData! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMetaData", methodSig: "()Ljava/sql/ResultSetMetaData;", methodCache: &CallableStatementForward.getMetaData_MethodID_220, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ResultSetMetaDataForward( javaObject: __return ) : nil
    }


    /// public abstract void java.sql.PreparedStatement.setBytes(int,byte[]) throws java.sql.SQLException

    private static var setBytes_MethodID_221: jmethodID?

    override open func setBytes( arg0: Int, arg1: [Int8]? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBytes", methodSig: "(I[B)V", methodCache: &CallableStatementForward.setBytes_MethodID_221, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setBytes( _ _arg0: Int, _ _arg1: [Int8]? ) throws /* java.sql.SQLException */ {
        try setBytes( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream) throws java.sql.SQLException

    private static var setBinaryStream_MethodID_222: jmethodID?

    override open func setBinaryStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBinaryStream", methodSig: "(ILjava/io/InputStream;)V", methodCache: &CallableStatementForward.setBinaryStream_MethodID_222, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setBinaryStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setBinaryStream( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream,int) throws java.sql.SQLException

    private static var setBinaryStream_MethodID_223: jmethodID?

    override open func setBinaryStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBinaryStream", methodSig: "(ILjava/io/InputStream;I)V", methodCache: &CallableStatementForward.setBinaryStream_MethodID_223, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setBinaryStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try setBinaryStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setBinaryStream(int,java.io.InputStream,long) throws java.sql.SQLException

    private static var setBinaryStream_MethodID_224: jmethodID?

    override open func setBinaryStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBinaryStream", methodSig: "(ILjava/io/InputStream;J)V", methodCache: &CallableStatementForward.setBinaryStream_MethodID_224, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setBinaryStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setBinaryStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setNull(int,int,java.lang.String) throws java.sql.SQLException

    private static var setNull_MethodID_225: jmethodID?

    override open func setNull( arg0: Int, arg1: Int, arg2: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNull", methodSig: "(IILjava/lang/String;)V", methodCache: &CallableStatementForward.setNull_MethodID_225, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setNull( _ _arg0: Int, _ _arg1: Int, _ _arg2: String? ) throws /* java.sql.SQLException */ {
        try setNull( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setNull(int,int) throws java.sql.SQLException

    private static var setNull_MethodID_226: jmethodID?

    override open func setNull( arg0: Int, arg1: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNull", methodSig: "(II)V", methodCache: &CallableStatementForward.setNull_MethodID_226, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setNull( _ _arg0: Int, _ _arg1: Int ) throws /* java.sql.SQLException */ {
        try setNull( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setBigDecimal(int,java.math.BigDecimal) throws java.sql.SQLException

    private static var setBigDecimal_MethodID_227: jmethodID?

    override open func setBigDecimal( arg0: Int, arg1: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBigDecimal", methodSig: "(ILjava/math/BigDecimal;)V", methodCache: &CallableStatementForward.setBigDecimal_MethodID_227, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setBigDecimal( _ _arg0: Int, _ _arg1: /* java.math.BigDecimal */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setBigDecimal( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setString(int,java.lang.String) throws java.sql.SQLException

    private static var setString_MethodID_228: jmethodID?

    override open func setString( arg0: Int, arg1: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setString", methodSig: "(ILjava/lang/String;)V", methodCache: &CallableStatementForward.setString_MethodID_228, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setString( _ _arg0: Int, _ _arg1: String? ) throws /* java.sql.SQLException */ {
        try setString( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream,int) throws java.sql.SQLException

    private static var setAsciiStream_MethodID_229: jmethodID?

    override open func setAsciiStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAsciiStream", methodSig: "(ILjava/io/InputStream;I)V", methodCache: &CallableStatementForward.setAsciiStream_MethodID_229, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setAsciiStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try setAsciiStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream,long) throws java.sql.SQLException

    private static var setAsciiStream_MethodID_230: jmethodID?

    override open func setAsciiStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAsciiStream", methodSig: "(ILjava/io/InputStream;J)V", methodCache: &CallableStatementForward.setAsciiStream_MethodID_230, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setAsciiStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setAsciiStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setAsciiStream(int,java.io.InputStream) throws java.sql.SQLException

    private static var setAsciiStream_MethodID_231: jmethodID?

    override open func setAsciiStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAsciiStream", methodSig: "(ILjava/io/InputStream;)V", methodCache: &CallableStatementForward.setAsciiStream_MethodID_231, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setAsciiStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setAsciiStream( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object) throws java.sql.SQLException

    private static var setObject_MethodID_232: jmethodID?

    override open func setObject( arg0: Int, arg1: java_lang.JavaObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setObject", methodSig: "(ILjava/lang/Object;)V", methodCache: &CallableStatementForward.setObject_MethodID_232, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setObject( _ _arg0: Int, _ _arg1: java_lang.JavaObject? ) throws /* java.sql.SQLException */ {
        try setObject( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object,int) throws java.sql.SQLException

    private static var setObject_MethodID_233: jmethodID?

    override open func setObject( arg0: Int, arg1: java_lang.JavaObject?, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setObject", methodSig: "(ILjava/lang/Object;I)V", methodCache: &CallableStatementForward.setObject_MethodID_233, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setObject( _ _arg0: Int, _ _arg1: java_lang.JavaObject?, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try setObject( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setObject(int,java.lang.Object,int,int) throws java.sql.SQLException

    private static var setObject_MethodID_234: jmethodID?

    override open func setObject( arg0: Int, arg1: java_lang.JavaObject?, arg2: Int, arg3: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        __args[3] = JNIType.encode( value: arg3, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setObject", methodSig: "(ILjava/lang/Object;II)V", methodCache: &CallableStatementForward.setObject_MethodID_234, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setObject( _ _arg0: Int, _ _arg1: java_lang.JavaObject?, _ _arg2: Int, _ _arg3: Int ) throws /* java.sql.SQLException */ {
        try setObject( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3 )
    }

    /// public abstract void java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader,int) throws java.sql.SQLException

    private static var setCharacterStream_MethodID_235: jmethodID?

    override open func setCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCharacterStream", methodSig: "(ILjava/io/Reader;I)V", methodCache: &CallableStatementForward.setCharacterStream_MethodID_235, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try setCharacterStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader,long) throws java.sql.SQLException

    private static var setCharacterStream_MethodID_236: jmethodID?

    override open func setCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCharacterStream", methodSig: "(ILjava/io/Reader;J)V", methodCache: &CallableStatementForward.setCharacterStream_MethodID_236, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setCharacterStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setCharacterStream(int,java.io.Reader) throws java.sql.SQLException

    private static var setCharacterStream_MethodID_237: jmethodID?

    override open func setCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCharacterStream", methodSig: "(ILjava/io/Reader;)V", methodCache: &CallableStatementForward.setCharacterStream_MethodID_237, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setCharacterStream( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setRowId(int,java.sql.RowId) throws java.sql.SQLException

    private static var setRowId_MethodID_238: jmethodID?

    override open func setRowId( arg0: Int, arg1: RowId? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRowId", methodSig: "(ILjava/sql/RowId;)V", methodCache: &CallableStatementForward.setRowId_MethodID_238, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setRowId( _ _arg0: Int, _ _arg1: RowId? ) throws /* java.sql.SQLException */ {
        try setRowId( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setNString(int,java.lang.String) throws java.sql.SQLException

    private static var setNString_MethodID_239: jmethodID?

    override open func setNString( arg0: Int, arg1: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNString", methodSig: "(ILjava/lang/String;)V", methodCache: &CallableStatementForward.setNString_MethodID_239, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setNString( _ _arg0: Int, _ _arg1: String? ) throws /* java.sql.SQLException */ {
        try setNString( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setNCharacterStream(int,java.io.Reader,long) throws java.sql.SQLException

    private static var setNCharacterStream_MethodID_240: jmethodID?

    override open func setNCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNCharacterStream", methodSig: "(ILjava/io/Reader;J)V", methodCache: &CallableStatementForward.setNCharacterStream_MethodID_240, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setNCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setNCharacterStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setNCharacterStream(int,java.io.Reader) throws java.sql.SQLException

    private static var setNCharacterStream_MethodID_241: jmethodID?

    override open func setNCharacterStream( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNCharacterStream", methodSig: "(ILjava/io/Reader;)V", methodCache: &CallableStatementForward.setNCharacterStream_MethodID_241, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setNCharacterStream( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setNCharacterStream( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setNClob(int,java.sql.NClob) throws java.sql.SQLException

    private static var setNClob_MethodID_242: jmethodID?

    override open func setNClob( arg0: Int, arg1: NClob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNClob", methodSig: "(ILjava/sql/NClob;)V", methodCache: &CallableStatementForward.setNClob_MethodID_242, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setNClob( _ _arg0: Int, _ _arg1: NClob? ) throws /* java.sql.SQLException */ {
        try setNClob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setNClob(int,java.io.Reader,long) throws java.sql.SQLException

    private static var setNClob_MethodID_243: jmethodID?

    override open func setNClob( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNClob", methodSig: "(ILjava/io/Reader;J)V", methodCache: &CallableStatementForward.setNClob_MethodID_243, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setNClob( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setNClob( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setNClob(int,java.io.Reader) throws java.sql.SQLException

    private static var setNClob_MethodID_244: jmethodID?

    override open func setNClob( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNClob", methodSig: "(ILjava/io/Reader;)V", methodCache: &CallableStatementForward.setNClob_MethodID_244, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setNClob( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setNClob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setClob(int,java.sql.Clob) throws java.sql.SQLException

    private static var setClob_MethodID_245: jmethodID?

    override open func setClob( arg0: Int, arg1: Clob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setClob", methodSig: "(ILjava/sql/Clob;)V", methodCache: &CallableStatementForward.setClob_MethodID_245, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setClob( _ _arg0: Int, _ _arg1: Clob? ) throws /* java.sql.SQLException */ {
        try setClob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setClob(int,java.io.Reader,long) throws java.sql.SQLException

    private static var setClob_MethodID_246: jmethodID?

    override open func setClob( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setClob", methodSig: "(ILjava/io/Reader;J)V", methodCache: &CallableStatementForward.setClob_MethodID_246, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setClob( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setClob( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setClob(int,java.io.Reader) throws java.sql.SQLException

    private static var setClob_MethodID_247: jmethodID?

    override open func setClob( arg0: Int, arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setClob", methodSig: "(ILjava/io/Reader;)V", methodCache: &CallableStatementForward.setClob_MethodID_247, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setClob( _ _arg0: Int, _ _arg1: /* java.io.Reader */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setClob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setBlob(int,java.sql.Blob) throws java.sql.SQLException

    private static var setBlob_MethodID_248: jmethodID?

    override open func setBlob( arg0: Int, arg1: Blob? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBlob", methodSig: "(ILjava/sql/Blob;)V", methodCache: &CallableStatementForward.setBlob_MethodID_248, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setBlob( _ _arg0: Int, _ _arg1: Blob? ) throws /* java.sql.SQLException */ {
        try setBlob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setBlob(int,java.io.InputStream,long) throws java.sql.SQLException

    private static var setBlob_MethodID_249: jmethodID?

    override open func setBlob( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int64 ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBlob", methodSig: "(ILjava/io/InputStream;J)V", methodCache: &CallableStatementForward.setBlob_MethodID_249, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setBlob( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int64 ) throws /* java.sql.SQLException */ {
        try setBlob( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.setBlob(int,java.io.InputStream) throws java.sql.SQLException

    private static var setBlob_MethodID_250: jmethodID?

    override open func setBlob( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBlob", methodSig: "(ILjava/io/InputStream;)V", methodCache: &CallableStatementForward.setBlob_MethodID_250, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setBlob( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject? ) throws /* java.sql.SQLException */ {
        try setBlob( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setSQLXML(int,java.sql.SQLXML) throws java.sql.SQLException

    private static var setSQLXML_MethodID_251: jmethodID?

    override open func setSQLXML( arg0: Int, arg1: SQLXML? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSQLXML", methodSig: "(ILjava/sql/SQLXML;)V", methodCache: &CallableStatementForward.setSQLXML_MethodID_251, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setSQLXML( _ _arg0: Int, _ _arg1: SQLXML? ) throws /* java.sql.SQLException */ {
        try setSQLXML( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.sql.ResultSet java.sql.PreparedStatement.executeQuery() throws java.sql.SQLException

    private static var executeQuery_MethodID_252: jmethodID?

    override open func executeQuery() throws /* java.sql.SQLException */ -> ResultSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "executeQuery", methodSig: "()Ljava/sql/ResultSet;", methodCache: &CallableStatementForward.executeQuery_MethodID_252, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ResultSetForward( javaObject: __return ) : nil
    }


    /// public abstract int java.sql.PreparedStatement.executeUpdate() throws java.sql.SQLException

    private static var executeUpdate_MethodID_253: jmethodID?

    override open func executeUpdate() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "executeUpdate", methodSig: "()I", methodCache: &CallableStatementForward.executeUpdate_MethodID_253, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.sql.PreparedStatement.setUnicodeStream(int,java.io.InputStream,int) throws java.sql.SQLException

    private static var setUnicodeStream_MethodID_254: jmethodID?

    override open func setUnicodeStream( arg0: Int, arg1: /* java.io.InputStream */ UnclassedObject?, arg2: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        __args[2] = JNIType.encode( value: arg2, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setUnicodeStream", methodSig: "(ILjava/io/InputStream;I)V", methodCache: &CallableStatementForward.setUnicodeStream_MethodID_254, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setUnicodeStream( _ _arg0: Int, _ _arg1: /* java.io.InputStream */ UnclassedObject?, _ _arg2: Int ) throws /* java.sql.SQLException */ {
        try setUnicodeStream( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public abstract void java.sql.PreparedStatement.clearParameters() throws java.sql.SQLException

    private static var clearParameters_MethodID_255: jmethodID?

    override open func clearParameters() throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clearParameters", methodSig: "()V", methodCache: &CallableStatementForward.clearParameters_MethodID_255, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }


    /// public abstract void java.sql.PreparedStatement.addBatch() throws java.sql.SQLException

    private static var addBatch_MethodID_256: jmethodID?

    override open func addBatch() throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addBatch", methodSig: "()V", methodCache: &CallableStatementForward.addBatch_MethodID_256, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }


    /// public abstract void java.sql.PreparedStatement.setRef(int,java.sql.Ref) throws java.sql.SQLException

    private static var setRef_MethodID_257: jmethodID?

    override open func setRef( arg0: Int, arg1: Ref? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRef", methodSig: "(ILjava/sql/Ref;)V", methodCache: &CallableStatementForward.setRef_MethodID_257, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setRef( _ _arg0: Int, _ _arg1: Ref? ) throws /* java.sql.SQLException */ {
        try setRef( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract void java.sql.PreparedStatement.setArray(int,java.sql.Array) throws java.sql.SQLException

    private static var setArray_MethodID_258: jmethodID?

    override open func setArray( arg0: Int, arg1: Array? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = jvalue( l: arg1?.localJavaObject( &__locals ) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setArray", methodSig: "(ILjava/sql/Array;)V", methodCache: &CallableStatementForward.setArray_MethodID_258, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setArray( _ _arg0: Int, _ _arg1: Array? ) throws /* java.sql.SQLException */ {
        try setArray( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.sql.ParameterMetaData java.sql.PreparedStatement.getParameterMetaData() throws java.sql.SQLException

    private static var getParameterMetaData_MethodID_259: jmethodID?

    override open func getParameterMetaData() throws /* java.sql.SQLException */ -> ParameterMetaData! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getParameterMetaData", methodSig: "()Ljava/sql/ParameterMetaData;", methodCache: &CallableStatementForward.getParameterMetaData_MethodID_259, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ParameterMetaDataForward( javaObject: __return ) : nil
    }


    /// public abstract void java.sql.Statement.close() throws java.sql.SQLException

    private static var close_MethodID_260: jmethodID?

    override open func close() throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "close", methodSig: "()V", methodCache: &CallableStatementForward.close_MethodID_260, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }


    /// public abstract boolean java.sql.Statement.isClosed() throws java.sql.SQLException

    private static var isClosed_MethodID_261: jmethodID?

    override open func isClosed() throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isClosed", methodSig: "()Z", methodCache: &CallableStatementForward.isClosed_MethodID_261, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract boolean java.sql.Statement.execute(java.lang.String) throws java.sql.SQLException

    private static var execute_MethodID_262: jmethodID?

    override open func execute( arg0: String? ) throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "execute", methodSig: "(Ljava/lang/String;)Z", methodCache: &CallableStatementForward.execute_MethodID_262, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func execute( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Bool {
        return try execute( arg0: _arg0 )
    }

    /// public abstract boolean java.sql.Statement.execute(java.lang.String,java.lang.String[]) throws java.sql.SQLException

    private static var execute_MethodID_263: jmethodID?

    override open func execute( arg0: String?, arg1: [String]? ) throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "execute", methodSig: "(Ljava/lang/String;[Ljava/lang/String;)Z", methodCache: &CallableStatementForward.execute_MethodID_263, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func execute( _ _arg0: String?, _ _arg1: [String]? ) throws /* java.sql.SQLException */ -> Bool {
        return try execute( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract boolean java.sql.Statement.execute(java.lang.String,int[]) throws java.sql.SQLException

    private static var execute_MethodID_264: jmethodID?

    override open func execute( arg0: String?, arg1: [Int32]? ) throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "execute", methodSig: "(Ljava/lang/String;[I)Z", methodCache: &CallableStatementForward.execute_MethodID_264, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func execute( _ _arg0: String?, _ _arg1: [Int32]? ) throws /* java.sql.SQLException */ -> Bool {
        return try execute( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract boolean java.sql.Statement.execute(java.lang.String,int) throws java.sql.SQLException

    private static var execute_MethodID_265: jmethodID?

    override open func execute( arg0: String?, arg1: Int ) throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "execute", methodSig: "(Ljava/lang/String;I)Z", methodCache: &CallableStatementForward.execute_MethodID_265, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func execute( _ _arg0: String?, _ _arg1: Int ) throws /* java.sql.SQLException */ -> Bool {
        return try execute( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract java.sql.ResultSet java.sql.Statement.getResultSet() throws java.sql.SQLException

    private static var getResultSet_MethodID_266: jmethodID?

    override open func getResultSet() throws /* java.sql.SQLException */ -> ResultSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getResultSet", methodSig: "()Ljava/sql/ResultSet;", methodCache: &CallableStatementForward.getResultSet_MethodID_266, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ResultSetForward( javaObject: __return ) : nil
    }


    /// public abstract java.sql.SQLWarning java.sql.Statement.getWarnings() throws java.sql.SQLException

    private static var getWarnings_MethodID_267: jmethodID?

    override open func getWarnings() throws /* java.sql.SQLException */ -> SQLWarning! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getWarnings", methodSig: "()Ljava/sql/SQLWarning;", methodCache: &CallableStatementForward.getWarnings_MethodID_267, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? SQLWarning( javaObject: __return ) : nil
    }


    /// public abstract void java.sql.Statement.clearWarnings() throws java.sql.SQLException

    private static var clearWarnings_MethodID_268: jmethodID?

    override open func clearWarnings() throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clearWarnings", methodSig: "()V", methodCache: &CallableStatementForward.clearWarnings_MethodID_268, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }


    /// public abstract void java.sql.Statement.setFetchDirection(int) throws java.sql.SQLException

    private static var setFetchDirection_MethodID_269: jmethodID?

    override open func setFetchDirection( arg0: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFetchDirection", methodSig: "(I)V", methodCache: &CallableStatementForward.setFetchDirection_MethodID_269, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setFetchDirection( _ _arg0: Int ) throws /* java.sql.SQLException */ {
        try setFetchDirection( arg0: _arg0 )
    }

    /// public abstract int java.sql.Statement.getFetchDirection() throws java.sql.SQLException

    private static var getFetchDirection_MethodID_270: jmethodID?

    override open func getFetchDirection() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getFetchDirection", methodSig: "()I", methodCache: &CallableStatementForward.getFetchDirection_MethodID_270, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.sql.Statement.setFetchSize(int) throws java.sql.SQLException

    private static var setFetchSize_MethodID_271: jmethodID?

    override open func setFetchSize( arg0: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFetchSize", methodSig: "(I)V", methodCache: &CallableStatementForward.setFetchSize_MethodID_271, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setFetchSize( _ _arg0: Int ) throws /* java.sql.SQLException */ {
        try setFetchSize( arg0: _arg0 )
    }

    /// public abstract int java.sql.Statement.getFetchSize() throws java.sql.SQLException

    private static var getFetchSize_MethodID_272: jmethodID?

    override open func getFetchSize() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getFetchSize", methodSig: "()I", methodCache: &CallableStatementForward.getFetchSize_MethodID_272, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract java.sql.ResultSet java.sql.Statement.executeQuery(java.lang.String) throws java.sql.SQLException

    private static var executeQuery_MethodID_273: jmethodID?

    override open func executeQuery( arg0: String? ) throws /* java.sql.SQLException */ -> ResultSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "executeQuery", methodSig: "(Ljava/lang/String;)Ljava/sql/ResultSet;", methodCache: &CallableStatementForward.executeQuery_MethodID_273, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ResultSetForward( javaObject: __return ) : nil
    }

    override open func executeQuery( _ _arg0: String? ) throws /* java.sql.SQLException */ -> ResultSet! {
        return try executeQuery( arg0: _arg0 )
    }

    /// public abstract int java.sql.Statement.executeUpdate(java.lang.String,java.lang.String[]) throws java.sql.SQLException

    private static var executeUpdate_MethodID_274: jmethodID?

    override open func executeUpdate( arg0: String?, arg1: [String]? ) throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "executeUpdate", methodSig: "(Ljava/lang/String;[Ljava/lang/String;)I", methodCache: &CallableStatementForward.executeUpdate_MethodID_274, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }

    override open func executeUpdate( _ _arg0: String?, _ _arg1: [String]? ) throws /* java.sql.SQLException */ -> Int {
        return try executeUpdate( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract int java.sql.Statement.executeUpdate(java.lang.String,int[]) throws java.sql.SQLException

    private static var executeUpdate_MethodID_275: jmethodID?

    override open func executeUpdate( arg0: String?, arg1: [Int32]? ) throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "executeUpdate", methodSig: "(Ljava/lang/String;[I)I", methodCache: &CallableStatementForward.executeUpdate_MethodID_275, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }

    override open func executeUpdate( _ _arg0: String?, _ _arg1: [Int32]? ) throws /* java.sql.SQLException */ -> Int {
        return try executeUpdate( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract int java.sql.Statement.executeUpdate(java.lang.String,int) throws java.sql.SQLException

    private static var executeUpdate_MethodID_276: jmethodID?

    override open func executeUpdate( arg0: String?, arg1: Int ) throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        __args[1] = JNIType.encode( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "executeUpdate", methodSig: "(Ljava/lang/String;I)I", methodCache: &CallableStatementForward.executeUpdate_MethodID_276, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }

    override open func executeUpdate( _ _arg0: String?, _ _arg1: Int ) throws /* java.sql.SQLException */ -> Int {
        return try executeUpdate( arg0: _arg0, arg1: _arg1 )
    }

    /// public abstract int java.sql.Statement.executeUpdate(java.lang.String) throws java.sql.SQLException

    private static var executeUpdate_MethodID_277: jmethodID?

    override open func executeUpdate( arg0: String? ) throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "executeUpdate", methodSig: "(Ljava/lang/String;)I", methodCache: &CallableStatementForward.executeUpdate_MethodID_277, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }

    override open func executeUpdate( _ _arg0: String? ) throws /* java.sql.SQLException */ -> Int {
        return try executeUpdate( arg0: _arg0 )
    }

    /// public abstract void java.sql.Statement.addBatch(java.lang.String) throws java.sql.SQLException

    private static var addBatch_MethodID_278: jmethodID?

    override open func addBatch( arg0: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addBatch", methodSig: "(Ljava/lang/String;)V", methodCache: &CallableStatementForward.addBatch_MethodID_278, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func addBatch( _ _arg0: String? ) throws /* java.sql.SQLException */ {
        try addBatch( arg0: _arg0 )
    }

    /// public abstract int java.sql.Statement.getMaxFieldSize() throws java.sql.SQLException

    private static var getMaxFieldSize_MethodID_279: jmethodID?

    override open func getMaxFieldSize() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMaxFieldSize", methodSig: "()I", methodCache: &CallableStatementForward.getMaxFieldSize_MethodID_279, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.sql.Statement.setMaxFieldSize(int) throws java.sql.SQLException

    private static var setMaxFieldSize_MethodID_280: jmethodID?

    override open func setMaxFieldSize( arg0: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMaxFieldSize", methodSig: "(I)V", methodCache: &CallableStatementForward.setMaxFieldSize_MethodID_280, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setMaxFieldSize( _ _arg0: Int ) throws /* java.sql.SQLException */ {
        try setMaxFieldSize( arg0: _arg0 )
    }

    /// public abstract int java.sql.Statement.getMaxRows() throws java.sql.SQLException

    private static var getMaxRows_MethodID_281: jmethodID?

    override open func getMaxRows() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMaxRows", methodSig: "()I", methodCache: &CallableStatementForward.getMaxRows_MethodID_281, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.sql.Statement.setMaxRows(int) throws java.sql.SQLException

    private static var setMaxRows_MethodID_282: jmethodID?

    override open func setMaxRows( arg0: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMaxRows", methodSig: "(I)V", methodCache: &CallableStatementForward.setMaxRows_MethodID_282, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setMaxRows( _ _arg0: Int ) throws /* java.sql.SQLException */ {
        try setMaxRows( arg0: _arg0 )
    }

    /// public abstract void java.sql.Statement.setEscapeProcessing(boolean) throws java.sql.SQLException

    private static var setEscapeProcessing_MethodID_283: jmethodID?

    override open func setEscapeProcessing( arg0: Bool ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEscapeProcessing", methodSig: "(Z)V", methodCache: &CallableStatementForward.setEscapeProcessing_MethodID_283, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setEscapeProcessing( _ _arg0: Bool ) throws /* java.sql.SQLException */ {
        try setEscapeProcessing( arg0: _arg0 )
    }

    /// public abstract int java.sql.Statement.getQueryTimeout() throws java.sql.SQLException

    private static var getQueryTimeout_MethodID_284: jmethodID?

    override open func getQueryTimeout() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getQueryTimeout", methodSig: "()I", methodCache: &CallableStatementForward.getQueryTimeout_MethodID_284, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.sql.Statement.setQueryTimeout(int) throws java.sql.SQLException

    private static var setQueryTimeout_MethodID_285: jmethodID?

    override open func setQueryTimeout( arg0: Int ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setQueryTimeout", methodSig: "(I)V", methodCache: &CallableStatementForward.setQueryTimeout_MethodID_285, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setQueryTimeout( _ _arg0: Int ) throws /* java.sql.SQLException */ {
        try setQueryTimeout( arg0: _arg0 )
    }

    /// public abstract void java.sql.Statement.cancel() throws java.sql.SQLException

    private static var cancel_MethodID_286: jmethodID?

    override open func cancel() throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "cancel", methodSig: "()V", methodCache: &CallableStatementForward.cancel_MethodID_286, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }


    /// public abstract void java.sql.Statement.setCursorName(java.lang.String) throws java.sql.SQLException

    private static var setCursorName_MethodID_287: jmethodID?

    override open func setCursorName( arg0: String? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCursorName", methodSig: "(Ljava/lang/String;)V", methodCache: &CallableStatementForward.setCursorName_MethodID_287, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setCursorName( _ _arg0: String? ) throws /* java.sql.SQLException */ {
        try setCursorName( arg0: _arg0 )
    }

    /// public abstract int java.sql.Statement.getUpdateCount() throws java.sql.SQLException

    private static var getUpdateCount_MethodID_288: jmethodID?

    override open func getUpdateCount() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getUpdateCount", methodSig: "()I", methodCache: &CallableStatementForward.getUpdateCount_MethodID_288, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract boolean java.sql.Statement.getMoreResults(int) throws java.sql.SQLException

    private static var getMoreResults_MethodID_289: jmethodID?

    override open func getMoreResults( arg0: Int ) throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getMoreResults", methodSig: "(I)Z", methodCache: &CallableStatementForward.getMoreResults_MethodID_289, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func getMoreResults( _ _arg0: Int ) throws /* java.sql.SQLException */ -> Bool {
        return try getMoreResults( arg0: _arg0 )
    }

    /// public abstract boolean java.sql.Statement.getMoreResults() throws java.sql.SQLException

    private static var getMoreResults_MethodID_290: jmethodID?

    override open func getMoreResults() throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getMoreResults", methodSig: "()Z", methodCache: &CallableStatementForward.getMoreResults_MethodID_290, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract int java.sql.Statement.getResultSetConcurrency() throws java.sql.SQLException

    private static var getResultSetConcurrency_MethodID_291: jmethodID?

    override open func getResultSetConcurrency() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getResultSetConcurrency", methodSig: "()I", methodCache: &CallableStatementForward.getResultSetConcurrency_MethodID_291, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract int java.sql.Statement.getResultSetType() throws java.sql.SQLException

    private static var getResultSetType_MethodID_292: jmethodID?

    override open func getResultSetType() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getResultSetType", methodSig: "()I", methodCache: &CallableStatementForward.getResultSetType_MethodID_292, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.sql.Statement.clearBatch() throws java.sql.SQLException

    private static var clearBatch_MethodID_293: jmethodID?

    override open func clearBatch() throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "clearBatch", methodSig: "()V", methodCache: &CallableStatementForward.clearBatch_MethodID_293, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }


    /// public abstract int[] java.sql.Statement.executeBatch() throws java.sql.SQLException

    private static var executeBatch_MethodID_294: jmethodID?

    override open func executeBatch() throws /* java.sql.SQLException */ -> [Int32]! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "executeBatch", methodSig: "()[I", methodCache: &CallableStatementForward.executeBatch_MethodID_294, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: [Int32](), from: __return )
    }


    /// public abstract java.sql.Connection java.sql.Statement.getConnection() throws java.sql.SQLException

    private static var getConnection_MethodID_295: jmethodID?

    override open func getConnection() throws /* java.sql.SQLException */ -> Connection! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getConnection", methodSig: "()Ljava/sql/Connection;", methodCache: &CallableStatementForward.getConnection_MethodID_295, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ConnectionForward( javaObject: __return ) : nil
    }


    /// public abstract java.sql.ResultSet java.sql.Statement.getGeneratedKeys() throws java.sql.SQLException

    private static var getGeneratedKeys_MethodID_296: jmethodID?

    override open func getGeneratedKeys() throws /* java.sql.SQLException */ -> ResultSet! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getGeneratedKeys", methodSig: "()Ljava/sql/ResultSet;", methodCache: &CallableStatementForward.getGeneratedKeys_MethodID_296, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? ResultSetForward( javaObject: __return ) : nil
    }


    /// public abstract int java.sql.Statement.getResultSetHoldability() throws java.sql.SQLException

    private static var getResultSetHoldability_MethodID_297: jmethodID?

    override open func getResultSetHoldability() throws /* java.sql.SQLException */ -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getResultSetHoldability", methodSig: "()I", methodCache: &CallableStatementForward.getResultSetHoldability_MethodID_297, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Int(), from: __return )
    }


    /// public abstract void java.sql.Statement.setPoolable(boolean) throws java.sql.SQLException

    private static var setPoolable_MethodID_298: jmethodID?

    override open func setPoolable( arg0: Bool ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPoolable", methodSig: "(Z)V", methodCache: &CallableStatementForward.setPoolable_MethodID_298, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    override open func setPoolable( _ _arg0: Bool ) throws /* java.sql.SQLException */ {
        try setPoolable( arg0: _arg0 )
    }

    /// public abstract boolean java.sql.Statement.isPoolable() throws java.sql.SQLException

    private static var isPoolable_MethodID_299: jmethodID?

    override open func isPoolable() throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isPoolable", methodSig: "()Z", methodCache: &CallableStatementForward.isPoolable_MethodID_299, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }


    /// public abstract java.lang.Object java.sql.Wrapper.unwrap(java.lang.Class) throws java.sql.SQLException

    private static var unwrap_MethodID_300: jmethodID?

    override open func unwrap( arg0: java_lang.Class? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "unwrap", methodSig: "(Ljava/lang/Class;)Ljava/lang/Object;", methodCache: &CallableStatementForward.unwrap_MethodID_300, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    override open func unwrap( _ _arg0: java_lang.Class? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        return try unwrap( arg0: _arg0 )
    }

    /// public abstract boolean java.sql.Wrapper.isWrapperFor(java.lang.Class) throws java.sql.SQLException

    private static var isWrapperFor_MethodID_301: jmethodID?

    override open func isWrapperFor( arg0: java_lang.Class? ) throws /* java.sql.SQLException */ -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isWrapperFor", methodSig: "(Ljava/lang/Class;)Z", methodCache: &CallableStatementForward.isWrapperFor_MethodID_301, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: Bool(), from: __return )
    }

    override open func isWrapperFor( _ _arg0: java_lang.Class? ) throws /* java.sql.SQLException */ -> Bool {
        return try isWrapperFor( arg0: _arg0 )
    }

}


