
import java_swift
import java_lang
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home ///
/// Tue Dec 20 11:30:32 GMT 2016 ///

/// interface java.sql.Ref ///

public protocol Ref: JavaProtocol {

    /// public abstract java.lang.Object java.sql.Ref.getObject(java.util.Map) throws java.sql.SQLException

    func getObject( arg0: java_util.Map? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject!
    func getObject( _ _arg0: java_util.Map? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject!

    /// public abstract java.lang.Object java.sql.Ref.getObject() throws java.sql.SQLException

    func getObject() throws /* java.sql.SQLException */ -> java_lang.JavaObject!

    /// public abstract java.lang.String java.sql.Ref.getBaseTypeName() throws java.sql.SQLException

    func getBaseTypeName() throws /* java.sql.SQLException */ -> String!

    /// public abstract void java.sql.Ref.setObject(java.lang.Object) throws java.sql.SQLException

    func setObject( arg0: java_lang.JavaObject? ) throws /* java.sql.SQLException */
    func setObject( _ _arg0: java_lang.JavaObject? ) throws /* java.sql.SQLException */

}

open class RefForward: JNIObjectForward, Ref {

    private static var RefJNIClass: jclass?

    /// public abstract java.lang.Object java.sql.Ref.getObject(java.util.Map) throws java.sql.SQLException

    private static var getObject_MethodID_5: jmethodID?

    open func getObject( arg0: java_util.Map? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = jvalue( l: arg0?.localJavaObject( &__locals ) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getObject", methodSig: "(Ljava/util/Map;)Ljava/lang/Object;", methodCache: &RefForward.getObject_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }

    open func getObject( _ _arg0: java_util.Map? ) throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        return try getObject( arg0: _arg0 )
    }

    /// public abstract java.lang.Object java.sql.Ref.getObject() throws java.sql.SQLException

    private static var getObject_MethodID_6: jmethodID?

    open func getObject() throws /* java.sql.SQLException */ -> java_lang.JavaObject! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getObject", methodSig: "()Ljava/lang/Object;", methodCache: &RefForward.getObject_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return __return != nil ? java_lang.JavaObject( javaObject: __return ) : nil
    }


    /// public abstract java.lang.String java.sql.Ref.getBaseTypeName() throws java.sql.SQLException

    private static var getBaseTypeName_MethodID_7: jmethodID?

    open func getBaseTypeName() throws /* java.sql.SQLException */ -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBaseTypeName", methodSig: "()Ljava/lang/String;", methodCache: &RefForward.getBaseTypeName_MethodID_7, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
        return JNIType.decode( type: String(), from: __return )
    }


    /// public abstract void java.sql.Ref.setObject(java.lang.Object) throws java.sql.SQLException

    private static var setObject_MethodID_8: jmethodID?

    open func setObject( arg0: java_lang.JavaObject? ) throws /* java.sql.SQLException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setObject", methodSig: "(Ljava/lang/Object;)V", methodCache: &RefForward.setObject_MethodID_8, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw SQLException( javaObject: throwable )
        }
    }

    open func setObject( _ _arg0: java_lang.JavaObject? ) throws /* java.sql.SQLException */ {
        try setObject( arg0: _arg0 )
    }

}


